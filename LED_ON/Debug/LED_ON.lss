
LED_ON.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00004222  000042b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000b0  008000b0  00004306  2**0
                  ALLOC
  3 .stab         0000327c  00000000  00000000  00004308  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012ac  00000000  00000000  00007584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a729  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c3c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c524  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c7b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 46 12 	call	0x248c	; 0x248c <main>
      8a:	0c 94 0f 21 	jmp	0x421e	; 0x421e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 56 1d 	jmp	0x3aac	; 0x3aac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 56 1d 	jmp	0x3aac	; 0x3aac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4a 1d 	jmp	0x3a94	; 0x3a94 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HKPD_voidInitializeKeypad>:
 * Description : initialize 4X4 keypad at a given port set 4 pins output and 4 pins input
 * Arguments   : void
 * Return      : void  
 */
 void HKPD_voidInitializeKeypad(void)
 {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	
	 /*for loop to scan all keypad columns and rows*/
	 for (u8 i = 0 ; i<4 ; i++)
     b50:	19 82       	std	Y+1, r1	; 0x01
     b52:	27 c0       	rjmp	.+78     	; 0xba2 <HKPD_voidInitializeKeypad+0x5c>
	 {
	 	 /*set column current bit in ColumnArray[] OUTPUT*/
		 MDIO_VoidSetPinDirection(KEYPAD_PORT,HKPD_u8ColumnArray[i],OUTPUT_PIN);
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	88 2f       	mov	r24, r24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	fc 01       	movw	r30, r24
     b5c:	e4 57       	subi	r30, 0x74	; 116
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	90 81       	ld	r25, Z
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	69 2f       	mov	r22, r25
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <MDIO_VoidSetPinDirection>
	
		 /*set current bit in RowArray[] INPUT*/
		 MDIO_VoidSetPinDirection(KEYPAD_PORT,HKPD_u8RowArray[i],INPUT_PIN);
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	fc 01       	movw	r30, r24
     b74:	e0 57       	subi	r30, 0x70	; 112
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	90 81       	ld	r25, Z
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	69 2f       	mov	r22, r25
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <MDIO_VoidSetPinDirection>
		
		 /*Enable pull up resistor for current bit in RowArray[]*/

		 MDIO_VoidSetPinValue(KEYPAD_PORT,HKPD_u8RowArray[i],MDIO_EN_PULL_UP_RES);
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	e0 57       	subi	r30, 0x70	; 112
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	90 81       	ld	r25, Z
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	69 2f       	mov	r22, r25
     b96:	41 e0       	ldi	r20, 0x01	; 1
     b98:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
 */
 void HKPD_voidInitializeKeypad(void)
 {
	
	 /*for loop to scan all keypad columns and rows*/
	 for (u8 i = 0 ; i<4 ; i++)
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	8f 5f       	subi	r24, 0xFF	; 255
     ba0:	89 83       	std	Y+1, r24	; 0x01
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	84 30       	cpi	r24, 0x04	; 4
     ba6:	b0 f2       	brcs	.-84     	; 0xb54 <HKPD_voidInitializeKeypad+0xe>
		 /*Enable pull up resistor for current bit in RowArray[]*/

		 MDIO_VoidSetPinValue(KEYPAD_PORT,HKPD_u8RowArray[i],MDIO_EN_PULL_UP_RES);
	 }/*end of for loop*/
	
 }/*end of HKPD_voidInitializeKeypad()*/
     ba8:	0f 90       	pop	r0
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <HKPD_u8GetPressedKey>:
 * Description : Return which key in the keypad has been pressed
 * Arguments   : void
 * return      : u8 pressed key
 */
 u8 HKPD_u8GetPressedKey(void)
 {
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <HKPD_u8GetPressedKey+0x6>
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <HKPD_u8GetPressedKey+0x8>
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
	 
	/*for loop to set all column pins HIGH*/
	for (u8 i = 0; i<4 ;i++ )
     bbc:	1b 82       	std	Y+3, r1	; 0x03
     bbe:	0f c0       	rjmp	.+30     	; 0xbde <HKPD_u8GetPressedKey+0x2e>
	{
		/*set current pin in ColumnArray HIGH*/
		MDIO_VoidSetPinValue(KEYPAD_PORT,HKPD_u8ColumnArray[i],HIGH);
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	88 2f       	mov	r24, r24
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	fc 01       	movw	r30, r24
     bc8:	e4 57       	subi	r30, 0x74	; 116
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	90 81       	ld	r25, Z
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	69 2f       	mov	r22, r25
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
 */
 u8 HKPD_u8GetPressedKey(void)
 {
	 
	/*for loop to set all column pins HIGH*/
	for (u8 i = 0; i<4 ;i++ )
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	8b 83       	std	Y+3, r24	; 0x03
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	84 30       	cpi	r24, 0x04	; 4
     be2:	70 f3       	brcs	.-36     	; 0xbc0 <HKPD_u8GetPressedKey+0x10>
		MDIO_VoidSetPinValue(KEYPAD_PORT,HKPD_u8ColumnArray[i],HIGH);
		
	}/*end of for loop*/
	
	/*for loop to scan all keypad columns*/
	for (u8 i = 0 ; i<4 ; i++)
     be4:	1a 82       	std	Y+2, r1	; 0x02
     be6:	43 c0       	rjmp	.+134    	; 0xc6e <HKPD_u8GetPressedKey+0xbe>
	{
		/*set current column pin low to test all row pins to find out which button has been pressed*/
		MDIO_VoidSetPinValue(KEYPAD_PORT,HKPD_u8ColumnArray[i],LOW);
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	fc 01       	movw	r30, r24
     bf0:	e4 57       	subi	r30, 0x74	; 116
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	90 81       	ld	r25, Z
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	69 2f       	mov	r22, r25
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
		
		/*for loop to scan and test all keypad row pins*/
		for (u8 j = 0 ; j<4 ; j++)
     c00:	19 82       	std	Y+1, r1	; 0x01
     c02:	23 c0       	rjmp	.+70     	; 0xc4a <HKPD_u8GetPressedKey+0x9a>
		{
			/*check current row pin value*/
			if ( LOW == MDIO_U8GetPinValue(KEYPAD_PORT,HKPD_u8RowArray[j]) )
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	fc 01       	movw	r30, r24
     c0c:	e0 57       	subi	r30, 0x70	; 112
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	90 81       	ld	r25, Z
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	69 2f       	mov	r22, r25
     c16:	0e 94 cd 11 	call	0x239a	; 0x239a <MDIO_U8GetPinValue>
     c1a:	88 23       	and	r24, r24
     c1c:	99 f4       	brne	.+38     	; 0xc44 <HKPD_u8GetPressedKey+0x94>
			{
				/*return pressed button value*/
				return KeyPadArr[j][i];
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	48 2f       	mov	r20, r24
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	ca 01       	movw	r24, r20
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
     c38:	fc 01       	movw	r30, r24
     c3a:	e0 56       	subi	r30, 0x60	; 96
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	80 81       	ld	r24, Z
     c40:	8c 83       	std	Y+4, r24	; 0x04
     c42:	1b c0       	rjmp	.+54     	; 0xc7a <HKPD_u8GetPressedKey+0xca>
	{
		/*set current column pin low to test all row pins to find out which button has been pressed*/
		MDIO_VoidSetPinValue(KEYPAD_PORT,HKPD_u8ColumnArray[i],LOW);
		
		/*for loop to scan and test all keypad row pins*/
		for (u8 j = 0 ; j<4 ; j++)
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	84 30       	cpi	r24, 0x04	; 4
     c4e:	d0 f2       	brcs	.-76     	; 0xc04 <HKPD_u8GetPressedKey+0x54>
				return KeyPadArr[j][i];
			}	
		}/*end of for loop*/
		
		/*set current column pin HIGH again*/
		MDIO_VoidSetPinValue(KEYPAD_PORT,HKPD_u8ColumnArray[i],HIGH);
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	fc 01       	movw	r30, r24
     c58:	e4 57       	subi	r30, 0x74	; 116
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	90 81       	ld	r25, Z
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	69 2f       	mov	r22, r25
     c62:	41 e0       	ldi	r20, 0x01	; 1
     c64:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(KEYPAD_PORT,HKPD_u8ColumnArray[i],HIGH);
		
	}/*end of for loop*/
	
	/*for loop to scan all keypad columns*/
	for (u8 i = 0 ; i<4 ; i++)
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	8f 5f       	subi	r24, 0xFF	; 255
     c6c:	8a 83       	std	Y+2, r24	; 0x02
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	84 30       	cpi	r24, 0x04	; 4
     c72:	08 f4       	brcc	.+2      	; 0xc76 <HKPD_u8GetPressedKey+0xc6>
     c74:	b9 cf       	rjmp	.-142    	; 0xbe8 <HKPD_u8GetPressedKey+0x38>
		MDIO_VoidSetPinValue(KEYPAD_PORT,HKPD_u8ColumnArray[i],HIGH);
		
	}/*end of for loop*/	
	
	/*Report no Button pressed*/
	return '?';
     c76:	8f e3       	ldi	r24, 0x3F	; 63
     c78:	8c 83       	std	Y+4, r24	; 0x04
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
		
}/*end of HKPD_u8GetPressedKey()*/
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <LCD_VoidInit>:
#include<avr/delay.h>
#include "MDIO_Interface.h"
/*********************************************************/

void LCD_VoidInit(void)
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	e9 97       	sbiw	r28, 0x39	; 57
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
    /*config LCD PINS */
    /*set pins0,1,2 as output for rs,rw,enable pins*/
    MDIO_VoidSetPinDirection(LCD_U8_CONTROL_PORT,LCD_U8_RS_PIN,OUTPUT_PIN);
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	41 e0       	ldi	r20, 0x01	; 1
     ca4:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <MDIO_VoidSetPinDirection>
    MDIO_VoidSetPinDirection(LCD_U8_CONTROL_PORT,LCD_U8_RW_PIN,OUTPUT_PIN);
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <MDIO_VoidSetPinDirection>
    MDIO_VoidSetPinDirection(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,OUTPUT_PIN);
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	62 e0       	ldi	r22, 0x02	; 2
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <MDIO_VoidSetPinDirection>
    _delay_ms(1);
    LCD_VoidSendCommand(DISPLAY_ON_OFF);
    _delay_ms(1);
    LCD_VoidSendCommand(DISPLAY_CLEAR);
    #elif (HLCD_MODE == HLCD_4BIT)
    for (u8 i=0;i<4;++i)
     cbc:	19 ae       	std	Y+57, r1	; 0x39
     cbe:	0f c0       	rjmp	.+30     	; 0xcde <LCD_VoidInit+0x54>
    {
        MDIO_VoidSetPinDirection(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i],OUTPUT_PIN);
     cc0:	89 ad       	ldd	r24, Y+57	; 0x39
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	fc 01       	movw	r30, r24
     cc8:	ec 56       	subi	r30, 0x6C	; 108
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	90 81       	ld	r25, Z
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	69 2f       	mov	r22, r25
     cd2:	41 e0       	ldi	r20, 0x01	; 1
     cd4:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <MDIO_VoidSetPinDirection>
    _delay_ms(1);
    LCD_VoidSendCommand(DISPLAY_ON_OFF);
    _delay_ms(1);
    LCD_VoidSendCommand(DISPLAY_CLEAR);
    #elif (HLCD_MODE == HLCD_4BIT)
    for (u8 i=0;i<4;++i)
     cd8:	89 ad       	ldd	r24, Y+57	; 0x39
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	89 af       	std	Y+57, r24	; 0x39
     cde:	89 ad       	ldd	r24, Y+57	; 0x39
     ce0:	84 30       	cpi	r24, 0x04	; 4
     ce2:	70 f3       	brcs	.-36     	; 0xcc0 <LCD_VoidInit+0x36>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a0 ef       	ldi	r26, 0xF0	; 240
     cea:	b1 e4       	ldi	r27, 0x41	; 65
     cec:	8d ab       	std	Y+53, r24	; 0x35
     cee:	9e ab       	std	Y+54, r25	; 0x36
     cf0:	af ab       	std	Y+55, r26	; 0x37
     cf2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf4:	6d a9       	ldd	r22, Y+53	; 0x35
     cf6:	7e a9       	ldd	r23, Y+54	; 0x36
     cf8:	8f a9       	ldd	r24, Y+55	; 0x37
     cfa:	98 ad       	ldd	r25, Y+56	; 0x38
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	4a ef       	ldi	r20, 0xFA	; 250
     d02:	54 e4       	ldi	r21, 0x44	; 68
     d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	89 ab       	std	Y+49, r24	; 0x31
     d0e:	9a ab       	std	Y+50, r25	; 0x32
     d10:	ab ab       	std	Y+51, r26	; 0x33
     d12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d14:	69 a9       	ldd	r22, Y+49	; 0x31
     d16:	7a a9       	ldd	r23, Y+50	; 0x32
     d18:	8b a9       	ldd	r24, Y+51	; 0x33
     d1a:	9c a9       	ldd	r25, Y+52	; 0x34
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e8       	ldi	r20, 0x80	; 128
     d22:	5f e3       	ldi	r21, 0x3F	; 63
     d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d28:	88 23       	and	r24, r24
     d2a:	2c f4       	brge	.+10     	; 0xd36 <LCD_VoidInit+0xac>
		__ticks = 1;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	98 ab       	std	Y+48, r25	; 0x30
     d32:	8f a7       	std	Y+47, r24	; 0x2f
     d34:	3f c0       	rjmp	.+126    	; 0xdb4 <LCD_VoidInit+0x12a>
	else if (__tmp > 65535)
     d36:	69 a9       	ldd	r22, Y+49	; 0x31
     d38:	7a a9       	ldd	r23, Y+50	; 0x32
     d3a:	8b a9       	ldd	r24, Y+51	; 0x33
     d3c:	9c a9       	ldd	r25, Y+52	; 0x34
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	3f ef       	ldi	r19, 0xFF	; 255
     d42:	4f e7       	ldi	r20, 0x7F	; 127
     d44:	57 e4       	ldi	r21, 0x47	; 71
     d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d4a:	18 16       	cp	r1, r24
     d4c:	4c f5       	brge	.+82     	; 0xda0 <LCD_VoidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4e:	6d a9       	ldd	r22, Y+53	; 0x35
     d50:	7e a9       	ldd	r23, Y+54	; 0x36
     d52:	8f a9       	ldd	r24, Y+55	; 0x37
     d54:	98 ad       	ldd	r25, Y+56	; 0x38
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e2       	ldi	r20, 0x20	; 32
     d5c:	51 e4       	ldi	r21, 0x41	; 65
     d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	bc 01       	movw	r22, r24
     d68:	cd 01       	movw	r24, r26
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	98 ab       	std	Y+48, r25	; 0x30
     d74:	8f a7       	std	Y+47, r24	; 0x2f
     d76:	0f c0       	rjmp	.+30     	; 0xd96 <LCD_VoidInit+0x10c>
     d78:	88 ec       	ldi	r24, 0xC8	; 200
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	9e a7       	std	Y+46, r25	; 0x2e
     d7e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d80:	8d a5       	ldd	r24, Y+45	; 0x2d
     d82:	9e a5       	ldd	r25, Y+46	; 0x2e
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <LCD_VoidInit+0xfa>
     d88:	9e a7       	std	Y+46, r25	; 0x2e
     d8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d8e:	98 a9       	ldd	r25, Y+48	; 0x30
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	98 ab       	std	Y+48, r25	; 0x30
     d94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d96:	8f a5       	ldd	r24, Y+47	; 0x2f
     d98:	98 a9       	ldd	r25, Y+48	; 0x30
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	69 f7       	brne	.-38     	; 0xd78 <LCD_VoidInit+0xee>
     d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <LCD_VoidInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da0:	69 a9       	ldd	r22, Y+49	; 0x31
     da2:	7a a9       	ldd	r23, Y+50	; 0x32
     da4:	8b a9       	ldd	r24, Y+51	; 0x33
     da6:	9c a9       	ldd	r25, Y+52	; 0x34
     da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	98 ab       	std	Y+48, r25	; 0x30
     db2:	8f a7       	std	Y+47, r24	; 0x2f
     db4:	8f a5       	ldd	r24, Y+47	; 0x2f
     db6:	98 a9       	ldd	r25, Y+48	; 0x30
     db8:	9c a7       	std	Y+44, r25	; 0x2c
     dba:	8b a7       	std	Y+43, r24	; 0x2b
     dbc:	8b a5       	ldd	r24, Y+43	; 0x2b
     dbe:	9c a5       	ldd	r25, Y+44	; 0x2c
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <LCD_VoidInit+0x136>
     dc4:	9c a7       	std	Y+44, r25	; 0x2c
     dc6:	8b a7       	std	Y+43, r24	; 0x2b
    {
        MDIO_VoidSetPinDirection(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i],OUTPUT_PIN);
    }

	_delay_ms(30);
	LCD_VoidSendCommand4Bit(0x20);
     dc8:	80 e2       	ldi	r24, 0x20	; 32
     dca:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_VoidSendCommand4Bit>
	LCD_VoidSendCommand4Bit(0x20);
     dce:	80 e2       	ldi	r24, 0x20	; 32
     dd0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_VoidSendCommand4Bit>
	LCD_VoidSendCommand4Bit(0x80);
     dd4:	80 e8       	ldi	r24, 0x80	; 128
     dd6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_VoidSendCommand4Bit>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e8       	ldi	r26, 0x80	; 128
     de0:	bf e3       	ldi	r27, 0x3F	; 63
     de2:	8f a3       	std	Y+39, r24	; 0x27
     de4:	98 a7       	std	Y+40, r25	; 0x28
     de6:	a9 a7       	std	Y+41, r26	; 0x29
     de8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dea:	6f a1       	ldd	r22, Y+39	; 0x27
     dec:	78 a5       	ldd	r23, Y+40	; 0x28
     dee:	89 a5       	ldd	r24, Y+41	; 0x29
     df0:	9a a5       	ldd	r25, Y+42	; 0x2a
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	4a ef       	ldi	r20, 0xFA	; 250
     df8:	54 e4       	ldi	r21, 0x44	; 68
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8b a3       	std	Y+35, r24	; 0x23
     e04:	9c a3       	std	Y+36, r25	; 0x24
     e06:	ad a3       	std	Y+37, r26	; 0x25
     e08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e0a:	6b a1       	ldd	r22, Y+35	; 0x23
     e0c:	7c a1       	ldd	r23, Y+36	; 0x24
     e0e:	8d a1       	ldd	r24, Y+37	; 0x25
     e10:	9e a1       	ldd	r25, Y+38	; 0x26
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1e:	88 23       	and	r24, r24
     e20:	2c f4       	brge	.+10     	; 0xe2c <LCD_VoidInit+0x1a2>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9a a3       	std	Y+34, r25	; 0x22
     e28:	89 a3       	std	Y+33, r24	; 0x21
     e2a:	3f c0       	rjmp	.+126    	; 0xeaa <LCD_VoidInit+0x220>
	else if (__tmp > 65535)
     e2c:	6b a1       	ldd	r22, Y+35	; 0x23
     e2e:	7c a1       	ldd	r23, Y+36	; 0x24
     e30:	8d a1       	ldd	r24, Y+37	; 0x25
     e32:	9e a1       	ldd	r25, Y+38	; 0x26
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e40:	18 16       	cp	r1, r24
     e42:	4c f5       	brge	.+82     	; 0xe96 <LCD_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e44:	6f a1       	ldd	r22, Y+39	; 0x27
     e46:	78 a5       	ldd	r23, Y+40	; 0x28
     e48:	89 a5       	ldd	r24, Y+41	; 0x29
     e4a:	9a a5       	ldd	r25, Y+42	; 0x2a
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e2       	ldi	r20, 0x20	; 32
     e52:	51 e4       	ldi	r21, 0x41	; 65
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9a a3       	std	Y+34, r25	; 0x22
     e6a:	89 a3       	std	Y+33, r24	; 0x21
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <LCD_VoidInit+0x202>
     e6e:	88 ec       	ldi	r24, 0xC8	; 200
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	98 a3       	std	Y+32, r25	; 0x20
     e74:	8f 8f       	std	Y+31, r24	; 0x1f
     e76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e78:	98 a1       	ldd	r25, Y+32	; 0x20
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <LCD_VoidInit+0x1f0>
     e7e:	98 a3       	std	Y+32, r25	; 0x20
     e80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e82:	89 a1       	ldd	r24, Y+33	; 0x21
     e84:	9a a1       	ldd	r25, Y+34	; 0x22
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	9a a3       	std	Y+34, r25	; 0x22
     e8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	89 a1       	ldd	r24, Y+33	; 0x21
     e8e:	9a a1       	ldd	r25, Y+34	; 0x22
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	69 f7       	brne	.-38     	; 0xe6e <LCD_VoidInit+0x1e4>
     e94:	14 c0       	rjmp	.+40     	; 0xebe <LCD_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e96:	6b a1       	ldd	r22, Y+35	; 0x23
     e98:	7c a1       	ldd	r23, Y+36	; 0x24
     e9a:	8d a1       	ldd	r24, Y+37	; 0x25
     e9c:	9e a1       	ldd	r25, Y+38	; 0x26
     e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9a a3       	std	Y+34, r25	; 0x22
     ea8:	89 a3       	std	Y+33, r24	; 0x21
     eaa:	89 a1       	ldd	r24, Y+33	; 0x21
     eac:	9a a1       	ldd	r25, Y+34	; 0x22
     eae:	9e 8f       	std	Y+30, r25	; 0x1e
     eb0:	8d 8f       	std	Y+29, r24	; 0x1d
     eb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <LCD_VoidInit+0x22c>
     eba:	9e 8f       	std	Y+30, r25	; 0x1e
     ebc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VoidSendCommand4Bit(0x00);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_VoidSendCommand4Bit>
	LCD_VoidSendCommand4Bit(0b11000000);
     ec4:	80 ec       	ldi	r24, 0xC0	; 192
     ec6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_VoidSendCommand4Bit>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a0 e8       	ldi	r26, 0x80	; 128
     ed0:	bf e3       	ldi	r27, 0x3F	; 63
     ed2:	89 8f       	std	Y+25, r24	; 0x19
     ed4:	9a 8f       	std	Y+26, r25	; 0x1a
     ed6:	ab 8f       	std	Y+27, r26	; 0x1b
     ed8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eda:	69 8d       	ldd	r22, Y+25	; 0x19
     edc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	4a ef       	ldi	r20, 0xFA	; 250
     ee8:	54 e4       	ldi	r21, 0x44	; 68
     eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	8d 8b       	std	Y+21, r24	; 0x15
     ef4:	9e 8b       	std	Y+22, r25	; 0x16
     ef6:	af 8b       	std	Y+23, r26	; 0x17
     ef8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     efa:	6d 89       	ldd	r22, Y+21	; 0x15
     efc:	7e 89       	ldd	r23, Y+22	; 0x16
     efe:	8f 89       	ldd	r24, Y+23	; 0x17
     f00:	98 8d       	ldd	r25, Y+24	; 0x18
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e8       	ldi	r20, 0x80	; 128
     f08:	5f e3       	ldi	r21, 0x3F	; 63
     f0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f0e:	88 23       	and	r24, r24
     f10:	2c f4       	brge	.+10     	; 0xf1c <LCD_VoidInit+0x292>
		__ticks = 1;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 8b       	std	Y+20, r25	; 0x14
     f18:	8b 8b       	std	Y+19, r24	; 0x13
     f1a:	3f c0       	rjmp	.+126    	; 0xf9a <LCD_VoidInit+0x310>
	else if (__tmp > 65535)
     f1c:	6d 89       	ldd	r22, Y+21	; 0x15
     f1e:	7e 89       	ldd	r23, Y+22	; 0x16
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	3f ef       	ldi	r19, 0xFF	; 255
     f28:	4f e7       	ldi	r20, 0x7F	; 127
     f2a:	57 e4       	ldi	r21, 0x47	; 71
     f2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f30:	18 16       	cp	r1, r24
     f32:	4c f5       	brge	.+82     	; 0xf86 <LCD_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f34:	69 8d       	ldd	r22, Y+25	; 0x19
     f36:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e2       	ldi	r20, 0x20	; 32
     f42:	51 e4       	ldi	r21, 0x41	; 65
     f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9c 8b       	std	Y+20, r25	; 0x14
     f5a:	8b 8b       	std	Y+19, r24	; 0x13
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <LCD_VoidInit+0x2f2>
     f5e:	88 ec       	ldi	r24, 0xC8	; 200
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9a 8b       	std	Y+18, r25	; 0x12
     f64:	89 8b       	std	Y+17, r24	; 0x11
     f66:	89 89       	ldd	r24, Y+17	; 0x11
     f68:	9a 89       	ldd	r25, Y+18	; 0x12
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <LCD_VoidInit+0x2e0>
     f6e:	9a 8b       	std	Y+18, r25	; 0x12
     f70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f72:	8b 89       	ldd	r24, Y+19	; 0x13
     f74:	9c 89       	ldd	r25, Y+20	; 0x14
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	9c 8b       	std	Y+20, r25	; 0x14
     f7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7c:	8b 89       	ldd	r24, Y+19	; 0x13
     f7e:	9c 89       	ldd	r25, Y+20	; 0x14
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	69 f7       	brne	.-38     	; 0xf5e <LCD_VoidInit+0x2d4>
     f84:	14 c0       	rjmp	.+40     	; 0xfae <LCD_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f86:	6d 89       	ldd	r22, Y+21	; 0x15
     f88:	7e 89       	ldd	r23, Y+22	; 0x16
     f8a:	8f 89       	ldd	r24, Y+23	; 0x17
     f8c:	98 8d       	ldd	r25, Y+24	; 0x18
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	9c 8b       	std	Y+20, r25	; 0x14
     f98:	8b 8b       	std	Y+19, r24	; 0x13
     f9a:	8b 89       	ldd	r24, Y+19	; 0x13
     f9c:	9c 89       	ldd	r25, Y+20	; 0x14
     f9e:	98 8b       	std	Y+16, r25	; 0x10
     fa0:	8f 87       	std	Y+15, r24	; 0x0f
     fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa4:	98 89       	ldd	r25, Y+16	; 0x10
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <LCD_VoidInit+0x31c>
     faa:	98 8b       	std	Y+16, r25	; 0x10
     fac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VoidSendCommand4Bit(0x00);
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_VoidSendCommand4Bit>
	LCD_VoidSendCommand4Bit(0x10);
     fb4:	80 e1       	ldi	r24, 0x10	; 16
     fb6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_VoidSendCommand4Bit>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e4       	ldi	r27, 0x40	; 64
     fc2:	8b 87       	std	Y+11, r24	; 0x0b
     fc4:	9c 87       	std	Y+12, r25	; 0x0c
     fc6:	ad 87       	std	Y+13, r26	; 0x0d
     fc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fca:	6b 85       	ldd	r22, Y+11	; 0x0b
     fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fce:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4a ef       	ldi	r20, 0xFA	; 250
     fd8:	54 e4       	ldi	r21, 0x44	; 68
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8f 83       	std	Y+7, r24	; 0x07
     fe4:	98 87       	std	Y+8, r25	; 0x08
     fe6:	a9 87       	std	Y+9, r26	; 0x09
     fe8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fea:	6f 81       	ldd	r22, Y+7	; 0x07
     fec:	78 85       	ldd	r23, Y+8	; 0x08
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e8       	ldi	r20, 0x80	; 128
     ff8:	5f e3       	ldi	r21, 0x3F	; 63
     ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffe:	88 23       	and	r24, r24
    1000:	2c f4       	brge	.+10     	; 0x100c <LCD_VoidInit+0x382>
		__ticks = 1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9e 83       	std	Y+6, r25	; 0x06
    1008:	8d 83       	std	Y+5, r24	; 0x05
    100a:	3f c0       	rjmp	.+126    	; 0x108a <LCD_VoidInit+0x400>
	else if (__tmp > 65535)
    100c:	6f 81       	ldd	r22, Y+7	; 0x07
    100e:	78 85       	ldd	r23, Y+8	; 0x08
    1010:	89 85       	ldd	r24, Y+9	; 0x09
    1012:	9a 85       	ldd	r25, Y+10	; 0x0a
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	57 e4       	ldi	r21, 0x47	; 71
    101c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1020:	18 16       	cp	r1, r24
    1022:	4c f5       	brge	.+82     	; 0x1076 <LCD_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1024:	6b 85       	ldd	r22, Y+11	; 0x0b
    1026:	7c 85       	ldd	r23, Y+12	; 0x0c
    1028:	8d 85       	ldd	r24, Y+13	; 0x0d
    102a:	9e 85       	ldd	r25, Y+14	; 0x0e
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	51 e4       	ldi	r21, 0x41	; 65
    1034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9e 83       	std	Y+6, r25	; 0x06
    104a:	8d 83       	std	Y+5, r24	; 0x05
    104c:	0f c0       	rjmp	.+30     	; 0x106c <LCD_VoidInit+0x3e2>
    104e:	88 ec       	ldi	r24, 0xC8	; 200
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <LCD_VoidInit+0x3d0>
    105e:	9c 83       	std	Y+4, r25	; 0x04
    1060:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	69 f7       	brne	.-38     	; 0x104e <LCD_VoidInit+0x3c4>
    1074:	14 c0       	rjmp	.+40     	; 0x109e <LCD_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1076:	6f 81       	ldd	r22, Y+7	; 0x07
    1078:	78 85       	ldd	r23, Y+8	; 0x08
    107a:	89 85       	ldd	r24, Y+9	; 0x09
    107c:	9a 85       	ldd	r25, Y+10	; 0x0a
    107e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9e 83       	std	Y+6, r25	; 0x06
    1088:	8d 83       	std	Y+5, r24	; 0x05
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <LCD_VoidInit+0x40c>
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif

}
    109e:	e9 96       	adiw	r28, 0x39	; 57
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <LCD_VoidSendCommand4Bit>:
void LCD_VoidSendCommand4Bit(u8 Copy_U8Command)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	6e 97       	sbiw	r28, 0x1e	; 30
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	8e 8f       	std	Y+30, r24	; 0x1e
    MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_RS_PIN,LOW);
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    /*PIN RW=0*/
    MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_RW_PIN,LOW);
    10d0:	83 e0       	ldi	r24, 0x03	; 3
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    /*COMMAND*/

    for (u8 i=4;i<=7;++i)
    10da:	84 e0       	ldi	r24, 0x04	; 4
    10dc:	8d 8f       	std	Y+29, r24	; 0x1d
    10de:	1f c0       	rjmp	.+62     	; 0x111e <LCD_VoidSendCommand4Bit+0x6e>
        {
    	MDIO_VoidSetPinValue(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i-4],GET_BIT(Copy_U8Command,i));
    10e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	04 97       	sbiw	r24, 0x04	; 4
    10e8:	fc 01       	movw	r30, r24
    10ea:	ec 56       	subi	r30, 0x6C	; 108
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	40 81       	ld	r20, Z
    10f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	b9 01       	movw	r22, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <LCD_VoidSendCommand4Bit+0x54>
    1100:	75 95       	asr	r23
    1102:	67 95       	ror	r22
    1104:	8a 95       	dec	r24
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <LCD_VoidSendCommand4Bit+0x50>
    1108:	cb 01       	movw	r24, r22
    110a:	98 2f       	mov	r25, r24
    110c:	91 70       	andi	r25, 0x01	; 1
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	64 2f       	mov	r22, r20
    1112:	49 2f       	mov	r20, r25
    1114:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_RS_PIN,LOW);
    /*PIN RW=0*/
    MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_RW_PIN,LOW);
    /*COMMAND*/

    for (u8 i=4;i<=7;++i)
    1118:	8d 8d       	ldd	r24, Y+29	; 0x1d
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	8d 8f       	std	Y+29, r24	; 0x1d
    111e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1120:	88 30       	cpi	r24, 0x08	; 8
    1122:	f0 f2       	brcs	.-68     	; 0x10e0 <LCD_VoidSendCommand4Bit+0x30>
        {
    	MDIO_VoidSetPinValue(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i-4],GET_BIT(Copy_U8Command,i));
        }

    /*ENABLE SEQUANCE**/
    MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	62 e0       	ldi	r22, 0x02	; 2
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a0 e8       	ldi	r26, 0x80	; 128
    1134:	bf e3       	ldi	r27, 0x3F	; 63
    1136:	89 8f       	std	Y+25, r24	; 0x19
    1138:	9a 8f       	std	Y+26, r25	; 0x1a
    113a:	ab 8f       	std	Y+27, r26	; 0x1b
    113c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113e:	69 8d       	ldd	r22, Y+25	; 0x19
    1140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	4a ef       	ldi	r20, 0xFA	; 250
    114c:	54 e4       	ldi	r21, 0x44	; 68
    114e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	8d 8b       	std	Y+21, r24	; 0x15
    1158:	9e 8b       	std	Y+22, r25	; 0x16
    115a:	af 8b       	std	Y+23, r26	; 0x17
    115c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    115e:	6d 89       	ldd	r22, Y+21	; 0x15
    1160:	7e 89       	ldd	r23, Y+22	; 0x16
    1162:	8f 89       	ldd	r24, Y+23	; 0x17
    1164:	98 8d       	ldd	r25, Y+24	; 0x18
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e8       	ldi	r20, 0x80	; 128
    116c:	5f e3       	ldi	r21, 0x3F	; 63
    116e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1172:	88 23       	and	r24, r24
    1174:	2c f4       	brge	.+10     	; 0x1180 <LCD_VoidSendCommand4Bit+0xd0>
		__ticks = 1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9c 8b       	std	Y+20, r25	; 0x14
    117c:	8b 8b       	std	Y+19, r24	; 0x13
    117e:	3f c0       	rjmp	.+126    	; 0x11fe <LCD_VoidSendCommand4Bit+0x14e>
	else if (__tmp > 65535)
    1180:	6d 89       	ldd	r22, Y+21	; 0x15
    1182:	7e 89       	ldd	r23, Y+22	; 0x16
    1184:	8f 89       	ldd	r24, Y+23	; 0x17
    1186:	98 8d       	ldd	r25, Y+24	; 0x18
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	3f ef       	ldi	r19, 0xFF	; 255
    118c:	4f e7       	ldi	r20, 0x7F	; 127
    118e:	57 e4       	ldi	r21, 0x47	; 71
    1190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1194:	18 16       	cp	r1, r24
    1196:	4c f5       	brge	.+82     	; 0x11ea <LCD_VoidSendCommand4Bit+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1198:	69 8d       	ldd	r22, Y+25	; 0x19
    119a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    119c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e2       	ldi	r20, 0x20	; 32
    11a6:	51 e4       	ldi	r21, 0x41	; 65
    11a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	9c 8b       	std	Y+20, r25	; 0x14
    11be:	8b 8b       	std	Y+19, r24	; 0x13
    11c0:	0f c0       	rjmp	.+30     	; 0x11e0 <LCD_VoidSendCommand4Bit+0x130>
    11c2:	88 ec       	ldi	r24, 0xC8	; 200
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	9a 8b       	std	Y+18, r25	; 0x12
    11c8:	89 8b       	std	Y+17, r24	; 0x11
    11ca:	89 89       	ldd	r24, Y+17	; 0x11
    11cc:	9a 89       	ldd	r25, Y+18	; 0x12
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <LCD_VoidSendCommand4Bit+0x11e>
    11d2:	9a 8b       	std	Y+18, r25	; 0x12
    11d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d6:	8b 89       	ldd	r24, Y+19	; 0x13
    11d8:	9c 89       	ldd	r25, Y+20	; 0x14
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	9c 8b       	std	Y+20, r25	; 0x14
    11de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e0:	8b 89       	ldd	r24, Y+19	; 0x13
    11e2:	9c 89       	ldd	r25, Y+20	; 0x14
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	69 f7       	brne	.-38     	; 0x11c2 <LCD_VoidSendCommand4Bit+0x112>
    11e8:	14 c0       	rjmp	.+40     	; 0x1212 <LCD_VoidSendCommand4Bit+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ea:	6d 89       	ldd	r22, Y+21	; 0x15
    11ec:	7e 89       	ldd	r23, Y+22	; 0x16
    11ee:	8f 89       	ldd	r24, Y+23	; 0x17
    11f0:	98 8d       	ldd	r25, Y+24	; 0x18
    11f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	9c 8b       	std	Y+20, r25	; 0x14
    11fc:	8b 8b       	std	Y+19, r24	; 0x13
    11fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1200:	9c 89       	ldd	r25, Y+20	; 0x14
    1202:	98 8b       	std	Y+16, r25	; 0x10
    1204:	8f 87       	std	Y+15, r24	; 0x0f
    1206:	8f 85       	ldd	r24, Y+15	; 0x0f
    1208:	98 89       	ldd	r25, Y+16	; 0x10
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <LCD_VoidSendCommand4Bit+0x15a>
    120e:	98 8b       	std	Y+16, r25	; 0x10
    1210:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	62 e0       	ldi	r22, 0x02	; 2
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	b0 e4       	ldi	r27, 0x40	; 64
    1224:	8b 87       	std	Y+11, r24	; 0x0b
    1226:	9c 87       	std	Y+12, r25	; 0x0c
    1228:	ad 87       	std	Y+13, r26	; 0x0d
    122a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122c:	6b 85       	ldd	r22, Y+11	; 0x0b
    122e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	9e 85       	ldd	r25, Y+14	; 0x0e
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a ef       	ldi	r20, 0xFA	; 250
    123a:	54 e4       	ldi	r21, 0x44	; 68
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8f 83       	std	Y+7, r24	; 0x07
    1246:	98 87       	std	Y+8, r25	; 0x08
    1248:	a9 87       	std	Y+9, r26	; 0x09
    124a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124c:	6f 81       	ldd	r22, Y+7	; 0x07
    124e:	78 85       	ldd	r23, Y+8	; 0x08
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e8       	ldi	r20, 0x80	; 128
    125a:	5f e3       	ldi	r21, 0x3F	; 63
    125c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1260:	88 23       	and	r24, r24
    1262:	2c f4       	brge	.+10     	; 0x126e <LCD_VoidSendCommand4Bit+0x1be>
		__ticks = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	3f c0       	rjmp	.+126    	; 0x12ec <LCD_VoidSendCommand4Bit+0x23c>
	else if (__tmp > 65535)
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1282:	18 16       	cp	r1, r24
    1284:	4c f5       	brge	.+82     	; 0x12d8 <LCD_VoidSendCommand4Bit+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1286:	6b 85       	ldd	r22, Y+11	; 0x0b
    1288:	7c 85       	ldd	r23, Y+12	; 0x0c
    128a:	8d 85       	ldd	r24, Y+13	; 0x0d
    128c:	9e 85       	ldd	r25, Y+14	; 0x0e
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <LCD_VoidSendCommand4Bit+0x21e>
    12b0:	88 ec       	ldi	r24, 0xC8	; 200
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <LCD_VoidSendCommand4Bit+0x20c>
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	69 f7       	brne	.-38     	; 0x12b0 <LCD_VoidSendCommand4Bit+0x200>
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <LCD_VoidSendCommand4Bit+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9e 83       	std	Y+6, r25	; 0x06
    12ea:	8d 83       	std	Y+5, r24	; 0x05
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <LCD_VoidSendCommand4Bit+0x248>
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    1300:	6e 96       	adiw	r28, 0x1e	; 30
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <LCD_VoidSendChar>:
void LCD_VoidSendChar(u8 Copy_U8Data)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	ad 97       	sbiw	r28, 0x2d	; 45
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	8d a7       	std	Y+45, r24	; 0x2d
	 /*PIN RS=1*/
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_RS_PIN,HIGH);
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
	 /*PIN RW=0*/
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_RW_PIN,LOW);
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
      /*Enable Sequance*/
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
	 _delay_ms(2);
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);
#elif (HLCD_MODE == HLCD_4BIT)
	   for (u8 i=4;i<=7;++i)
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	8c a7       	std	Y+44, r24	; 0x2c
    1340:	1f c0       	rjmp	.+62     	; 0x1380 <LCD_VoidSendChar+0x6e>
	        {
		   MDIO_VoidSetPinValue(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i-4],GET_BIT(Copy_U8Data,i));
    1342:	8c a5       	ldd	r24, Y+44	; 0x2c
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	04 97       	sbiw	r24, 0x04	; 4
    134a:	fc 01       	movw	r30, r24
    134c:	ec 56       	subi	r30, 0x6C	; 108
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	40 81       	ld	r20, Z
    1352:	8d a5       	ldd	r24, Y+45	; 0x2d
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	8c a5       	ldd	r24, Y+44	; 0x2c
    135a:	88 2f       	mov	r24, r24
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	b9 01       	movw	r22, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <LCD_VoidSendChar+0x54>
    1362:	75 95       	asr	r23
    1364:	67 95       	ror	r22
    1366:	8a 95       	dec	r24
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <LCD_VoidSendChar+0x50>
    136a:	cb 01       	movw	r24, r22
    136c:	98 2f       	mov	r25, r24
    136e:	91 70       	andi	r25, 0x01	; 1
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	64 2f       	mov	r22, r20
    1374:	49 2f       	mov	r20, r25
    1376:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
      /*Enable Sequance*/
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
	 _delay_ms(2);
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);
#elif (HLCD_MODE == HLCD_4BIT)
	   for (u8 i=4;i<=7;++i)
    137a:	8c a5       	ldd	r24, Y+44	; 0x2c
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	8c a7       	std	Y+44, r24	; 0x2c
    1380:	8c a5       	ldd	r24, Y+44	; 0x2c
    1382:	88 30       	cpi	r24, 0x08	; 8
    1384:	f0 f2       	brcs	.-68     	; 0x1342 <LCD_VoidSendChar+0x30>
	        {
		   MDIO_VoidSetPinValue(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i-4],GET_BIT(Copy_U8Data,i));
	        }

		 /*ENABLE SEQUANCE**/
		 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
    1386:	83 e0       	ldi	r24, 0x03	; 3
    1388:	62 e0       	ldi	r22, 0x02	; 2
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a0 e8       	ldi	r26, 0x80	; 128
    1396:	bf e3       	ldi	r27, 0x3F	; 63
    1398:	8f a3       	std	Y+39, r24	; 0x27
    139a:	98 a7       	std	Y+40, r25	; 0x28
    139c:	a9 a7       	std	Y+41, r26	; 0x29
    139e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a0:	6f a1       	ldd	r22, Y+39	; 0x27
    13a2:	78 a5       	ldd	r23, Y+40	; 0x28
    13a4:	89 a5       	ldd	r24, Y+41	; 0x29
    13a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	4a ef       	ldi	r20, 0xFA	; 250
    13ae:	54 e4       	ldi	r21, 0x44	; 68
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8b a3       	std	Y+35, r24	; 0x23
    13ba:	9c a3       	std	Y+36, r25	; 0x24
    13bc:	ad a3       	std	Y+37, r26	; 0x25
    13be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13c0:	6b a1       	ldd	r22, Y+35	; 0x23
    13c2:	7c a1       	ldd	r23, Y+36	; 0x24
    13c4:	8d a1       	ldd	r24, Y+37	; 0x25
    13c6:	9e a1       	ldd	r25, Y+38	; 0x26
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <LCD_VoidSendChar+0xd0>
		__ticks = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9a a3       	std	Y+34, r25	; 0x22
    13de:	89 a3       	std	Y+33, r24	; 0x21
    13e0:	3f c0       	rjmp	.+126    	; 0x1460 <LCD_VoidSendChar+0x14e>
	else if (__tmp > 65535)
    13e2:	6b a1       	ldd	r22, Y+35	; 0x23
    13e4:	7c a1       	ldd	r23, Y+36	; 0x24
    13e6:	8d a1       	ldd	r24, Y+37	; 0x25
    13e8:	9e a1       	ldd	r25, Y+38	; 0x26
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	4c f5       	brge	.+82     	; 0x144c <LCD_VoidSendChar+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fa:	6f a1       	ldd	r22, Y+39	; 0x27
    13fc:	78 a5       	ldd	r23, Y+40	; 0x28
    13fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1400:	9a a5       	ldd	r25, Y+42	; 0x2a
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e2       	ldi	r20, 0x20	; 32
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9a a3       	std	Y+34, r25	; 0x22
    1420:	89 a3       	std	Y+33, r24	; 0x21
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <LCD_VoidSendChar+0x130>
    1424:	88 ec       	ldi	r24, 0xC8	; 200
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	98 a3       	std	Y+32, r25	; 0x20
    142a:	8f 8f       	std	Y+31, r24	; 0x1f
    142c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    142e:	98 a1       	ldd	r25, Y+32	; 0x20
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <LCD_VoidSendChar+0x11e>
    1434:	98 a3       	std	Y+32, r25	; 0x20
    1436:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1438:	89 a1       	ldd	r24, Y+33	; 0x21
    143a:	9a a1       	ldd	r25, Y+34	; 0x22
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	9a a3       	std	Y+34, r25	; 0x22
    1440:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1442:	89 a1       	ldd	r24, Y+33	; 0x21
    1444:	9a a1       	ldd	r25, Y+34	; 0x22
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	69 f7       	brne	.-38     	; 0x1424 <LCD_VoidSendChar+0x112>
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <LCD_VoidSendChar+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144c:	6b a1       	ldd	r22, Y+35	; 0x23
    144e:	7c a1       	ldd	r23, Y+36	; 0x24
    1450:	8d a1       	ldd	r24, Y+37	; 0x25
    1452:	9e a1       	ldd	r25, Y+38	; 0x26
    1454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9a a3       	std	Y+34, r25	; 0x22
    145e:	89 a3       	std	Y+33, r24	; 0x21
    1460:	89 a1       	ldd	r24, Y+33	; 0x21
    1462:	9a a1       	ldd	r25, Y+34	; 0x22
    1464:	9e 8f       	std	Y+30, r25	; 0x1e
    1466:	8d 8f       	std	Y+29, r24	; 0x1d
    1468:	8d 8d       	ldd	r24, Y+29	; 0x1d
    146a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <LCD_VoidSendChar+0x15a>
    1470:	9e 8f       	std	Y+30, r25	; 0x1e
    1472:	8d 8f       	std	Y+29, r24	; 0x1d
		 _delay_ms(1);
		 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	62 e0       	ldi	r22, 0x02	; 2
    1478:	40 e0       	ldi	r20, 0x00	; 0
    147a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>

		 for (u8 i=0;i<=3;++i)
    147e:	1b a6       	std	Y+43, r1	; 0x2b
    1480:	1e c0       	rjmp	.+60     	; 0x14be <LCD_VoidSendChar+0x1ac>
			        {
				   MDIO_VoidSetPinValue(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i],GET_BIT(Copy_U8Data,i));
    1482:	8b a5       	ldd	r24, Y+43	; 0x2b
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	fc 01       	movw	r30, r24
    148a:	ec 56       	subi	r30, 0x6C	; 108
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	40 81       	ld	r20, Z
    1490:	8d a5       	ldd	r24, Y+45	; 0x2d
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	8b a5       	ldd	r24, Y+43	; 0x2b
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	b9 01       	movw	r22, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <LCD_VoidSendChar+0x192>
    14a0:	75 95       	asr	r23
    14a2:	67 95       	ror	r22
    14a4:	8a 95       	dec	r24
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <LCD_VoidSendChar+0x18e>
    14a8:	cb 01       	movw	r24, r22
    14aa:	98 2f       	mov	r25, r24
    14ac:	91 70       	andi	r25, 0x01	; 1
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	64 2f       	mov	r22, r20
    14b2:	49 2f       	mov	r20, r25
    14b4:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
		 /*ENABLE SEQUANCE**/
		 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
		 _delay_ms(1);
		 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);

		 for (u8 i=0;i<=3;++i)
    14b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ba:	8f 5f       	subi	r24, 0xFF	; 255
    14bc:	8b a7       	std	Y+43, r24	; 0x2b
    14be:	8b a5       	ldd	r24, Y+43	; 0x2b
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	f8 f2       	brcs	.-66     	; 0x1482 <LCD_VoidSendChar+0x170>
			        {
				   MDIO_VoidSetPinValue(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i],GET_BIT(Copy_U8Data,i));
			        }

		 /*ENABLE SEQUANCE**/
		 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	62 e0       	ldi	r22, 0x02	; 2
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e8       	ldi	r26, 0x80	; 128
    14d4:	bf e3       	ldi	r27, 0x3F	; 63
    14d6:	89 8f       	std	Y+25, r24	; 0x19
    14d8:	9a 8f       	std	Y+26, r25	; 0x1a
    14da:	ab 8f       	std	Y+27, r26	; 0x1b
    14dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	69 8d       	ldd	r22, Y+25	; 0x19
    14e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a ef       	ldi	r20, 0xFA	; 250
    14ec:	54 e4       	ldi	r21, 0x44	; 68
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8d 8b       	std	Y+21, r24	; 0x15
    14f8:	9e 8b       	std	Y+22, r25	; 0x16
    14fa:	af 8b       	std	Y+23, r26	; 0x17
    14fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1500:	7e 89       	ldd	r23, Y+22	; 0x16
    1502:	8f 89       	ldd	r24, Y+23	; 0x17
    1504:	98 8d       	ldd	r25, Y+24	; 0x18
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <LCD_VoidSendChar+0x20e>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9c 8b       	std	Y+20, r25	; 0x14
    151c:	8b 8b       	std	Y+19, r24	; 0x13
    151e:	3f c0       	rjmp	.+126    	; 0x159e <LCD_VoidSendChar+0x28c>
	else if (__tmp > 65535)
    1520:	6d 89       	ldd	r22, Y+21	; 0x15
    1522:	7e 89       	ldd	r23, Y+22	; 0x16
    1524:	8f 89       	ldd	r24, Y+23	; 0x17
    1526:	98 8d       	ldd	r25, Y+24	; 0x18
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <LCD_VoidSendChar+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	69 8d       	ldd	r22, Y+25	; 0x19
    153a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9c 8b       	std	Y+20, r25	; 0x14
    155e:	8b 8b       	std	Y+19, r24	; 0x13
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <LCD_VoidSendChar+0x26e>
    1562:	88 ec       	ldi	r24, 0xC8	; 200
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9a 8b       	std	Y+18, r25	; 0x12
    1568:	89 8b       	std	Y+17, r24	; 0x11
    156a:	89 89       	ldd	r24, Y+17	; 0x11
    156c:	9a 89       	ldd	r25, Y+18	; 0x12
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <LCD_VoidSendChar+0x25c>
    1572:	9a 8b       	std	Y+18, r25	; 0x12
    1574:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8b 89       	ldd	r24, Y+19	; 0x13
    1578:	9c 89       	ldd	r25, Y+20	; 0x14
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9c 8b       	std	Y+20, r25	; 0x14
    157e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8b 89       	ldd	r24, Y+19	; 0x13
    1582:	9c 89       	ldd	r25, Y+20	; 0x14
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <LCD_VoidSendChar+0x250>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <LCD_VoidSendChar+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6d 89       	ldd	r22, Y+21	; 0x15
    158c:	7e 89       	ldd	r23, Y+22	; 0x16
    158e:	8f 89       	ldd	r24, Y+23	; 0x17
    1590:	98 8d       	ldd	r25, Y+24	; 0x18
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9c 8b       	std	Y+20, r25	; 0x14
    159c:	8b 8b       	std	Y+19, r24	; 0x13
    159e:	8b 89       	ldd	r24, Y+19	; 0x13
    15a0:	9c 89       	ldd	r25, Y+20	; 0x14
    15a2:	98 8b       	std	Y+16, r25	; 0x10
    15a4:	8f 87       	std	Y+15, r24	; 0x0f
    15a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a8:	98 89       	ldd	r25, Y+16	; 0x10
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <LCD_VoidSendChar+0x298>
    15ae:	98 8b       	std	Y+16, r25	; 0x10
    15b0:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(1);
		  MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	62 e0       	ldi	r22, 0x02	; 2
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 e0       	ldi	r26, 0x00	; 0
    15c2:	b0 e4       	ldi	r27, 0x40	; 64
    15c4:	8b 87       	std	Y+11, r24	; 0x0b
    15c6:	9c 87       	std	Y+12, r25	; 0x0c
    15c8:	ad 87       	std	Y+13, r26	; 0x0d
    15ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a ef       	ldi	r20, 0xFA	; 250
    15da:	54 e4       	ldi	r21, 0x44	; 68
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8f 83       	std	Y+7, r24	; 0x07
    15e6:	98 87       	std	Y+8, r25	; 0x08
    15e8:	a9 87       	std	Y+9, r26	; 0x09
    15ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ec:	6f 81       	ldd	r22, Y+7	; 0x07
    15ee:	78 85       	ldd	r23, Y+8	; 0x08
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1600:	88 23       	and	r24, r24
    1602:	2c f4       	brge	.+10     	; 0x160e <LCD_VoidSendChar+0x2fc>
		__ticks = 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	3f c0       	rjmp	.+126    	; 0x168c <LCD_VoidSendChar+0x37a>
	else if (__tmp > 65535)
    160e:	6f 81       	ldd	r22, Y+7	; 0x07
    1610:	78 85       	ldd	r23, Y+8	; 0x08
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	9a 85       	ldd	r25, Y+10	; 0x0a
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	4c f5       	brge	.+82     	; 0x1678 <LCD_VoidSendChar+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	6b 85       	ldd	r22, Y+11	; 0x0b
    1628:	7c 85       	ldd	r23, Y+12	; 0x0c
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	0f c0       	rjmp	.+30     	; 0x166e <LCD_VoidSendChar+0x35c>
    1650:	88 ec       	ldi	r24, 0xC8	; 200
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9c 83       	std	Y+4, r25	; 0x04
    1656:	8b 83       	std	Y+3, r24	; 0x03
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <LCD_VoidSendChar+0x34a>
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	69 f7       	brne	.-38     	; 0x1650 <LCD_VoidSendChar+0x33e>
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <LCD_VoidSendChar+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	6f 81       	ldd	r22, Y+7	; 0x07
    167a:	78 85       	ldd	r23, Y+8	; 0x08
    167c:	89 85       	ldd	r24, Y+9	; 0x09
    167e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_VoidSendChar+0x386>
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
		  _delay_ms(2);
#endif
}
    16a0:	ad 96       	adiw	r28, 0x2d	; 45
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <LCD_VoidSendCommand>:

void LCD_VoidSendCommand(u8 Copy_U8Command)
{	/**PIN RS =0*/
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	ad 97       	sbiw	r28, 0x2d	; 45
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	8d a7       	std	Y+45, r24	; 0x2d
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_RS_PIN,LOW);
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
	 /*PIN RW=0*/
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_RW_PIN,LOW);
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
	 /*ENABLE SEQUANCE**/
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
    _delay_ms(1);
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);
#elif (HLCD_MODE == HLCD_4BIT)
	 for (u8 i=4;i<=7;++i)
    16dc:	84 e0       	ldi	r24, 0x04	; 4
    16de:	8c a7       	std	Y+44, r24	; 0x2c
    16e0:	1f c0       	rjmp	.+62     	; 0x1720 <LCD_VoidSendCommand+0x6e>
	 	        {
	 		   MDIO_VoidSetPinValue(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i-4],GET_BIT(Copy_U8Command,i));
    16e2:	8c a5       	ldd	r24, Y+44	; 0x2c
    16e4:	88 2f       	mov	r24, r24
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	04 97       	sbiw	r24, 0x04	; 4
    16ea:	fc 01       	movw	r30, r24
    16ec:	ec 56       	subi	r30, 0x6C	; 108
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	40 81       	ld	r20, Z
    16f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	b9 01       	movw	r22, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <LCD_VoidSendCommand+0x54>
    1702:	75 95       	asr	r23
    1704:	67 95       	ror	r22
    1706:	8a 95       	dec	r24
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <LCD_VoidSendCommand+0x50>
    170a:	cb 01       	movw	r24, r22
    170c:	98 2f       	mov	r25, r24
    170e:	91 70       	andi	r25, 0x01	; 1
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	64 2f       	mov	r22, r20
    1714:	49 2f       	mov	r20, r25
    1716:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
	 /*ENABLE SEQUANCE**/
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
    _delay_ms(1);
	 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);
#elif (HLCD_MODE == HLCD_4BIT)
	 for (u8 i=4;i<=7;++i)
    171a:	8c a5       	ldd	r24, Y+44	; 0x2c
    171c:	8f 5f       	subi	r24, 0xFF	; 255
    171e:	8c a7       	std	Y+44, r24	; 0x2c
    1720:	8c a5       	ldd	r24, Y+44	; 0x2c
    1722:	88 30       	cpi	r24, 0x08	; 8
    1724:	f0 f2       	brcs	.-68     	; 0x16e2 <LCD_VoidSendCommand+0x30>
	 	        {
	 		   MDIO_VoidSetPinValue(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i-4],GET_BIT(Copy_U8Command,i));
	 	        }
		 /*ENABLE SEQUANCE**/
		 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
    1726:	83 e0       	ldi	r24, 0x03	; 3
    1728:	62 e0       	ldi	r22, 0x02	; 2
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a0 e8       	ldi	r26, 0x80	; 128
    1736:	bf e3       	ldi	r27, 0x3F	; 63
    1738:	8f a3       	std	Y+39, r24	; 0x27
    173a:	98 a7       	std	Y+40, r25	; 0x28
    173c:	a9 a7       	std	Y+41, r26	; 0x29
    173e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1740:	6f a1       	ldd	r22, Y+39	; 0x27
    1742:	78 a5       	ldd	r23, Y+40	; 0x28
    1744:	89 a5       	ldd	r24, Y+41	; 0x29
    1746:	9a a5       	ldd	r25, Y+42	; 0x2a
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	4a ef       	ldi	r20, 0xFA	; 250
    174e:	54 e4       	ldi	r21, 0x44	; 68
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	8b a3       	std	Y+35, r24	; 0x23
    175a:	9c a3       	std	Y+36, r25	; 0x24
    175c:	ad a3       	std	Y+37, r26	; 0x25
    175e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1760:	6b a1       	ldd	r22, Y+35	; 0x23
    1762:	7c a1       	ldd	r23, Y+36	; 0x24
    1764:	8d a1       	ldd	r24, Y+37	; 0x25
    1766:	9e a1       	ldd	r25, Y+38	; 0x26
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1774:	88 23       	and	r24, r24
    1776:	2c f4       	brge	.+10     	; 0x1782 <LCD_VoidSendCommand+0xd0>
		__ticks = 1;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9a a3       	std	Y+34, r25	; 0x22
    177e:	89 a3       	std	Y+33, r24	; 0x21
    1780:	3f c0       	rjmp	.+126    	; 0x1800 <LCD_VoidSendCommand+0x14e>
	else if (__tmp > 65535)
    1782:	6b a1       	ldd	r22, Y+35	; 0x23
    1784:	7c a1       	ldd	r23, Y+36	; 0x24
    1786:	8d a1       	ldd	r24, Y+37	; 0x25
    1788:	9e a1       	ldd	r25, Y+38	; 0x26
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	4f e7       	ldi	r20, 0x7F	; 127
    1790:	57 e4       	ldi	r21, 0x47	; 71
    1792:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1796:	18 16       	cp	r1, r24
    1798:	4c f5       	brge	.+82     	; 0x17ec <LCD_VoidSendCommand+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179a:	6f a1       	ldd	r22, Y+39	; 0x27
    179c:	78 a5       	ldd	r23, Y+40	; 0x28
    179e:	89 a5       	ldd	r24, Y+41	; 0x29
    17a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e2       	ldi	r20, 0x20	; 32
    17a8:	51 e4       	ldi	r21, 0x41	; 65
    17aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	9a a3       	std	Y+34, r25	; 0x22
    17c0:	89 a3       	std	Y+33, r24	; 0x21
    17c2:	0f c0       	rjmp	.+30     	; 0x17e2 <LCD_VoidSendCommand+0x130>
    17c4:	88 ec       	ldi	r24, 0xC8	; 200
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	98 a3       	std	Y+32, r25	; 0x20
    17ca:	8f 8f       	std	Y+31, r24	; 0x1f
    17cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17ce:	98 a1       	ldd	r25, Y+32	; 0x20
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <LCD_VoidSendCommand+0x11e>
    17d4:	98 a3       	std	Y+32, r25	; 0x20
    17d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d8:	89 a1       	ldd	r24, Y+33	; 0x21
    17da:	9a a1       	ldd	r25, Y+34	; 0x22
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	9a a3       	std	Y+34, r25	; 0x22
    17e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e2:	89 a1       	ldd	r24, Y+33	; 0x21
    17e4:	9a a1       	ldd	r25, Y+34	; 0x22
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	69 f7       	brne	.-38     	; 0x17c4 <LCD_VoidSendCommand+0x112>
    17ea:	14 c0       	rjmp	.+40     	; 0x1814 <LCD_VoidSendCommand+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ec:	6b a1       	ldd	r22, Y+35	; 0x23
    17ee:	7c a1       	ldd	r23, Y+36	; 0x24
    17f0:	8d a1       	ldd	r24, Y+37	; 0x25
    17f2:	9e a1       	ldd	r25, Y+38	; 0x26
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	9a a3       	std	Y+34, r25	; 0x22
    17fe:	89 a3       	std	Y+33, r24	; 0x21
    1800:	89 a1       	ldd	r24, Y+33	; 0x21
    1802:	9a a1       	ldd	r25, Y+34	; 0x22
    1804:	9e 8f       	std	Y+30, r25	; 0x1e
    1806:	8d 8f       	std	Y+29, r24	; 0x1d
    1808:	8d 8d       	ldd	r24, Y+29	; 0x1d
    180a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_VoidSendCommand+0x15a>
    1810:	9e 8f       	std	Y+30, r25	; 0x1e
    1812:	8d 8f       	std	Y+29, r24	; 0x1d
		 _delay_ms(1);
		 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);
    1814:	83 e0       	ldi	r24, 0x03	; 3
    1816:	62 e0       	ldi	r22, 0x02	; 2
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>

		 for (u8 i=0;i<=3;++i)
    181e:	1b a6       	std	Y+43, r1	; 0x2b
    1820:	1e c0       	rjmp	.+60     	; 0x185e <LCD_VoidSendCommand+0x1ac>
		{
		 MDIO_VoidSetPinValue(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i],GET_BIT(Copy_U8Command,i));
    1822:	8b a5       	ldd	r24, Y+43	; 0x2b
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	fc 01       	movw	r30, r24
    182a:	ec 56       	subi	r30, 0x6C	; 108
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	40 81       	ld	r20, Z
    1830:	8d a5       	ldd	r24, Y+45	; 0x2d
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	8b a5       	ldd	r24, Y+43	; 0x2b
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	b9 01       	movw	r22, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <LCD_VoidSendCommand+0x192>
    1840:	75 95       	asr	r23
    1842:	67 95       	ror	r22
    1844:	8a 95       	dec	r24
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <LCD_VoidSendCommand+0x18e>
    1848:	cb 01       	movw	r24, r22
    184a:	98 2f       	mov	r25, r24
    184c:	91 70       	andi	r25, 0x01	; 1
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	64 2f       	mov	r22, r20
    1852:	49 2f       	mov	r20, r25
    1854:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
		 /*ENABLE SEQUANCE**/
		 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
		 _delay_ms(1);
		 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);

		 for (u8 i=0;i<=3;++i)
    1858:	8b a5       	ldd	r24, Y+43	; 0x2b
    185a:	8f 5f       	subi	r24, 0xFF	; 255
    185c:	8b a7       	std	Y+43, r24	; 0x2b
    185e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1860:	84 30       	cpi	r24, 0x04	; 4
    1862:	f8 f2       	brcs	.-66     	; 0x1822 <LCD_VoidSendCommand+0x170>
		{
		 MDIO_VoidSetPinValue(LCD_U8_DATA_PORT,LCD_DATA_BINS_4BIT_MODE[i],GET_BIT(Copy_U8Command,i));
		 }

		 /*ENABLE SEQUANCE**/
		 MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,HIGH);
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	62 e0       	ldi	r22, 0x02	; 2
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	a0 e8       	ldi	r26, 0x80	; 128
    1874:	bf e3       	ldi	r27, 0x3F	; 63
    1876:	89 8f       	std	Y+25, r24	; 0x19
    1878:	9a 8f       	std	Y+26, r25	; 0x1a
    187a:	ab 8f       	std	Y+27, r26	; 0x1b
    187c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187e:	69 8d       	ldd	r22, Y+25	; 0x19
    1880:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	4a ef       	ldi	r20, 0xFA	; 250
    188c:	54 e4       	ldi	r21, 0x44	; 68
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	8d 8b       	std	Y+21, r24	; 0x15
    1898:	9e 8b       	std	Y+22, r25	; 0x16
    189a:	af 8b       	std	Y+23, r26	; 0x17
    189c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    189e:	6d 89       	ldd	r22, Y+21	; 0x15
    18a0:	7e 89       	ldd	r23, Y+22	; 0x16
    18a2:	8f 89       	ldd	r24, Y+23	; 0x17
    18a4:	98 8d       	ldd	r25, Y+24	; 0x18
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b2:	88 23       	and	r24, r24
    18b4:	2c f4       	brge	.+10     	; 0x18c0 <LCD_VoidSendCommand+0x20e>
		__ticks = 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	9c 8b       	std	Y+20, r25	; 0x14
    18bc:	8b 8b       	std	Y+19, r24	; 0x13
    18be:	3f c0       	rjmp	.+126    	; 0x193e <LCD_VoidSendCommand+0x28c>
	else if (__tmp > 65535)
    18c0:	6d 89       	ldd	r22, Y+21	; 0x15
    18c2:	7e 89       	ldd	r23, Y+22	; 0x16
    18c4:	8f 89       	ldd	r24, Y+23	; 0x17
    18c6:	98 8d       	ldd	r25, Y+24	; 0x18
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	3f ef       	ldi	r19, 0xFF	; 255
    18cc:	4f e7       	ldi	r20, 0x7F	; 127
    18ce:	57 e4       	ldi	r21, 0x47	; 71
    18d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d4:	18 16       	cp	r1, r24
    18d6:	4c f5       	brge	.+82     	; 0x192a <LCD_VoidSendCommand+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d8:	69 8d       	ldd	r22, Y+25	; 0x19
    18da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e2       	ldi	r20, 0x20	; 32
    18e6:	51 e4       	ldi	r21, 0x41	; 65
    18e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	bc 01       	movw	r22, r24
    18f2:	cd 01       	movw	r24, r26
    18f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	9c 8b       	std	Y+20, r25	; 0x14
    18fe:	8b 8b       	std	Y+19, r24	; 0x13
    1900:	0f c0       	rjmp	.+30     	; 0x1920 <LCD_VoidSendCommand+0x26e>
    1902:	88 ec       	ldi	r24, 0xC8	; 200
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	9a 8b       	std	Y+18, r25	; 0x12
    1908:	89 8b       	std	Y+17, r24	; 0x11
    190a:	89 89       	ldd	r24, Y+17	; 0x11
    190c:	9a 89       	ldd	r25, Y+18	; 0x12
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCD_VoidSendCommand+0x25c>
    1912:	9a 8b       	std	Y+18, r25	; 0x12
    1914:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1916:	8b 89       	ldd	r24, Y+19	; 0x13
    1918:	9c 89       	ldd	r25, Y+20	; 0x14
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	9c 8b       	std	Y+20, r25	; 0x14
    191e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1920:	8b 89       	ldd	r24, Y+19	; 0x13
    1922:	9c 89       	ldd	r25, Y+20	; 0x14
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	69 f7       	brne	.-38     	; 0x1902 <LCD_VoidSendCommand+0x250>
    1928:	14 c0       	rjmp	.+40     	; 0x1952 <LCD_VoidSendCommand+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192a:	6d 89       	ldd	r22, Y+21	; 0x15
    192c:	7e 89       	ldd	r23, Y+22	; 0x16
    192e:	8f 89       	ldd	r24, Y+23	; 0x17
    1930:	98 8d       	ldd	r25, Y+24	; 0x18
    1932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	9c 8b       	std	Y+20, r25	; 0x14
    193c:	8b 8b       	std	Y+19, r24	; 0x13
    193e:	8b 89       	ldd	r24, Y+19	; 0x13
    1940:	9c 89       	ldd	r25, Y+20	; 0x14
    1942:	98 8b       	std	Y+16, r25	; 0x10
    1944:	8f 87       	std	Y+15, r24	; 0x0f
    1946:	8f 85       	ldd	r24, Y+15	; 0x0f
    1948:	98 89       	ldd	r25, Y+16	; 0x10
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <LCD_VoidSendCommand+0x298>
    194e:	98 8b       	std	Y+16, r25	; 0x10
    1950:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(1);
		  MDIO_VoidSetPinValue(LCD_U8_CONTROL_PORT,LCD_U8_E_PIN,LOW);
    1952:	83 e0       	ldi	r24, 0x03	; 3
    1954:	62 e0       	ldi	r22, 0x02	; 2
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a0 e0       	ldi	r26, 0x00	; 0
    1962:	b0 e4       	ldi	r27, 0x40	; 64
    1964:	8b 87       	std	Y+11, r24	; 0x0b
    1966:	9c 87       	std	Y+12, r25	; 0x0c
    1968:	ad 87       	std	Y+13, r26	; 0x0d
    196a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	6b 85       	ldd	r22, Y+11	; 0x0b
    196e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1970:	8d 85       	ldd	r24, Y+13	; 0x0d
    1972:	9e 85       	ldd	r25, Y+14	; 0x0e
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a ef       	ldi	r20, 0xFA	; 250
    197a:	54 e4       	ldi	r21, 0x44	; 68
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8f 83       	std	Y+7, r24	; 0x07
    1986:	98 87       	std	Y+8, r25	; 0x08
    1988:	a9 87       	std	Y+9, r26	; 0x09
    198a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <LCD_VoidSendCommand+0x2fc>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9e 83       	std	Y+6, r25	; 0x06
    19aa:	8d 83       	std	Y+5, r24	; 0x05
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <LCD_VoidSendCommand+0x37a>
	else if (__tmp > 65535)
    19ae:	6f 81       	ldd	r22, Y+7	; 0x07
    19b0:	78 85       	ldd	r23, Y+8	; 0x08
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <LCD_VoidSendCommand+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    19cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <LCD_VoidSendCommand+0x35c>
    19f0:	88 ec       	ldi	r24, 0xC8	; 200
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	8b 83       	std	Y+3, r24	; 0x03
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_VoidSendCommand+0x34a>
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <LCD_VoidSendCommand+0x33e>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <LCD_VoidSendCommand+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1a:	78 85       	ldd	r23, Y+8	; 0x08
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <LCD_VoidSendCommand+0x386>
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
		  _delay_ms(2);
#endif
}
    1a40:	ad 96       	adiw	r28, 0x2d	; 45
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <LCD_VoidSendString>:


void LCD_VoidSendString(char * Copy_U8PtrString)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <LCD_VoidSendString+0x6>
    1a58:	0f 92       	push	r0
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	9b 83       	std	Y+3, r25	; 0x03
    1a60:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0;
    1a62:	19 82       	std	Y+1, r1	; 0x01
    1a64:	0e c0       	rjmp	.+28     	; 0x1a82 <LCD_VoidSendString+0x30>
	//while you don't reach to the end of your string enter the loop
	while(( Copy_U8PtrString[count])!='\0')
	{
		//print the selected char
		LCD_VoidSendChar(Copy_U8PtrString[count]);
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a70:	fc 01       	movw	r30, r24
    1a72:	e2 0f       	add	r30, r18
    1a74:	f3 1f       	adc	r31, r19
    1a76:	80 81       	ld	r24, Z
    1a78:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendChar>
		//increment to print the next char
		count++;
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	89 83       	std	Y+1, r24	; 0x01

void LCD_VoidSendString(char * Copy_U8PtrString)
{
	u8 count=0;
	//while you don't reach to the end of your string enter the loop
	while(( Copy_U8PtrString[count])!='\0')
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	e2 0f       	add	r30, r18
    1a90:	f3 1f       	adc	r31, r19
    1a92:	80 81       	ld	r24, Z
    1a94:	88 23       	and	r24, r24
    1a96:	39 f7       	brne	.-50     	; 0x1a66 <LCD_VoidSendString+0x14>
		//print the selected char
		LCD_VoidSendChar(Copy_U8PtrString[count]);
		//increment to print the next char
		count++;
	}
}
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <LCD_VoidSendNum>:
/*___________________________THE END OF PRINT STRING FUNCTION____________________________*/



void LCD_VoidSendNum(u16 CopyNum)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	29 97       	sbiw	r28, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	99 87       	std	Y+9, r25	; 0x09
    1aba:	88 87       	std	Y+8, r24	; 0x08
	u16 temp=CopyNum;
    1abc:	88 85       	ldd	r24, Y+8	; 0x08
    1abe:	99 85       	ldd	r25, Y+9	; 0x09
    1ac0:	9f 83       	std	Y+7, r25	; 0x07
    1ac2:	8e 83       	std	Y+6, r24	; 0x06
	u8 count=0;
    1ac4:	1d 82       	std	Y+5, r1	; 0x05
    1ac6:	0d c0       	rjmp	.+26     	; 0x1ae2 <LCD_VoidSendNum+0x3e>
	/*this loop to count the digits of input number */
	/*this loop is a commmon between the 2 codes below*/
	while (temp!=0)
	{
		temp=temp/10;
    1ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aca:	9f 81       	ldd	r25, Y+7	; 0x07
    1acc:	2a e0       	ldi	r18, 0x0A	; 10
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	b9 01       	movw	r22, r18
    1ad2:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__udivmodhi4>
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9f 83       	std	Y+7, r25	; 0x07
    1ada:	8e 83       	std	Y+6, r24	; 0x06
		count++;
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	8f 5f       	subi	r24, 0xFF	; 255
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
{
	u16 temp=CopyNum;
	u8 count=0;
	/*this loop to count the digits of input number */
	/*this loop is a commmon between the 2 codes below*/
	while (temp!=0)
    1ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	79 f7       	brne	.-34     	; 0x1ac8 <LCD_VoidSendNum+0x24>
		temp=temp/10;
		count++;
	}

		u16 mul;
		for(u8 j=1;j<count;j++)
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	8a 83       	std	Y+2, r24	; 0x02
    1aee:	3e c0       	rjmp	.+124    	; 0x1b6c <LCD_VoidSendNum+0xc8>
				 {
			         mul=1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9c 83       	std	Y+4, r25	; 0x04
    1af6:	8b 83       	std	Y+3, r24	; 0x03
					 for(u8 i =0;i<count-j;i++)
    1af8:	19 82       	std	Y+1, r1	; 0x01
    1afa:	11 c0       	rjmp	.+34     	; 0x1b1e <LCD_VoidSendNum+0x7a>
					 {mul=mul*10;  //in this loop we multiply 10 in itself ex :10*10=100
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	9c 01       	movw	r18, r24
    1b02:	22 0f       	add	r18, r18
    1b04:	33 1f       	adc	r19, r19
    1b06:	c9 01       	movw	r24, r18
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	82 0f       	add	r24, r18
    1b12:	93 1f       	adc	r25, r19
    1b14:	9c 83       	std	Y+4, r25	; 0x04
    1b16:	8b 83       	std	Y+3, r24	; 0x03

		u16 mul;
		for(u8 j=1;j<count;j++)
				 {
			         mul=1;
					 for(u8 i =0;i<count-j;i++)
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	48 2f       	mov	r20, r24
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	88 2f       	mov	r24, r24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	b9 01       	movw	r22, r18
    1b32:	68 1b       	sub	r22, r24
    1b34:	79 0b       	sbc	r23, r25
    1b36:	cb 01       	movw	r24, r22
    1b38:	48 17       	cp	r20, r24
    1b3a:	59 07       	cpc	r21, r25
    1b3c:	fc f2       	brlt	.-66     	; 0x1afc <LCD_VoidSendNum+0x58>
					 {mul=mul*10;  //in this loop we multiply 10 in itself ex :10*10=100
					 }
					 LCD_VoidSendChar((CopyNum/mul)+'0'); //ex : 256/100 = 2 then add ascii of 0 to print it
    1b3e:	88 85       	ldd	r24, Y+8	; 0x08
    1b40:	99 85       	ldd	r25, Y+9	; 0x09
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	b9 01       	movw	r22, r18
    1b48:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__udivmodhi4>
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	80 5d       	subi	r24, 0xD0	; 208
    1b50:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendChar>
					 CopyNum=CopyNum%mul;   //256%100=56 ==> we do this to get red of (digit 2)
    1b54:	88 85       	ldd	r24, Y+8	; 0x08
    1b56:	99 85       	ldd	r25, Y+9	; 0x09
    1b58:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__udivmodhi4>
    1b62:	99 87       	std	Y+9, r25	; 0x09
    1b64:	88 87       	std	Y+8, r24	; 0x08
		temp=temp/10;
		count++;
	}

		u16 mul;
		for(u8 j=1;j<count;j++)
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	8f 5f       	subi	r24, 0xFF	; 255
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    1b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	98 17       	cp	r25, r24
    1b72:	08 f4       	brcc	.+2      	; 0x1b76 <LCD_VoidSendNum+0xd2>
    1b74:	bd cf       	rjmp	.-134    	; 0x1af0 <LCD_VoidSendNum+0x4c>
					 }
					 LCD_VoidSendChar((CopyNum/mul)+'0'); //ex : 256/100 = 2 then add ascii of 0 to print it
					 CopyNum=CopyNum%mul;   //256%100=56 ==> we do this to get red of (digit 2)
				}

		 LCD_VoidSendChar(CopyNum+'0'); //we print the last digit 6 as it will not be printed in the previous loop
    1b76:	88 85       	ldd	r24, Y+8	; 0x08
    1b78:	80 5d       	subi	r24, 0xD0	; 208
    1b7a:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendChar>
}
    1b7e:	29 96       	adiw	r28, 0x09	; 9
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <LCD_VoidClearScreen>:
/*__________________________________________________________________________________________*/



void LCD_VoidClearScreen(void)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	2e 97       	sbiw	r28, 0x0e	; 14
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
	LCD_VoidSendCommand(0x01);
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <LCD_VoidSendCommand>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	a0 ea       	ldi	r26, 0xA0	; 160
    1bb0:	b0 e4       	ldi	r27, 0x40	; 64
    1bb2:	8b 87       	std	Y+11, r24	; 0x0b
    1bb4:	9c 87       	std	Y+12, r25	; 0x0c
    1bb6:	ad 87       	std	Y+13, r26	; 0x0d
    1bb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	4a ef       	ldi	r20, 0xFA	; 250
    1bc8:	54 e4       	ldi	r21, 0x44	; 68
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	8f 83       	std	Y+7, r24	; 0x07
    1bd4:	98 87       	std	Y+8, r25	; 0x08
    1bd6:	a9 87       	std	Y+9, r26	; 0x09
    1bd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bda:	6f 81       	ldd	r22, Y+7	; 0x07
    1bdc:	78 85       	ldd	r23, Y+8	; 0x08
    1bde:	89 85       	ldd	r24, Y+9	; 0x09
    1be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e8       	ldi	r20, 0x80	; 128
    1be8:	5f e3       	ldi	r21, 0x3F	; 63
    1bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bee:	88 23       	and	r24, r24
    1bf0:	2c f4       	brge	.+10     	; 0x1bfc <LCD_VoidClearScreen+0x6c>
		__ticks = 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	9e 83       	std	Y+6, r25	; 0x06
    1bf8:	8d 83       	std	Y+5, r24	; 0x05
    1bfa:	3f c0       	rjmp	.+126    	; 0x1c7a <LCD_VoidClearScreen+0xea>
	else if (__tmp > 65535)
    1bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfe:	78 85       	ldd	r23, Y+8	; 0x08
    1c00:	89 85       	ldd	r24, Y+9	; 0x09
    1c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	3f ef       	ldi	r19, 0xFF	; 255
    1c08:	4f e7       	ldi	r20, 0x7F	; 127
    1c0a:	57 e4       	ldi	r21, 0x47	; 71
    1c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c10:	18 16       	cp	r1, r24
    1c12:	4c f5       	brge	.+82     	; 0x1c66 <LCD_VoidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e2       	ldi	r20, 0x20	; 32
    1c22:	51 e4       	ldi	r21, 0x41	; 65
    1c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	0f c0       	rjmp	.+30     	; 0x1c5c <LCD_VoidClearScreen+0xcc>
    1c3e:	88 ec       	ldi	r24, 0xC8	; 200
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9c 83       	std	Y+4, r25	; 0x04
    1c44:	8b 83       	std	Y+3, r24	; 0x03
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <LCD_VoidClearScreen+0xba>
    1c4e:	9c 83       	std	Y+4, r25	; 0x04
    1c50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	9e 83       	std	Y+6, r25	; 0x06
    1c5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	69 f7       	brne	.-38     	; 0x1c3e <LCD_VoidClearScreen+0xae>
    1c64:	14 c0       	rjmp	.+40     	; 0x1c8e <LCD_VoidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9e 83       	std	Y+6, r25	; 0x06
    1c78:	8d 83       	std	Y+5, r24	; 0x05
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <LCD_VoidClearScreen+0xf6>
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    1c8e:	2e 96       	adiw	r28, 0x0e	; 14
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <LCD_VoidShiftLeft>:


void LCD_VoidShiftLeft(void)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    LCD_VoidSendCommand(0x18);
    1ca8:	88 e1       	ldi	r24, 0x18	; 24
    1caa:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <LCD_VoidSendCommand>
}
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <LCD_VoidShiftRight>:


void LCD_VoidShiftRight(void)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    LCD_VoidSendCommand(0x1C);
    1cbc:	8c e1       	ldi	r24, 0x1C	; 28
    1cbe:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <LCD_VoidSendCommand>
}
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <LCD_VoidGoToXY>:

void LCD_VoidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <LCD_VoidGoToXY+0x6>
    1cce:	0f 92       	push	r0
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	8a 83       	std	Y+2, r24	; 0x02
    1cd6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	88 23       	and	r24, r24
    1cdc:	19 f4       	brne	.+6      	; 0x1ce4 <LCD_VoidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	06 c0       	rjmp	.+12     	; 0x1cf0 <LCD_VoidGoToXY+0x28>

	}
	else if(Copy_u8XPos==1)
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	19 f4       	brne	.+6      	; 0x1cf0 <LCD_VoidGoToXY+0x28>
		{
			Local_u8Address=Copy_u8YPos+0x40;
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	80 5c       	subi	r24, 0xC0	; 192
    1cee:	89 83       	std	Y+1, r24	; 0x01

		}
	LCD_VoidSendCommand(Local_u8Address+128);
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	80 58       	subi	r24, 0x80	; 128
    1cf4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <LCD_VoidSendCommand>

}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <LCD_VoidWriteSpecialCharacter>:

void LCD_VoidWriteSpecialCharacter(u8* Copy_u8Pattern,u8 Copy_u8PosInMemory)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <LCD_VoidWriteSpecialCharacter+0x6>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <LCD_VoidWriteSpecialCharacter+0x8>
    1d0c:	0f 92       	push	r0
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
    1d16:	6d 83       	std	Y+5, r22	; 0x05
	u8 localCGramAddress;
	localCGramAddress=Copy_u8PosInMemory*8;
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	88 2f       	mov	r24, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VoidSendCommand(localCGramAddress+64);
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	80 5c       	subi	r24, 0xC0	; 192
    1d30:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <LCD_VoidSendCommand>
	for(u8 i=0;i<8;++i)
    1d34:	19 82       	std	Y+1, r1	; 0x01
    1d36:	0e c0       	rjmp	.+28     	; 0x1d54 <LCD_VoidWriteSpecialCharacter+0x50>
	{
		LCD_VoidSendChar(Copy_u8Pattern[i]);
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	fc 01       	movw	r30, r24
    1d44:	e2 0f       	add	r30, r18
    1d46:	f3 1f       	adc	r31, r19
    1d48:	80 81       	ld	r24, Z
    1d4a:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendChar>
void LCD_VoidWriteSpecialCharacter(u8* Copy_u8Pattern,u8 Copy_u8PosInMemory)
{
	u8 localCGramAddress;
	localCGramAddress=Copy_u8PosInMemory*8;
	LCD_VoidSendCommand(localCGramAddress+64);
	for(u8 i=0;i<8;++i)
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	8f 5f       	subi	r24, 0xFF	; 255
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	88 30       	cpi	r24, 0x08	; 8
    1d58:	78 f3       	brcs	.-34     	; 0x1d38 <LCD_VoidWriteSpecialCharacter+0x34>
	{
		LCD_VoidSendChar(Copy_u8Pattern[i]);
	}

	LCD_VoidSendCommand(HLCD_RET_HOME);
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <LCD_VoidSendCommand>
}
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <LCD_VoidDisplaySpecialCharacter>:
void LCD_VoidDisplaySpecialCharacter(u8 Copy_u8PosInMemory,u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <LCD_VoidDisplaySpecialCharacter+0x6>
    1d76:	0f 92       	push	r0
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	6a 83       	std	Y+2, r22	; 0x02
    1d80:	4b 83       	std	Y+3, r20	; 0x03
    LCD_VoidGoToXY(Copy_u8XPosition,Copy_u8YPosition);
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	6b 81       	ldd	r22, Y+3	; 0x03
    1d86:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_VoidGoToXY>

    LCD_VoidSendChar(Copy_u8PosInMemory);
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendChar>

}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <MDIO_VoidSetPinDirection>:
#include "LBIT_MATH.h"
#include "MDIO_Private.h"
#include "MDIO_Interface.h"

void MDIO_VoidSetPinDirection(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Direction)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	27 97       	sbiw	r28, 0x07	; 7
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	6a 83       	std	Y+2, r22	; 0x02
    1db4:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_U8Direction==INPUT_PIN)
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	88 23       	and	r24, r24
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <MDIO_VoidSetPinDirection+0x22>
    1dbc:	74 c0       	rjmp	.+232    	; 0x1ea6 <MDIO_VoidSetPinDirection+0x10a>
	{
		switch(Copy_U8Port)
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	3f 83       	std	Y+7, r19	; 0x07
    1dc6:	2e 83       	std	Y+6, r18	; 0x06
    1dc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dca:	9f 81       	ldd	r25, Y+7	; 0x07
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	91 05       	cpc	r25, r1
    1dd0:	59 f1       	breq	.+86     	; 0x1e28 <MDIO_VoidSetPinDirection+0x8c>
    1dd2:	2e 81       	ldd	r18, Y+6	; 0x06
    1dd4:	3f 81       	ldd	r19, Y+7	; 0x07
    1dd6:	22 30       	cpi	r18, 0x02	; 2
    1dd8:	31 05       	cpc	r19, r1
    1dda:	2c f4       	brge	.+10     	; 0x1de6 <MDIO_VoidSetPinDirection+0x4a>
    1ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dde:	9f 81       	ldd	r25, Y+7	; 0x07
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <MDIO_VoidSetPinDirection+0x62>
    1de4:	d2 c0       	rjmp	.+420    	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
    1de6:	2e 81       	ldd	r18, Y+6	; 0x06
    1de8:	3f 81       	ldd	r19, Y+7	; 0x07
    1dea:	22 30       	cpi	r18, 0x02	; 2
    1dec:	31 05       	cpc	r19, r1
    1dee:	89 f1       	breq	.+98     	; 0x1e52 <MDIO_VoidSetPinDirection+0xb6>
    1df0:	8e 81       	ldd	r24, Y+6	; 0x06
    1df2:	9f 81       	ldd	r25, Y+7	; 0x07
    1df4:	83 30       	cpi	r24, 0x03	; 3
    1df6:	91 05       	cpc	r25, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <MDIO_VoidSetPinDirection+0x60>
    1dfa:	40 c0       	rjmp	.+128    	; 0x1e7c <MDIO_VoidSetPinDirection+0xe0>
    1dfc:	c6 c0       	rjmp	.+396    	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
		{
			case PORTA: CLEAR_BIT(DDRA_REG,Copy_U8Pin); break ;
    1dfe:	aa e3       	ldi	r26, 0x3A	; 58
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	ea e3       	ldi	r30, 0x3A	; 58
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 2e       	mov	r0, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <MDIO_VoidSetPinDirection+0x80>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	0a 94       	dec	r0
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <MDIO_VoidSetPinDirection+0x7c>
    1e20:	80 95       	com	r24
    1e22:	84 23       	and	r24, r20
    1e24:	8c 93       	st	X, r24
    1e26:	b1 c0       	rjmp	.+354    	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
			case PORTB: CLEAR_BIT(DDRB_REG,Copy_U8Pin); break ;
    1e28:	a7 e3       	ldi	r26, 0x37	; 55
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e7 e3       	ldi	r30, 0x37	; 55
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <MDIO_VoidSetPinDirection+0xaa>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <MDIO_VoidSetPinDirection+0xa6>
    1e4a:	80 95       	com	r24
    1e4c:	84 23       	and	r24, r20
    1e4e:	8c 93       	st	X, r24
    1e50:	9c c0       	rjmp	.+312    	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
			case PORTC: CLEAR_BIT(DDRC_REG,Copy_U8Pin); break ;
    1e52:	a4 e3       	ldi	r26, 0x34	; 52
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e4 e3       	ldi	r30, 0x34	; 52
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <MDIO_VoidSetPinDirection+0xd4>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <MDIO_VoidSetPinDirection+0xd0>
    1e74:	80 95       	com	r24
    1e76:	84 23       	and	r24, r20
    1e78:	8c 93       	st	X, r24
    1e7a:	87 c0       	rjmp	.+270    	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
			case PORTD: CLEAR_BIT(DDRD_REG,Copy_U8Pin); break ;
    1e7c:	a1 e3       	ldi	r26, 0x31	; 49
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e1 e3       	ldi	r30, 0x31	; 49
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 2e       	mov	r0, r18
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <MDIO_VoidSetPinDirection+0xfe>
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0a 94       	dec	r0
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <MDIO_VoidSetPinDirection+0xfa>
    1e9e:	80 95       	com	r24
    1ea0:	84 23       	and	r24, r20
    1ea2:	8c 93       	st	X, r24
    1ea4:	72 c0       	rjmp	.+228    	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
		}
		
	}
	else if(Copy_U8Direction==OUTPUT_PIN)
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <MDIO_VoidSetPinDirection+0x112>
    1eac:	6e c0       	rjmp	.+220    	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
	{
		switch(Copy_U8Port)
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	3d 83       	std	Y+5, r19	; 0x05
    1eb6:	2c 83       	std	Y+4, r18	; 0x04
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eba:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	49 f1       	breq	.+82     	; 0x1f14 <MDIO_VoidSetPinDirection+0x178>
    1ec2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec6:	22 30       	cpi	r18, 0x02	; 2
    1ec8:	31 05       	cpc	r19, r1
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <MDIO_VoidSetPinDirection+0x13a>
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	61 f0       	breq	.+24     	; 0x1eec <MDIO_VoidSetPinDirection+0x150>
    1ed4:	5a c0       	rjmp	.+180    	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
    1ed6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eda:	22 30       	cpi	r18, 0x02	; 2
    1edc:	31 05       	cpc	r19, r1
    1ede:	71 f1       	breq	.+92     	; 0x1f3c <MDIO_VoidSetPinDirection+0x1a0>
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	83 30       	cpi	r24, 0x03	; 3
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	e9 f1       	breq	.+122    	; 0x1f64 <MDIO_VoidSetPinDirection+0x1c8>
    1eea:	4f c0       	rjmp	.+158    	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
		{
			case PORTA: SET_BIT(DDRA_REG,Copy_U8Pin); break ;
    1eec:	aa e3       	ldi	r26, 0x3A	; 58
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ea e3       	ldi	r30, 0x3A	; 58
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <MDIO_VoidSetPinDirection+0x16e>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <MDIO_VoidSetPinDirection+0x16a>
    1f0e:	84 2b       	or	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	3b c0       	rjmp	.+118    	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
			case PORTB: SET_BIT(DDRB_REG,Copy_U8Pin); break ;
    1f14:	a7 e3       	ldi	r26, 0x37	; 55
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e7 e3       	ldi	r30, 0x37	; 55
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 2e       	mov	r0, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <MDIO_VoidSetPinDirection+0x196>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	0a 94       	dec	r0
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <MDIO_VoidSetPinDirection+0x192>
    1f36:	84 2b       	or	r24, r20
    1f38:	8c 93       	st	X, r24
    1f3a:	27 c0       	rjmp	.+78     	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
			case PORTC: SET_BIT(DDRC_REG,Copy_U8Pin); break ;
    1f3c:	a4 e3       	ldi	r26, 0x34	; 52
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e4 e3       	ldi	r30, 0x34	; 52
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	48 2f       	mov	r20, r24
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <MDIO_VoidSetPinDirection+0x1be>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <MDIO_VoidSetPinDirection+0x1ba>
    1f5e:	84 2b       	or	r24, r20
    1f60:	8c 93       	st	X, r24
    1f62:	13 c0       	rjmp	.+38     	; 0x1f8a <MDIO_VoidSetPinDirection+0x1ee>
			case PORTD: SET_BIT(DDRD_REG,Copy_U8Pin); break ;
    1f64:	a1 e3       	ldi	r26, 0x31	; 49
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e1 e3       	ldi	r30, 0x31	; 49
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 2e       	mov	r0, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <MDIO_VoidSetPinDirection+0x1e6>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	0a 94       	dec	r0
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <MDIO_VoidSetPinDirection+0x1e2>
    1f86:	84 2b       	or	r24, r20
    1f88:	8c 93       	st	X, r24
		}
		
	}
		
}
    1f8a:	27 96       	adiw	r28, 0x07	; 7
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <MDIO_VoidSetPinValue>:

void MDIO_VoidSetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Value)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	27 97       	sbiw	r28, 0x07	; 7
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	6a 83       	std	Y+2, r22	; 0x02
    1fb4:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_U8Value==HIGH)
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <MDIO_VoidSetPinValue+0x22>
    1fbc:	6f c0       	rjmp	.+222    	; 0x209c <MDIO_VoidSetPinValue+0x100>
    {
        switch (Copy_U8Port)
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	3f 83       	std	Y+7, r19	; 0x07
    1fc6:	2e 83       	std	Y+6, r18	; 0x06
    1fc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fca:	9f 81       	ldd	r25, Y+7	; 0x07
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	91 05       	cpc	r25, r1
    1fd0:	49 f1       	breq	.+82     	; 0x2024 <MDIO_VoidSetPinValue+0x88>
    1fd2:	2e 81       	ldd	r18, Y+6	; 0x06
    1fd4:	3f 81       	ldd	r19, Y+7	; 0x07
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <MDIO_VoidSetPinValue+0x4a>
    1fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fde:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	61 f0       	breq	.+24     	; 0x1ffc <MDIO_VoidSetPinValue+0x60>
    1fe4:	d2 c0       	rjmp	.+420    	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
    1fe6:	2e 81       	ldd	r18, Y+6	; 0x06
    1fe8:	3f 81       	ldd	r19, Y+7	; 0x07
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	31 05       	cpc	r19, r1
    1fee:	71 f1       	breq	.+92     	; 0x204c <MDIO_VoidSetPinValue+0xb0>
    1ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff4:	83 30       	cpi	r24, 0x03	; 3
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	e9 f1       	breq	.+122    	; 0x2074 <MDIO_VoidSetPinValue+0xd8>
    1ffa:	c7 c0       	rjmp	.+398    	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
        {
            case PORTA: SET_BIT(PORTA_REG,Copy_U8Pin); break;
    1ffc:	ab e3       	ldi	r26, 0x3B	; 59
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	eb e3       	ldi	r30, 0x3B	; 59
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	48 2f       	mov	r20, r24
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <MDIO_VoidSetPinValue+0x7e>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <MDIO_VoidSetPinValue+0x7a>
    201e:	84 2b       	or	r24, r20
    2020:	8c 93       	st	X, r24
    2022:	b3 c0       	rjmp	.+358    	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
            case PORTB: SET_BIT(PORTB_REG,Copy_U8Pin); break;
    2024:	a8 e3       	ldi	r26, 0x38	; 56
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e8 e3       	ldi	r30, 0x38	; 56
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	48 2f       	mov	r20, r24
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	02 2e       	mov	r0, r18
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <MDIO_VoidSetPinValue+0xa6>
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	0a 94       	dec	r0
    2044:	e2 f7       	brpl	.-8      	; 0x203e <MDIO_VoidSetPinValue+0xa2>
    2046:	84 2b       	or	r24, r20
    2048:	8c 93       	st	X, r24
    204a:	9f c0       	rjmp	.+318    	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
            case PORTC: SET_BIT(PORTC_REG,Copy_U8Pin); break;
    204c:	a5 e3       	ldi	r26, 0x35	; 53
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e5 e3       	ldi	r30, 0x35	; 53
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	48 2f       	mov	r20, r24
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	02 2e       	mov	r0, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <MDIO_VoidSetPinValue+0xce>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	0a 94       	dec	r0
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <MDIO_VoidSetPinValue+0xca>
    206e:	84 2b       	or	r24, r20
    2070:	8c 93       	st	X, r24
    2072:	8b c0       	rjmp	.+278    	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
            case PORTD: SET_BIT(PORTD_REG,Copy_U8Pin); break;
    2074:	a2 e3       	ldi	r26, 0x32	; 50
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e2 e3       	ldi	r30, 0x32	; 50
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	48 2f       	mov	r20, r24
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 2e       	mov	r0, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <MDIO_VoidSetPinValue+0xf6>
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	0a 94       	dec	r0
    2094:	e2 f7       	brpl	.-8      	; 0x208e <MDIO_VoidSetPinValue+0xf2>
    2096:	84 2b       	or	r24, r20
    2098:	8c 93       	st	X, r24
    209a:	77 c0       	rjmp	.+238    	; 0x218a <MDIO_VoidSetPinValue+0x1ee>

        }

    }
    else if(Copy_U8Value==LOW)
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	88 23       	and	r24, r24
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <MDIO_VoidSetPinValue+0x108>
    20a2:	73 c0       	rjmp	.+230    	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
    {
        switch (Copy_U8Port)
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	3d 83       	std	Y+5, r19	; 0x05
    20ac:	2c 83       	std	Y+4, r18	; 0x04
    20ae:	8c 81       	ldd	r24, Y+4	; 0x04
    20b0:	9d 81       	ldd	r25, Y+5	; 0x05
    20b2:	81 30       	cpi	r24, 0x01	; 1
    20b4:	91 05       	cpc	r25, r1
    20b6:	59 f1       	breq	.+86     	; 0x210e <MDIO_VoidSetPinValue+0x172>
    20b8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ba:	3d 81       	ldd	r19, Y+5	; 0x05
    20bc:	22 30       	cpi	r18, 0x02	; 2
    20be:	31 05       	cpc	r19, r1
    20c0:	2c f4       	brge	.+10     	; 0x20cc <MDIO_VoidSetPinValue+0x130>
    20c2:	8c 81       	ldd	r24, Y+4	; 0x04
    20c4:	9d 81       	ldd	r25, Y+5	; 0x05
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	69 f0       	breq	.+26     	; 0x20e4 <MDIO_VoidSetPinValue+0x148>
    20ca:	5f c0       	rjmp	.+190    	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
    20cc:	2c 81       	ldd	r18, Y+4	; 0x04
    20ce:	3d 81       	ldd	r19, Y+5	; 0x05
    20d0:	22 30       	cpi	r18, 0x02	; 2
    20d2:	31 05       	cpc	r19, r1
    20d4:	89 f1       	breq	.+98     	; 0x2138 <MDIO_VoidSetPinValue+0x19c>
    20d6:	8c 81       	ldd	r24, Y+4	; 0x04
    20d8:	9d 81       	ldd	r25, Y+5	; 0x05
    20da:	83 30       	cpi	r24, 0x03	; 3
    20dc:	91 05       	cpc	r25, r1
    20de:	09 f4       	brne	.+2      	; 0x20e2 <MDIO_VoidSetPinValue+0x146>
    20e0:	40 c0       	rjmp	.+128    	; 0x2162 <MDIO_VoidSetPinValue+0x1c6>
    20e2:	53 c0       	rjmp	.+166    	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
        {
            case PORTA: CLEAR_BIT(PORTA_REG,Copy_U8Pin); break;
    20e4:	ab e3       	ldi	r26, 0x3B	; 59
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	eb e3       	ldi	r30, 0x3B	; 59
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	48 2f       	mov	r20, r24
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 2e       	mov	r0, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <MDIO_VoidSetPinValue+0x166>
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	0a 94       	dec	r0
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <MDIO_VoidSetPinValue+0x162>
    2106:	80 95       	com	r24
    2108:	84 23       	and	r24, r20
    210a:	8c 93       	st	X, r24
    210c:	3e c0       	rjmp	.+124    	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
            case PORTB: CLEAR_BIT(PORTB_REG,Copy_U8Pin); break;
    210e:	a8 e3       	ldi	r26, 0x38	; 56
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e8 e3       	ldi	r30, 0x38	; 56
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	48 2f       	mov	r20, r24
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	02 2e       	mov	r0, r18
    2126:	02 c0       	rjmp	.+4      	; 0x212c <MDIO_VoidSetPinValue+0x190>
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	0a 94       	dec	r0
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <MDIO_VoidSetPinValue+0x18c>
    2130:	80 95       	com	r24
    2132:	84 23       	and	r24, r20
    2134:	8c 93       	st	X, r24
    2136:	29 c0       	rjmp	.+82     	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
            case PORTC: CLEAR_BIT(PORTC_REG,Copy_U8Pin); break;
    2138:	a5 e3       	ldi	r26, 0x35	; 53
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e5 e3       	ldi	r30, 0x35	; 53
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	48 2f       	mov	r20, r24
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 2e       	mov	r0, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <MDIO_VoidSetPinValue+0x1ba>
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	0a 94       	dec	r0
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <MDIO_VoidSetPinValue+0x1b6>
    215a:	80 95       	com	r24
    215c:	84 23       	and	r24, r20
    215e:	8c 93       	st	X, r24
    2160:	14 c0       	rjmp	.+40     	; 0x218a <MDIO_VoidSetPinValue+0x1ee>
            case PORTD: CLEAR_BIT(PORTD_REG,Copy_U8Pin); break;
    2162:	a2 e3       	ldi	r26, 0x32	; 50
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e2 e3       	ldi	r30, 0x32	; 50
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	48 2f       	mov	r20, r24
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	02 2e       	mov	r0, r18
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <MDIO_VoidSetPinValue+0x1e4>
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	0a 94       	dec	r0
    2182:	e2 f7       	brpl	.-8      	; 0x217c <MDIO_VoidSetPinValue+0x1e0>
    2184:	80 95       	com	r24
    2186:	84 23       	and	r24, r20
    2188:	8c 93       	st	X, r24

        }

    }

}
    218a:	27 96       	adiw	r28, 0x07	; 7
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <MDIO_VoidSetPortDirection>:

void  MDIO_VoidSetPortDirection(u8 Copy_U8Port,u8 Copy_U8Direction)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <MDIO_VoidSetPortDirection+0x6>
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <MDIO_VoidSetPortDirection+0x8>
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port)
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	3c 83       	std	Y+4, r19	; 0x04
    21b4:	2b 83       	std	Y+3, r18	; 0x03
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	91 05       	cpc	r25, r1
    21be:	d1 f0       	breq	.+52     	; 0x21f4 <MDIO_VoidSetPortDirection+0x58>
    21c0:	2b 81       	ldd	r18, Y+3	; 0x03
    21c2:	3c 81       	ldd	r19, Y+4	; 0x04
    21c4:	22 30       	cpi	r18, 0x02	; 2
    21c6:	31 05       	cpc	r19, r1
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <MDIO_VoidSetPortDirection+0x38>
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	61 f0       	breq	.+24     	; 0x21ea <MDIO_VoidSetPortDirection+0x4e>
    21d2:	1e c0       	rjmp	.+60     	; 0x2210 <MDIO_VoidSetPortDirection+0x74>
    21d4:	2b 81       	ldd	r18, Y+3	; 0x03
    21d6:	3c 81       	ldd	r19, Y+4	; 0x04
    21d8:	22 30       	cpi	r18, 0x02	; 2
    21da:	31 05       	cpc	r19, r1
    21dc:	81 f0       	breq	.+32     	; 0x21fe <MDIO_VoidSetPortDirection+0x62>
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	9c 81       	ldd	r25, Y+4	; 0x04
    21e2:	83 30       	cpi	r24, 0x03	; 3
    21e4:	91 05       	cpc	r25, r1
    21e6:	81 f0       	breq	.+32     	; 0x2208 <MDIO_VoidSetPortDirection+0x6c>
    21e8:	13 c0       	rjmp	.+38     	; 0x2210 <MDIO_VoidSetPortDirection+0x74>
    {
        case     PORTA: DDRA_REG = Copy_U8Direction; break;
    21ea:	ea e3       	ldi	r30, 0x3A	; 58
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	80 83       	st	Z, r24
    21f2:	0e c0       	rjmp	.+28     	; 0x2210 <MDIO_VoidSetPortDirection+0x74>
        case     PORTB: DDRB_REG = Copy_U8Direction; break;
    21f4:	e7 e3       	ldi	r30, 0x37	; 55
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	80 83       	st	Z, r24
    21fc:	09 c0       	rjmp	.+18     	; 0x2210 <MDIO_VoidSetPortDirection+0x74>
        case     PORTC: DDRC_REG = Copy_U8Direction; break;
    21fe:	e4 e3       	ldi	r30, 0x34	; 52
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	80 83       	st	Z, r24
    2206:	04 c0       	rjmp	.+8      	; 0x2210 <MDIO_VoidSetPortDirection+0x74>
        case     PORTD: DDRD_REG = Copy_U8Direction; break;
    2208:	e1 e3       	ldi	r30, 0x31	; 49
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	80 83       	st	Z, r24

    }

}
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <MDIO_VoidSetPortValue>:

void  MDIO_VoidSetPortValue(u8 Copy_U8Port,u8 Copy_U8Value)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	00 d0       	rcall	.+0      	; 0x2224 <MDIO_VoidSetPortValue+0x6>
    2224:	00 d0       	rcall	.+0      	; 0x2226 <MDIO_VoidSetPortValue+0x8>
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port)
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	3c 83       	std	Y+4, r19	; 0x04
    2236:	2b 83       	std	Y+3, r18	; 0x03
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	91 05       	cpc	r25, r1
    2240:	d1 f0       	breq	.+52     	; 0x2276 <MDIO_VoidSetPortValue+0x58>
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	22 30       	cpi	r18, 0x02	; 2
    2248:	31 05       	cpc	r19, r1
    224a:	2c f4       	brge	.+10     	; 0x2256 <MDIO_VoidSetPortValue+0x38>
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	61 f0       	breq	.+24     	; 0x226c <MDIO_VoidSetPortValue+0x4e>
    2254:	1e c0       	rjmp	.+60     	; 0x2292 <MDIO_VoidSetPortValue+0x74>
    2256:	2b 81       	ldd	r18, Y+3	; 0x03
    2258:	3c 81       	ldd	r19, Y+4	; 0x04
    225a:	22 30       	cpi	r18, 0x02	; 2
    225c:	31 05       	cpc	r19, r1
    225e:	81 f0       	breq	.+32     	; 0x2280 <MDIO_VoidSetPortValue+0x62>
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
    2264:	83 30       	cpi	r24, 0x03	; 3
    2266:	91 05       	cpc	r25, r1
    2268:	81 f0       	breq	.+32     	; 0x228a <MDIO_VoidSetPortValue+0x6c>
    226a:	13 c0       	rjmp	.+38     	; 0x2292 <MDIO_VoidSetPortValue+0x74>
    {
        case     PORTA: PORTA_REG = Copy_U8Value; break;
    226c:	eb e3       	ldi	r30, 0x3B	; 59
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	80 83       	st	Z, r24
    2274:	0e c0       	rjmp	.+28     	; 0x2292 <MDIO_VoidSetPortValue+0x74>
        case     PORTB: PORTB_REG = Copy_U8Value; break;
    2276:	e8 e3       	ldi	r30, 0x38	; 56
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	80 83       	st	Z, r24
    227e:	09 c0       	rjmp	.+18     	; 0x2292 <MDIO_VoidSetPortValue+0x74>
        case     PORTC: PORTC_REG = Copy_U8Value; break;
    2280:	e5 e3       	ldi	r30, 0x35	; 53
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	80 83       	st	Z, r24
    2288:	04 c0       	rjmp	.+8      	; 0x2292 <MDIO_VoidSetPortValue+0x74>
        case     PORTD: PORTD_REG = Copy_U8Value; break;
    228a:	e2 e3       	ldi	r30, 0x32	; 50
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	80 83       	st	Z, r24

    }

}
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <MDIO_VoidTogglePin>:

void  MDIO_VoidTogglePin(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <MDIO_VoidTogglePin+0x6>
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <MDIO_VoidTogglePin+0x8>
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port)
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	3c 83       	std	Y+4, r19	; 0x04
    22b8:	2b 83       	std	Y+3, r18	; 0x03
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	81 30       	cpi	r24, 0x01	; 1
    22c0:	91 05       	cpc	r25, r1
    22c2:	49 f1       	breq	.+82     	; 0x2316 <MDIO_VoidTogglePin+0x76>
    22c4:	2b 81       	ldd	r18, Y+3	; 0x03
    22c6:	3c 81       	ldd	r19, Y+4	; 0x04
    22c8:	22 30       	cpi	r18, 0x02	; 2
    22ca:	31 05       	cpc	r19, r1
    22cc:	2c f4       	brge	.+10     	; 0x22d8 <MDIO_VoidTogglePin+0x38>
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	61 f0       	breq	.+24     	; 0x22ee <MDIO_VoidTogglePin+0x4e>
    22d6:	5a c0       	rjmp	.+180    	; 0x238c <MDIO_VoidTogglePin+0xec>
    22d8:	2b 81       	ldd	r18, Y+3	; 0x03
    22da:	3c 81       	ldd	r19, Y+4	; 0x04
    22dc:	22 30       	cpi	r18, 0x02	; 2
    22de:	31 05       	cpc	r19, r1
    22e0:	71 f1       	breq	.+92     	; 0x233e <MDIO_VoidTogglePin+0x9e>
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	83 30       	cpi	r24, 0x03	; 3
    22e8:	91 05       	cpc	r25, r1
    22ea:	e9 f1       	breq	.+122    	; 0x2366 <MDIO_VoidTogglePin+0xc6>
    22ec:	4f c0       	rjmp	.+158    	; 0x238c <MDIO_VoidTogglePin+0xec>
    {
        case PORTA: TOGGLE_BIT(PORTA_REG,Copy_U8Pin); break;
    22ee:	ab e3       	ldi	r26, 0x3B	; 59
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	eb e3       	ldi	r30, 0x3B	; 59
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	48 2f       	mov	r20, r24
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	02 2e       	mov	r0, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <MDIO_VoidTogglePin+0x6c>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	0a 94       	dec	r0
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <MDIO_VoidTogglePin+0x68>
    2310:	84 27       	eor	r24, r20
    2312:	8c 93       	st	X, r24
    2314:	3b c0       	rjmp	.+118    	; 0x238c <MDIO_VoidTogglePin+0xec>
        case PORTB: TOGGLE_BIT(PORTB_REG,Copy_U8Pin); break;
    2316:	a8 e3       	ldi	r26, 0x38	; 56
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e8 e3       	ldi	r30, 0x38	; 56
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	48 2f       	mov	r20, r24
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 2e       	mov	r0, r18
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <MDIO_VoidTogglePin+0x94>
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	0a 94       	dec	r0
    2336:	e2 f7       	brpl	.-8      	; 0x2330 <MDIO_VoidTogglePin+0x90>
    2338:	84 27       	eor	r24, r20
    233a:	8c 93       	st	X, r24
    233c:	27 c0       	rjmp	.+78     	; 0x238c <MDIO_VoidTogglePin+0xec>
        case PORTC: TOGGLE_BIT(PORTC_REG,Copy_U8Pin); break;
    233e:	a5 e3       	ldi	r26, 0x35	; 53
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e5 e3       	ldi	r30, 0x35	; 53
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	48 2f       	mov	r20, r24
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	02 2e       	mov	r0, r18
    2356:	02 c0       	rjmp	.+4      	; 0x235c <MDIO_VoidTogglePin+0xbc>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	0a 94       	dec	r0
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <MDIO_VoidTogglePin+0xb8>
    2360:	84 27       	eor	r24, r20
    2362:	8c 93       	st	X, r24
    2364:	13 c0       	rjmp	.+38     	; 0x238c <MDIO_VoidTogglePin+0xec>
        case PORTD: TOGGLE_BIT(PORTD_REG,Copy_U8Pin); break;
    2366:	a2 e3       	ldi	r26, 0x32	; 50
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e2 e3       	ldi	r30, 0x32	; 50
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	48 2f       	mov	r20, r24
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	02 2e       	mov	r0, r18
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <MDIO_VoidTogglePin+0xe4>
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	0a 94       	dec	r0
    2386:	e2 f7       	brpl	.-8      	; 0x2380 <MDIO_VoidTogglePin+0xe0>
    2388:	84 27       	eor	r24, r20
    238a:	8c 93       	st	X, r24

    }
}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <MDIO_U8GetPinValue>:

u8 MDIO_U8GetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <MDIO_U8GetPinValue+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <MDIO_U8GetPinValue+0x8>
    23a2:	0f 92       	push	r0
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	8a 83       	std	Y+2, r24	; 0x02
    23aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_ReturnedValue; 			// LOC mean local variable
	switch(Copy_U8Port)
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	3d 83       	std	Y+5, r19	; 0x05
    23b4:	2c 83       	std	Y+4, r18	; 0x04
    23b6:	4c 81       	ldd	r20, Y+4	; 0x04
    23b8:	5d 81       	ldd	r21, Y+5	; 0x05
    23ba:	41 30       	cpi	r20, 0x01	; 1
    23bc:	51 05       	cpc	r21, r1
    23be:	41 f1       	breq	.+80     	; 0x2410 <MDIO_U8GetPinValue+0x76>
    23c0:	8c 81       	ldd	r24, Y+4	; 0x04
    23c2:	9d 81       	ldd	r25, Y+5	; 0x05
    23c4:	82 30       	cpi	r24, 0x02	; 2
    23c6:	91 05       	cpc	r25, r1
    23c8:	34 f4       	brge	.+12     	; 0x23d6 <MDIO_U8GetPinValue+0x3c>
    23ca:	2c 81       	ldd	r18, Y+4	; 0x04
    23cc:	3d 81       	ldd	r19, Y+5	; 0x05
    23ce:	21 15       	cp	r18, r1
    23d0:	31 05       	cpc	r19, r1
    23d2:	61 f0       	breq	.+24     	; 0x23ec <MDIO_U8GetPinValue+0x52>
    23d4:	52 c0       	rjmp	.+164    	; 0x247a <MDIO_U8GetPinValue+0xe0>
    23d6:	4c 81       	ldd	r20, Y+4	; 0x04
    23d8:	5d 81       	ldd	r21, Y+5	; 0x05
    23da:	42 30       	cpi	r20, 0x02	; 2
    23dc:	51 05       	cpc	r21, r1
    23de:	51 f1       	breq	.+84     	; 0x2434 <MDIO_U8GetPinValue+0x9a>
    23e0:	8c 81       	ldd	r24, Y+4	; 0x04
    23e2:	9d 81       	ldd	r25, Y+5	; 0x05
    23e4:	83 30       	cpi	r24, 0x03	; 3
    23e6:	91 05       	cpc	r25, r1
    23e8:	b9 f1       	breq	.+110    	; 0x2458 <MDIO_U8GetPinValue+0xbe>
    23ea:	47 c0       	rjmp	.+142    	; 0x247a <MDIO_U8GetPinValue+0xe0>
	{
		case PORTA: LOC_ReturnedValue= GET_BIT(PINA_REG,Copy_U8Pin); break;
    23ec:	e9 e3       	ldi	r30, 0x39	; 57
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	88 2f       	mov	r24, r24
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a9 01       	movw	r20, r18
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <MDIO_U8GetPinValue+0x6a>
    2400:	55 95       	asr	r21
    2402:	47 95       	ror	r20
    2404:	8a 95       	dec	r24
    2406:	e2 f7       	brpl	.-8      	; 0x2400 <MDIO_U8GetPinValue+0x66>
    2408:	ca 01       	movw	r24, r20
    240a:	81 70       	andi	r24, 0x01	; 1
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	35 c0       	rjmp	.+106    	; 0x247a <MDIO_U8GetPinValue+0xe0>
		case PORTB: LOC_ReturnedValue= GET_BIT(PINB_REG,Copy_U8Pin); break;
    2410:	e6 e3       	ldi	r30, 0x36	; 54
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a9 01       	movw	r20, r18
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <MDIO_U8GetPinValue+0x8e>
    2424:	55 95       	asr	r21
    2426:	47 95       	ror	r20
    2428:	8a 95       	dec	r24
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <MDIO_U8GetPinValue+0x8a>
    242c:	ca 01       	movw	r24, r20
    242e:	81 70       	andi	r24, 0x01	; 1
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	23 c0       	rjmp	.+70     	; 0x247a <MDIO_U8GetPinValue+0xe0>
		case PORTC: LOC_ReturnedValue= GET_BIT(PINC_REG,Copy_U8Pin); break;
    2434:	e3 e3       	ldi	r30, 0x33	; 51
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	88 2f       	mov	r24, r24
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a9 01       	movw	r20, r18
    2446:	02 c0       	rjmp	.+4      	; 0x244c <MDIO_U8GetPinValue+0xb2>
    2448:	55 95       	asr	r21
    244a:	47 95       	ror	r20
    244c:	8a 95       	dec	r24
    244e:	e2 f7       	brpl	.-8      	; 0x2448 <MDIO_U8GetPinValue+0xae>
    2450:	ca 01       	movw	r24, r20
    2452:	81 70       	andi	r24, 0x01	; 1
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	11 c0       	rjmp	.+34     	; 0x247a <MDIO_U8GetPinValue+0xe0>
		case PORTD: LOC_ReturnedValue= GET_BIT(PIND_REG,Copy_U8Pin); break;
    2458:	e0 e3       	ldi	r30, 0x30	; 48
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	a9 01       	movw	r20, r18
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <MDIO_U8GetPinValue+0xd6>
    246c:	55 95       	asr	r21
    246e:	47 95       	ror	r20
    2470:	8a 95       	dec	r24
    2472:	e2 f7       	brpl	.-8      	; 0x246c <MDIO_U8GetPinValue+0xd2>
    2474:	ca 01       	movw	r24, r20
    2476:	81 70       	andi	r24, 0x01	; 1
    2478:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return LOC_ReturnedValue;
    247a:	89 81       	ldd	r24, Y+1	; 0x01
}
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <main>:
void startCount(void);

u8 arrowShape[]={4, 14, 21, 4, 4, 4, 4, 4};

int main (void)
{
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	c7 54       	subi	r28, 0x47	; 71
    249a:	d0 40       	sbci	r29, 0x00	; 0
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61

	u8 localPressedKey;
	LCD_VoidInit();
    24a6:	0e 94 45 06 	call	0xc8a	; 0xc8a <LCD_VoidInit>
	HKPD_voidInitializeKeypad();
    24aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <HKPD_voidInitializeKeypad>
	LCD_VoidGoToXY(0, 0);
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_VoidGoToXY>
    LCD_VoidWriteSpecialCharacter(arrowShape,0);
    24b6:	88 e9       	ldi	r24, 0x98	; 152
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <LCD_VoidWriteSpecialCharacter>
    MDIO_VoidSetPinDirection(PORTD,PIN3,OUTPUT_PIN);
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	63 e0       	ldi	r22, 0x03	; 3
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <MDIO_VoidSetPinDirection>
    initSystem();
    24ca:	0e 94 14 15 	call	0x2a28	; 0x2a28 <initSystem>
	while(1)
	 {

		 localPressedKey=HKPD_u8GetPressedKey();
    24ce:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <HKPD_u8GetPressedKey>
    24d2:	fe 01       	movw	r30, r28
    24d4:	e9 5b       	subi	r30, 0xB9	; 185
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 83       	st	Z, r24
		 if(localPressedKey=='1')   /// up
    24da:	fe 01       	movw	r30, r28
    24dc:	e9 5b       	subi	r30, 0xB9	; 185
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	81 33       	cpi	r24, 0x31	; 49
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <main+0x5c>
    24e6:	90 c0       	rjmp	.+288    	; 0x2608 <main+0x17c>
		 {
		     incrementCurrent();
    24e8:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <incrementCurrent>

             while(HKPD_u8GetPressedKey()==localPressedKey)
    24ec:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <HKPD_u8GetPressedKey>
    24f0:	fe 01       	movw	r30, r28
    24f2:	e9 5b       	subi	r30, 0xB9	; 185
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	90 81       	ld	r25, Z
    24f8:	89 17       	cp	r24, r25
    24fa:	c1 f3       	breq	.-16     	; 0x24ec <main+0x60>
    24fc:	fe 01       	movw	r30, r28
    24fe:	ed 5b       	subi	r30, 0xBD	; 189
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a0 ea       	ldi	r26, 0xA0	; 160
    2508:	b1 e4       	ldi	r27, 0x41	; 65
    250a:	80 83       	st	Z, r24
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	a2 83       	std	Z+2, r26	; 0x02
    2510:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2512:	8e 01       	movw	r16, r28
    2514:	01 5c       	subi	r16, 0xC1	; 193
    2516:	1f 4f       	sbci	r17, 0xFF	; 255
    2518:	fe 01       	movw	r30, r28
    251a:	ed 5b       	subi	r30, 0xBD	; 189
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a ef       	ldi	r20, 0xFA	; 250
    252c:	54 e4       	ldi	r21, 0x44	; 68
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	f8 01       	movw	r30, r16
    2538:	80 83       	st	Z, r24
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	a2 83       	std	Z+2, r26	; 0x02
    253e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2540:	fe 01       	movw	r30, r28
    2542:	ff 96       	adiw	r30, 0x3f	; 63
    2544:	60 81       	ld	r22, Z
    2546:	71 81       	ldd	r23, Z+1	; 0x01
    2548:	82 81       	ldd	r24, Z+2	; 0x02
    254a:	93 81       	ldd	r25, Z+3	; 0x03
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e8       	ldi	r20, 0x80	; 128
    2552:	5f e3       	ldi	r21, 0x3F	; 63
    2554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2558:	88 23       	and	r24, r24
    255a:	2c f4       	brge	.+10     	; 0x2566 <main+0xda>
		__ticks = 1;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9e af       	std	Y+62, r25	; 0x3e
    2562:	8d af       	std	Y+61, r24	; 0x3d
    2564:	46 c0       	rjmp	.+140    	; 0x25f2 <main+0x166>
	else if (__tmp > 65535)
    2566:	fe 01       	movw	r30, r28
    2568:	ff 96       	adiw	r30, 0x3f	; 63
    256a:	60 81       	ld	r22, Z
    256c:	71 81       	ldd	r23, Z+1	; 0x01
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	64 f5       	brge	.+88     	; 0x25da <main+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	fe 01       	movw	r30, r28
    2584:	ed 5b       	subi	r30, 0xBD	; 189
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	60 81       	ld	r22, Z
    258a:	71 81       	ldd	r23, Z+1	; 0x01
    258c:	82 81       	ldd	r24, Z+2	; 0x02
    258e:	93 81       	ldd	r25, Z+3	; 0x03
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e af       	std	Y+62, r25	; 0x3e
    25ae:	8d af       	std	Y+61, r24	; 0x3d
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <main+0x144>
    25b2:	88 ec       	ldi	r24, 0xC8	; 200
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9c af       	std	Y+60, r25	; 0x3c
    25b8:	8b af       	std	Y+59, r24	; 0x3b
    25ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    25bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <main+0x132>
    25c2:	9c af       	std	Y+60, r25	; 0x3c
    25c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    25c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9e af       	std	Y+62, r25	; 0x3e
    25ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    25d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	69 f7       	brne	.-38     	; 0x25b2 <main+0x126>
    25d8:	7a cf       	rjmp	.-268    	; 0x24ce <main+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	fe 01       	movw	r30, r28
    25dc:	ff 96       	adiw	r30, 0x3f	; 63
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9e af       	std	Y+62, r25	; 0x3e
    25f0:	8d af       	std	Y+61, r24	; 0x3d
    25f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    25f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    25f6:	9a af       	std	Y+58, r25	; 0x3a
    25f8:	89 af       	std	Y+57, r24	; 0x39
    25fa:	89 ad       	ldd	r24, Y+57	; 0x39
    25fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <main+0x172>
    2602:	9a af       	std	Y+58, r25	; 0x3a
    2604:	89 af       	std	Y+57, r24	; 0x39
    2606:	63 cf       	rjmp	.-314    	; 0x24ce <main+0x42>
             {

             }
             _delay_ms(20); // Delay To Over Come The Pouncing Problems
		 }
		 else if(localPressedKey=='4')  /// down
    2608:	fe 01       	movw	r30, r28
    260a:	e9 5b       	subi	r30, 0xB9	; 185
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	84 33       	cpi	r24, 0x34	; 52
    2612:	09 f0       	breq	.+2      	; 0x2616 <main+0x18a>
    2614:	7d c0       	rjmp	.+250    	; 0x2710 <main+0x284>
         {

             decrementCurrent();
    2616:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <decrementCurrent>


             while(HKPD_u8GetPressedKey()==localPressedKey)
    261a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <HKPD_u8GetPressedKey>
    261e:	fe 01       	movw	r30, r28
    2620:	e9 5b       	subi	r30, 0xB9	; 185
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	90 81       	ld	r25, Z
    2626:	89 17       	cp	r24, r25
    2628:	c1 f3       	breq	.-16     	; 0x261a <main+0x18e>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	a0 ea       	ldi	r26, 0xA0	; 160
    2630:	b1 e4       	ldi	r27, 0x41	; 65
    2632:	8d ab       	std	Y+53, r24	; 0x35
    2634:	9e ab       	std	Y+54, r25	; 0x36
    2636:	af ab       	std	Y+55, r26	; 0x37
    2638:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263a:	6d a9       	ldd	r22, Y+53	; 0x35
    263c:	7e a9       	ldd	r23, Y+54	; 0x36
    263e:	8f a9       	ldd	r24, Y+55	; 0x37
    2640:	98 ad       	ldd	r25, Y+56	; 0x38
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a ef       	ldi	r20, 0xFA	; 250
    2648:	54 e4       	ldi	r21, 0x44	; 68
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	89 ab       	std	Y+49, r24	; 0x31
    2654:	9a ab       	std	Y+50, r25	; 0x32
    2656:	ab ab       	std	Y+51, r26	; 0x33
    2658:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    265a:	69 a9       	ldd	r22, Y+49	; 0x31
    265c:	7a a9       	ldd	r23, Y+50	; 0x32
    265e:	8b a9       	ldd	r24, Y+51	; 0x33
    2660:	9c a9       	ldd	r25, Y+52	; 0x34
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e8       	ldi	r20, 0x80	; 128
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    266e:	88 23       	and	r24, r24
    2670:	2c f4       	brge	.+10     	; 0x267c <main+0x1f0>
		__ticks = 1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	98 ab       	std	Y+48, r25	; 0x30
    2678:	8f a7       	std	Y+47, r24	; 0x2f
    267a:	3f c0       	rjmp	.+126    	; 0x26fa <main+0x26e>
	else if (__tmp > 65535)
    267c:	69 a9       	ldd	r22, Y+49	; 0x31
    267e:	7a a9       	ldd	r23, Y+50	; 0x32
    2680:	8b a9       	ldd	r24, Y+51	; 0x33
    2682:	9c a9       	ldd	r25, Y+52	; 0x34
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	3f ef       	ldi	r19, 0xFF	; 255
    2688:	4f e7       	ldi	r20, 0x7F	; 127
    268a:	57 e4       	ldi	r21, 0x47	; 71
    268c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2690:	18 16       	cp	r1, r24
    2692:	4c f5       	brge	.+82     	; 0x26e6 <main+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2694:	6d a9       	ldd	r22, Y+53	; 0x35
    2696:	7e a9       	ldd	r23, Y+54	; 0x36
    2698:	8f a9       	ldd	r24, Y+55	; 0x37
    269a:	98 ad       	ldd	r25, Y+56	; 0x38
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e2       	ldi	r20, 0x20	; 32
    26a2:	51 e4       	ldi	r21, 0x41	; 65
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	98 ab       	std	Y+48, r25	; 0x30
    26ba:	8f a7       	std	Y+47, r24	; 0x2f
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <main+0x250>
    26be:	88 ec       	ldi	r24, 0xC8	; 200
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	9e a7       	std	Y+46, r25	; 0x2e
    26c4:	8d a7       	std	Y+45, r24	; 0x2d
    26c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    26c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <main+0x23e>
    26ce:	9e a7       	std	Y+46, r25	; 0x2e
    26d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d4:	98 a9       	ldd	r25, Y+48	; 0x30
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	98 ab       	std	Y+48, r25	; 0x30
    26da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26de:	98 a9       	ldd	r25, Y+48	; 0x30
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	69 f7       	brne	.-38     	; 0x26be <main+0x232>
    26e4:	f4 ce       	rjmp	.-536    	; 0x24ce <main+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e6:	69 a9       	ldd	r22, Y+49	; 0x31
    26e8:	7a a9       	ldd	r23, Y+50	; 0x32
    26ea:	8b a9       	ldd	r24, Y+51	; 0x33
    26ec:	9c a9       	ldd	r25, Y+52	; 0x34
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	98 ab       	std	Y+48, r25	; 0x30
    26f8:	8f a7       	std	Y+47, r24	; 0x2f
    26fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    26fc:	98 a9       	ldd	r25, Y+48	; 0x30
    26fe:	9c a7       	std	Y+44, r25	; 0x2c
    2700:	8b a7       	std	Y+43, r24	; 0x2b
    2702:	8b a5       	ldd	r24, Y+43	; 0x2b
    2704:	9c a5       	ldd	r25, Y+44	; 0x2c
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <main+0x27a>
    270a:	9c a7       	std	Y+44, r25	; 0x2c
    270c:	8b a7       	std	Y+43, r24	; 0x2b
    270e:	df ce       	rjmp	.-578    	; 0x24ce <main+0x42>
             {

             }
             _delay_ms(20); // Delay To Over Come The Pouncing Problems
         }
         else if(localPressedKey=='2')  /// Next
    2710:	fe 01       	movw	r30, r28
    2712:	e9 5b       	subi	r30, 0xB9	; 185
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	82 33       	cpi	r24, 0x32	; 50
    271a:	09 f0       	breq	.+2      	; 0x271e <main+0x292>
    271c:	7d c0       	rjmp	.+250    	; 0x2818 <main+0x38c>
         {

             goToNext();
    271e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <goToNext>


             while(HKPD_u8GetPressedKey()==localPressedKey)
    2722:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <HKPD_u8GetPressedKey>
    2726:	fe 01       	movw	r30, r28
    2728:	e9 5b       	subi	r30, 0xB9	; 185
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	90 81       	ld	r25, Z
    272e:	89 17       	cp	r24, r25
    2730:	c1 f3       	breq	.-16     	; 0x2722 <main+0x296>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a0 ea       	ldi	r26, 0xA0	; 160
    2738:	b1 e4       	ldi	r27, 0x41	; 65
    273a:	8f a3       	std	Y+39, r24	; 0x27
    273c:	98 a7       	std	Y+40, r25	; 0x28
    273e:	a9 a7       	std	Y+41, r26	; 0x29
    2740:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2742:	6f a1       	ldd	r22, Y+39	; 0x27
    2744:	78 a5       	ldd	r23, Y+40	; 0x28
    2746:	89 a5       	ldd	r24, Y+41	; 0x29
    2748:	9a a5       	ldd	r25, Y+42	; 0x2a
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	4a ef       	ldi	r20, 0xFA	; 250
    2750:	54 e4       	ldi	r21, 0x44	; 68
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	8b a3       	std	Y+35, r24	; 0x23
    275c:	9c a3       	std	Y+36, r25	; 0x24
    275e:	ad a3       	std	Y+37, r26	; 0x25
    2760:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2762:	6b a1       	ldd	r22, Y+35	; 0x23
    2764:	7c a1       	ldd	r23, Y+36	; 0x24
    2766:	8d a1       	ldd	r24, Y+37	; 0x25
    2768:	9e a1       	ldd	r25, Y+38	; 0x26
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2776:	88 23       	and	r24, r24
    2778:	2c f4       	brge	.+10     	; 0x2784 <main+0x2f8>
		__ticks = 1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	9a a3       	std	Y+34, r25	; 0x22
    2780:	89 a3       	std	Y+33, r24	; 0x21
    2782:	3f c0       	rjmp	.+126    	; 0x2802 <main+0x376>
	else if (__tmp > 65535)
    2784:	6b a1       	ldd	r22, Y+35	; 0x23
    2786:	7c a1       	ldd	r23, Y+36	; 0x24
    2788:	8d a1       	ldd	r24, Y+37	; 0x25
    278a:	9e a1       	ldd	r25, Y+38	; 0x26
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	3f ef       	ldi	r19, 0xFF	; 255
    2790:	4f e7       	ldi	r20, 0x7F	; 127
    2792:	57 e4       	ldi	r21, 0x47	; 71
    2794:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2798:	18 16       	cp	r1, r24
    279a:	4c f5       	brge	.+82     	; 0x27ee <main+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279c:	6f a1       	ldd	r22, Y+39	; 0x27
    279e:	78 a5       	ldd	r23, Y+40	; 0x28
    27a0:	89 a5       	ldd	r24, Y+41	; 0x29
    27a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e2       	ldi	r20, 0x20	; 32
    27aa:	51 e4       	ldi	r21, 0x41	; 65
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9a a3       	std	Y+34, r25	; 0x22
    27c2:	89 a3       	std	Y+33, r24	; 0x21
    27c4:	0f c0       	rjmp	.+30     	; 0x27e4 <main+0x358>
    27c6:	88 ec       	ldi	r24, 0xC8	; 200
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	98 a3       	std	Y+32, r25	; 0x20
    27cc:	8f 8f       	std	Y+31, r24	; 0x1f
    27ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27d0:	98 a1       	ldd	r25, Y+32	; 0x20
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <main+0x346>
    27d6:	98 a3       	std	Y+32, r25	; 0x20
    27d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27da:	89 a1       	ldd	r24, Y+33	; 0x21
    27dc:	9a a1       	ldd	r25, Y+34	; 0x22
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	9a a3       	std	Y+34, r25	; 0x22
    27e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e4:	89 a1       	ldd	r24, Y+33	; 0x21
    27e6:	9a a1       	ldd	r25, Y+34	; 0x22
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	69 f7       	brne	.-38     	; 0x27c6 <main+0x33a>
    27ec:	70 ce       	rjmp	.-800    	; 0x24ce <main+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ee:	6b a1       	ldd	r22, Y+35	; 0x23
    27f0:	7c a1       	ldd	r23, Y+36	; 0x24
    27f2:	8d a1       	ldd	r24, Y+37	; 0x25
    27f4:	9e a1       	ldd	r25, Y+38	; 0x26
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	9a a3       	std	Y+34, r25	; 0x22
    2800:	89 a3       	std	Y+33, r24	; 0x21
    2802:	89 a1       	ldd	r24, Y+33	; 0x21
    2804:	9a a1       	ldd	r25, Y+34	; 0x22
    2806:	9e 8f       	std	Y+30, r25	; 0x1e
    2808:	8d 8f       	std	Y+29, r24	; 0x1d
    280a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <main+0x382>
    2812:	9e 8f       	std	Y+30, r25	; 0x1e
    2814:	8d 8f       	std	Y+29, r24	; 0x1d
    2816:	5b ce       	rjmp	.-842    	; 0x24ce <main+0x42>
             {

             }
             _delay_ms(20); // Delay To Over Come The Pouncing Problems
         }
         else if(localPressedKey=='3')  /// previous
    2818:	fe 01       	movw	r30, r28
    281a:	e9 5b       	subi	r30, 0xB9	; 185
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	83 33       	cpi	r24, 0x33	; 51
    2822:	09 f0       	breq	.+2      	; 0x2826 <main+0x39a>
    2824:	7d c0       	rjmp	.+250    	; 0x2920 <main+0x494>
         {

             goToPrevious();
    2826:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <goToPrevious>


             while(HKPD_u8GetPressedKey()==localPressedKey)
    282a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <HKPD_u8GetPressedKey>
    282e:	fe 01       	movw	r30, r28
    2830:	e9 5b       	subi	r30, 0xB9	; 185
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	90 81       	ld	r25, Z
    2836:	89 17       	cp	r24, r25
    2838:	c1 f3       	breq	.-16     	; 0x282a <main+0x39e>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 ea       	ldi	r26, 0xA0	; 160
    2840:	b1 e4       	ldi	r27, 0x41	; 65
    2842:	89 8f       	std	Y+25, r24	; 0x19
    2844:	9a 8f       	std	Y+26, r25	; 0x1a
    2846:	ab 8f       	std	Y+27, r26	; 0x1b
    2848:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284a:	69 8d       	ldd	r22, Y+25	; 0x19
    284c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4a ef       	ldi	r20, 0xFA	; 250
    2858:	54 e4       	ldi	r21, 0x44	; 68
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	8d 8b       	std	Y+21, r24	; 0x15
    2864:	9e 8b       	std	Y+22, r25	; 0x16
    2866:	af 8b       	std	Y+23, r26	; 0x17
    2868:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    286a:	6d 89       	ldd	r22, Y+21	; 0x15
    286c:	7e 89       	ldd	r23, Y+22	; 0x16
    286e:	8f 89       	ldd	r24, Y+23	; 0x17
    2870:	98 8d       	ldd	r25, Y+24	; 0x18
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e8       	ldi	r20, 0x80	; 128
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287e:	88 23       	and	r24, r24
    2880:	2c f4       	brge	.+10     	; 0x288c <main+0x400>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9c 8b       	std	Y+20, r25	; 0x14
    2888:	8b 8b       	std	Y+19, r24	; 0x13
    288a:	3f c0       	rjmp	.+126    	; 0x290a <main+0x47e>
	else if (__tmp > 65535)
    288c:	6d 89       	ldd	r22, Y+21	; 0x15
    288e:	7e 89       	ldd	r23, Y+22	; 0x16
    2890:	8f 89       	ldd	r24, Y+23	; 0x17
    2892:	98 8d       	ldd	r25, Y+24	; 0x18
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	4f e7       	ldi	r20, 0x7F	; 127
    289a:	57 e4       	ldi	r21, 0x47	; 71
    289c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a0:	18 16       	cp	r1, r24
    28a2:	4c f5       	brge	.+82     	; 0x28f6 <main+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a4:	69 8d       	ldd	r22, Y+25	; 0x19
    28a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	51 e4       	ldi	r21, 0x41	; 65
    28b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9c 8b       	std	Y+20, r25	; 0x14
    28ca:	8b 8b       	std	Y+19, r24	; 0x13
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <main+0x460>
    28ce:	88 ec       	ldi	r24, 0xC8	; 200
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9a 8b       	std	Y+18, r25	; 0x12
    28d4:	89 8b       	std	Y+17, r24	; 0x11
    28d6:	89 89       	ldd	r24, Y+17	; 0x11
    28d8:	9a 89       	ldd	r25, Y+18	; 0x12
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <main+0x44e>
    28de:	9a 8b       	std	Y+18, r25	; 0x12
    28e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e2:	8b 89       	ldd	r24, Y+19	; 0x13
    28e4:	9c 89       	ldd	r25, Y+20	; 0x14
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ec:	8b 89       	ldd	r24, Y+19	; 0x13
    28ee:	9c 89       	ldd	r25, Y+20	; 0x14
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	69 f7       	brne	.-38     	; 0x28ce <main+0x442>
    28f4:	ec cd       	rjmp	.-1064   	; 0x24ce <main+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f6:	6d 89       	ldd	r22, Y+21	; 0x15
    28f8:	7e 89       	ldd	r23, Y+22	; 0x16
    28fa:	8f 89       	ldd	r24, Y+23	; 0x17
    28fc:	98 8d       	ldd	r25, Y+24	; 0x18
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9c 8b       	std	Y+20, r25	; 0x14
    2908:	8b 8b       	std	Y+19, r24	; 0x13
    290a:	8b 89       	ldd	r24, Y+19	; 0x13
    290c:	9c 89       	ldd	r25, Y+20	; 0x14
    290e:	98 8b       	std	Y+16, r25	; 0x10
    2910:	8f 87       	std	Y+15, r24	; 0x0f
    2912:	8f 85       	ldd	r24, Y+15	; 0x0f
    2914:	98 89       	ldd	r25, Y+16	; 0x10
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <main+0x48a>
    291a:	98 8b       	std	Y+16, r25	; 0x10
    291c:	8f 87       	std	Y+15, r24	; 0x0f
    291e:	d7 cd       	rjmp	.-1106   	; 0x24ce <main+0x42>
             {

             }
             _delay_ms(20); // Delay To Over Come The Pouncing Problems
         }
         else if(localPressedKey=='5')  /// Start
    2920:	fe 01       	movw	r30, r28
    2922:	e9 5b       	subi	r30, 0xB9	; 185
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 81       	ld	r24, Z
    2928:	85 33       	cpi	r24, 0x35	; 53
    292a:	09 f0       	breq	.+2      	; 0x292e <main+0x4a2>
    292c:	d0 cd       	rjmp	.-1120   	; 0x24ce <main+0x42>
         {


        	 startCount();
    292e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <startCount>

             while(HKPD_u8GetPressedKey()==localPressedKey)
    2932:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <HKPD_u8GetPressedKey>
    2936:	fe 01       	movw	r30, r28
    2938:	e9 5b       	subi	r30, 0xB9	; 185
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	90 81       	ld	r25, Z
    293e:	89 17       	cp	r24, r25
    2940:	c1 f3       	breq	.-16     	; 0x2932 <main+0x4a6>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	a0 ea       	ldi	r26, 0xA0	; 160
    2948:	b1 e4       	ldi	r27, 0x41	; 65
    294a:	8b 87       	std	Y+11, r24	; 0x0b
    294c:	9c 87       	std	Y+12, r25	; 0x0c
    294e:	ad 87       	std	Y+13, r26	; 0x0d
    2950:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2952:	6b 85       	ldd	r22, Y+11	; 0x0b
    2954:	7c 85       	ldd	r23, Y+12	; 0x0c
    2956:	8d 85       	ldd	r24, Y+13	; 0x0d
    2958:	9e 85       	ldd	r25, Y+14	; 0x0e
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	4a ef       	ldi	r20, 0xFA	; 250
    2960:	54 e4       	ldi	r21, 0x44	; 68
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	8f 83       	std	Y+7, r24	; 0x07
    296c:	98 87       	std	Y+8, r25	; 0x08
    296e:	a9 87       	std	Y+9, r26	; 0x09
    2970:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2972:	6f 81       	ldd	r22, Y+7	; 0x07
    2974:	78 85       	ldd	r23, Y+8	; 0x08
    2976:	89 85       	ldd	r24, Y+9	; 0x09
    2978:	9a 85       	ldd	r25, Y+10	; 0x0a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e8       	ldi	r20, 0x80	; 128
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2986:	88 23       	and	r24, r24
    2988:	2c f4       	brge	.+10     	; 0x2994 <main+0x508>
		__ticks = 1;
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
    2992:	3f c0       	rjmp	.+126    	; 0x2a12 <main+0x586>
	else if (__tmp > 65535)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	3f ef       	ldi	r19, 0xFF	; 255
    29a0:	4f e7       	ldi	r20, 0x7F	; 127
    29a2:	57 e4       	ldi	r21, 0x47	; 71
    29a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29a8:	18 16       	cp	r1, r24
    29aa:	4c f5       	brge	.+82     	; 0x29fe <main+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e2       	ldi	r20, 0x20	; 32
    29ba:	51 e4       	ldi	r21, 0x41	; 65
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9e 83       	std	Y+6, r25	; 0x06
    29d2:	8d 83       	std	Y+5, r24	; 0x05
    29d4:	0f c0       	rjmp	.+30     	; 0x29f4 <main+0x568>
    29d6:	88 ec       	ldi	r24, 0xC8	; 200
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	9c 83       	std	Y+4, r25	; 0x04
    29dc:	8b 83       	std	Y+3, r24	; 0x03
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <main+0x556>
    29e6:	9c 83       	std	Y+4, r25	; 0x04
    29e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	69 f7       	brne	.-38     	; 0x29d6 <main+0x54a>
    29fc:	68 cd       	rjmp	.-1328   	; 0x24ce <main+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2a00:	78 85       	ldd	r23, Y+8	; 0x08
    2a02:	89 85       	ldd	r24, Y+9	; 0x09
    2a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
    2a12:	8d 81       	ldd	r24, Y+5	; 0x05
    2a14:	9e 81       	ldd	r25, Y+6	; 0x06
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <main+0x592>
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	53 cd       	rjmp	.-1370   	; 0x24ce <main+0x42>

00002a28 <initSystem>:
	 }
	 return 0;
}

void initSystem(void)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	0f 92       	push	r0
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    LCD_VoidClearScreen();
    2a32:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <LCD_VoidClearScreen>
    LCD_VoidSendNum(hourLeft);
    2a36:	80 91 b0 00 	lds	r24, 0x00B0
    2a3a:	88 2f       	mov	r24, r24
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    LCD_VoidSendNum(hourRight);
    2a42:	80 91 b1 00 	lds	r24, 0x00B1
    2a46:	88 2f       	mov	r24, r24
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    LCD_VoidSendChar(':');
    2a4e:	8a e3       	ldi	r24, 0x3A	; 58
    2a50:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendChar>
    LCD_VoidSendNum(minuteLeft);
    2a54:	80 91 b2 00 	lds	r24, 0x00B2
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    LCD_VoidSendNum(minuteRight);
    2a60:	80 91 b3 00 	lds	r24, 0x00B3
    2a64:	88 2f       	mov	r24, r24
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    LCD_VoidSendChar(':');
    2a6c:	8a e3       	ldi	r24, 0x3A	; 58
    2a6e:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendChar>
    LCD_VoidSendNum(secondLeft);
    2a72:	80 91 b4 00 	lds	r24, 0x00B4
    2a76:	88 2f       	mov	r24, r24
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    LCD_VoidSendNum(secondRight);
    2a7e:	80 91 b5 00 	lds	r24, 0x00B5
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    /// get Current arrow Index
    u8 currentModeIndex=0;
    2a8a:	19 82       	std	Y+1, r1	; 0x01
    if(currentMode==0||currentMode==1)  currentModeIndex=currentMode;
    2a8c:	80 91 b6 00 	lds	r24, 0x00B6
    2a90:	88 23       	and	r24, r24
    2a92:	21 f0       	breq	.+8      	; 0x2a9c <initSystem+0x74>
    2a94:	80 91 b6 00 	lds	r24, 0x00B6
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	19 f4       	brne	.+6      	; 0x2aa2 <initSystem+0x7a>
    2a9c:	80 91 b6 00 	lds	r24, 0x00B6
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    if(currentMode==2||currentMode==3)  currentModeIndex=currentMode+1;
    2aa2:	80 91 b6 00 	lds	r24, 0x00B6
    2aa6:	82 30       	cpi	r24, 0x02	; 2
    2aa8:	21 f0       	breq	.+8      	; 0x2ab2 <initSystem+0x8a>
    2aaa:	80 91 b6 00 	lds	r24, 0x00B6
    2aae:	83 30       	cpi	r24, 0x03	; 3
    2ab0:	21 f4       	brne	.+8      	; 0x2aba <initSystem+0x92>
    2ab2:	80 91 b6 00 	lds	r24, 0x00B6
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    if(currentMode==4||currentMode==5)  currentModeIndex=currentMode+2;
    2aba:	80 91 b6 00 	lds	r24, 0x00B6
    2abe:	84 30       	cpi	r24, 0x04	; 4
    2ac0:	21 f0       	breq	.+8      	; 0x2aca <initSystem+0xa2>
    2ac2:	80 91 b6 00 	lds	r24, 0x00B6
    2ac6:	85 30       	cpi	r24, 0x05	; 5
    2ac8:	21 f4       	brne	.+8      	; 0x2ad2 <initSystem+0xaa>
    2aca:	80 91 b6 00 	lds	r24, 0x00B6
    2ace:	8e 5f       	subi	r24, 0xFE	; 254
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    
    LCD_VoidDisplaySpecialCharacter(0,1,currentModeIndex);
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	61 e0       	ldi	r22, 0x01	; 1
    2ad6:	49 81       	ldd	r20, Y+1	; 0x01
    2ad8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_VoidDisplaySpecialCharacter>

}
    2adc:	0f 90       	pop	r0
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <updateSystemCount>:
void updateSystemCount(void)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    LCD_VoidClearScreen();
    2aec:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <LCD_VoidClearScreen>
    LCD_VoidSendNum(hourLeft);
    2af0:	80 91 b0 00 	lds	r24, 0x00B0
    2af4:	88 2f       	mov	r24, r24
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    LCD_VoidSendNum(hourRight);
    2afc:	80 91 b1 00 	lds	r24, 0x00B1
    2b00:	88 2f       	mov	r24, r24
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    LCD_VoidSendChar(':');
    2b08:	8a e3       	ldi	r24, 0x3A	; 58
    2b0a:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendChar>
    LCD_VoidSendNum(minuteLeft);
    2b0e:	80 91 b2 00 	lds	r24, 0x00B2
    2b12:	88 2f       	mov	r24, r24
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    LCD_VoidSendNum(minuteRight);
    2b1a:	80 91 b3 00 	lds	r24, 0x00B3
    2b1e:	88 2f       	mov	r24, r24
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    LCD_VoidSendChar(':');
    2b26:	8a e3       	ldi	r24, 0x3A	; 58
    2b28:	0e 94 89 09 	call	0x1312	; 0x1312 <LCD_VoidSendChar>
    LCD_VoidSendNum(secondLeft);
    2b2c:	80 91 b4 00 	lds	r24, 0x00B4
    2b30:	88 2f       	mov	r24, r24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>
    LCD_VoidSendNum(secondRight);
    2b38:	80 91 b5 00 	lds	r24, 0x00B5
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_VoidSendNum>

    LCD_VoidGoToXY(1, 0);
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_VoidGoToXY>
    LCD_VoidSendString("Counting...");
    2b4c:	80 e6       	ldi	r24, 0x60	; 96
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <LCD_VoidSendString>

}
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <incrementCurrent>:
void incrementCurrent(void)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    if(currentMode==hourLeftMode)                hourLeft==6?hourLeft=0: hourLeft++;
    2b62:	80 91 b6 00 	lds	r24, 0x00B6
    2b66:	88 23       	and	r24, r24
    2b68:	69 f4       	brne	.+26     	; 0x2b84 <incrementCurrent+0x2a>
    2b6a:	80 91 b0 00 	lds	r24, 0x00B0
    2b6e:	86 30       	cpi	r24, 0x06	; 6
    2b70:	19 f4       	brne	.+6      	; 0x2b78 <incrementCurrent+0x1e>
    2b72:	10 92 b0 00 	sts	0x00B0, r1
    2b76:	5a c0       	rjmp	.+180    	; 0x2c2c <incrementCurrent+0xd2>
    2b78:	80 91 b0 00 	lds	r24, 0x00B0
    2b7c:	8f 5f       	subi	r24, 0xFF	; 255
    2b7e:	80 93 b0 00 	sts	0x00B0, r24
    2b82:	54 c0       	rjmp	.+168    	; 0x2c2c <incrementCurrent+0xd2>
    else if(currentMode==hourRightMode)          hourRight==6?hourRight=0: hourRight++;
    2b84:	80 91 b6 00 	lds	r24, 0x00B6
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	69 f4       	brne	.+26     	; 0x2ba6 <incrementCurrent+0x4c>
    2b8c:	80 91 b1 00 	lds	r24, 0x00B1
    2b90:	86 30       	cpi	r24, 0x06	; 6
    2b92:	19 f4       	brne	.+6      	; 0x2b9a <incrementCurrent+0x40>
    2b94:	10 92 b1 00 	sts	0x00B1, r1
    2b98:	49 c0       	rjmp	.+146    	; 0x2c2c <incrementCurrent+0xd2>
    2b9a:	80 91 b1 00 	lds	r24, 0x00B1
    2b9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ba0:	80 93 b1 00 	sts	0x00B1, r24
    2ba4:	43 c0       	rjmp	.+134    	; 0x2c2c <incrementCurrent+0xd2>
    else if(currentMode==minuteLeftMode)         minuteLeft==6?minuteLeft=0: minuteLeft++;
    2ba6:	80 91 b6 00 	lds	r24, 0x00B6
    2baa:	82 30       	cpi	r24, 0x02	; 2
    2bac:	69 f4       	brne	.+26     	; 0x2bc8 <incrementCurrent+0x6e>
    2bae:	80 91 b2 00 	lds	r24, 0x00B2
    2bb2:	86 30       	cpi	r24, 0x06	; 6
    2bb4:	19 f4       	brne	.+6      	; 0x2bbc <incrementCurrent+0x62>
    2bb6:	10 92 b2 00 	sts	0x00B2, r1
    2bba:	38 c0       	rjmp	.+112    	; 0x2c2c <incrementCurrent+0xd2>
    2bbc:	80 91 b2 00 	lds	r24, 0x00B2
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	80 93 b2 00 	sts	0x00B2, r24
    2bc6:	32 c0       	rjmp	.+100    	; 0x2c2c <incrementCurrent+0xd2>
    else if(currentMode==minuteRightMode)        minuteRight==6?minuteRight=0: minuteRight++;
    2bc8:	80 91 b6 00 	lds	r24, 0x00B6
    2bcc:	83 30       	cpi	r24, 0x03	; 3
    2bce:	69 f4       	brne	.+26     	; 0x2bea <incrementCurrent+0x90>
    2bd0:	80 91 b3 00 	lds	r24, 0x00B3
    2bd4:	86 30       	cpi	r24, 0x06	; 6
    2bd6:	19 f4       	brne	.+6      	; 0x2bde <incrementCurrent+0x84>
    2bd8:	10 92 b3 00 	sts	0x00B3, r1
    2bdc:	27 c0       	rjmp	.+78     	; 0x2c2c <incrementCurrent+0xd2>
    2bde:	80 91 b3 00 	lds	r24, 0x00B3
    2be2:	8f 5f       	subi	r24, 0xFF	; 255
    2be4:	80 93 b3 00 	sts	0x00B3, r24
    2be8:	21 c0       	rjmp	.+66     	; 0x2c2c <incrementCurrent+0xd2>
    else if(currentMode==secondLeftMode)         secondLeft==6?secondLeft=0: secondLeft++;
    2bea:	80 91 b6 00 	lds	r24, 0x00B6
    2bee:	84 30       	cpi	r24, 0x04	; 4
    2bf0:	69 f4       	brne	.+26     	; 0x2c0c <incrementCurrent+0xb2>
    2bf2:	80 91 b4 00 	lds	r24, 0x00B4
    2bf6:	86 30       	cpi	r24, 0x06	; 6
    2bf8:	19 f4       	brne	.+6      	; 0x2c00 <incrementCurrent+0xa6>
    2bfa:	10 92 b4 00 	sts	0x00B4, r1
    2bfe:	16 c0       	rjmp	.+44     	; 0x2c2c <incrementCurrent+0xd2>
    2c00:	80 91 b4 00 	lds	r24, 0x00B4
    2c04:	8f 5f       	subi	r24, 0xFF	; 255
    2c06:	80 93 b4 00 	sts	0x00B4, r24
    2c0a:	10 c0       	rjmp	.+32     	; 0x2c2c <incrementCurrent+0xd2>
    else if(currentMode==secondRightMode)        secondRight==6?secondRight=0: secondRight++;
    2c0c:	80 91 b6 00 	lds	r24, 0x00B6
    2c10:	85 30       	cpi	r24, 0x05	; 5
    2c12:	61 f4       	brne	.+24     	; 0x2c2c <incrementCurrent+0xd2>
    2c14:	80 91 b5 00 	lds	r24, 0x00B5
    2c18:	86 30       	cpi	r24, 0x06	; 6
    2c1a:	19 f4       	brne	.+6      	; 0x2c22 <incrementCurrent+0xc8>
    2c1c:	10 92 b5 00 	sts	0x00B5, r1
    2c20:	05 c0       	rjmp	.+10     	; 0x2c2c <incrementCurrent+0xd2>
    2c22:	80 91 b5 00 	lds	r24, 0x00B5
    2c26:	8f 5f       	subi	r24, 0xFF	; 255
    2c28:	80 93 b5 00 	sts	0x00B5, r24


    initSystem();
    2c2c:	0e 94 14 15 	call	0x2a28	; 0x2a28 <initSystem>

}
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <decrementCurrent>:
void decrementCurrent(void)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    if(currentMode==hourLeftMode)                hourLeft==0?hourLeft=6: hourLeft--;
    2c3e:	80 91 b6 00 	lds	r24, 0x00B6
    2c42:	88 23       	and	r24, r24
    2c44:	71 f4       	brne	.+28     	; 0x2c62 <decrementCurrent+0x2c>
    2c46:	80 91 b0 00 	lds	r24, 0x00B0
    2c4a:	88 23       	and	r24, r24
    2c4c:	21 f4       	brne	.+8      	; 0x2c56 <decrementCurrent+0x20>
    2c4e:	86 e0       	ldi	r24, 0x06	; 6
    2c50:	80 93 b0 00 	sts	0x00B0, r24
    2c54:	5f c0       	rjmp	.+190    	; 0x2d14 <decrementCurrent+0xde>
    2c56:	80 91 b0 00 	lds	r24, 0x00B0
    2c5a:	81 50       	subi	r24, 0x01	; 1
    2c5c:	80 93 b0 00 	sts	0x00B0, r24
    2c60:	59 c0       	rjmp	.+178    	; 0x2d14 <decrementCurrent+0xde>
    else if(currentMode==hourRightMode)          hourRight==0?hourRight=6: hourRight--;
    2c62:	80 91 b6 00 	lds	r24, 0x00B6
    2c66:	81 30       	cpi	r24, 0x01	; 1
    2c68:	71 f4       	brne	.+28     	; 0x2c86 <decrementCurrent+0x50>
    2c6a:	80 91 b1 00 	lds	r24, 0x00B1
    2c6e:	88 23       	and	r24, r24
    2c70:	21 f4       	brne	.+8      	; 0x2c7a <decrementCurrent+0x44>
    2c72:	86 e0       	ldi	r24, 0x06	; 6
    2c74:	80 93 b1 00 	sts	0x00B1, r24
    2c78:	4d c0       	rjmp	.+154    	; 0x2d14 <decrementCurrent+0xde>
    2c7a:	80 91 b1 00 	lds	r24, 0x00B1
    2c7e:	81 50       	subi	r24, 0x01	; 1
    2c80:	80 93 b1 00 	sts	0x00B1, r24
    2c84:	47 c0       	rjmp	.+142    	; 0x2d14 <decrementCurrent+0xde>
    else if(currentMode==minuteLeftMode)         minuteLeft==0?minuteLeft=6: minuteLeft--;
    2c86:	80 91 b6 00 	lds	r24, 0x00B6
    2c8a:	82 30       	cpi	r24, 0x02	; 2
    2c8c:	71 f4       	brne	.+28     	; 0x2caa <decrementCurrent+0x74>
    2c8e:	80 91 b2 00 	lds	r24, 0x00B2
    2c92:	88 23       	and	r24, r24
    2c94:	21 f4       	brne	.+8      	; 0x2c9e <decrementCurrent+0x68>
    2c96:	86 e0       	ldi	r24, 0x06	; 6
    2c98:	80 93 b2 00 	sts	0x00B2, r24
    2c9c:	3b c0       	rjmp	.+118    	; 0x2d14 <decrementCurrent+0xde>
    2c9e:	80 91 b2 00 	lds	r24, 0x00B2
    2ca2:	81 50       	subi	r24, 0x01	; 1
    2ca4:	80 93 b2 00 	sts	0x00B2, r24
    2ca8:	35 c0       	rjmp	.+106    	; 0x2d14 <decrementCurrent+0xde>
    else if(currentMode==minuteRightMode)        minuteRight==0?minuteRight=6: minuteRight--;
    2caa:	80 91 b6 00 	lds	r24, 0x00B6
    2cae:	83 30       	cpi	r24, 0x03	; 3
    2cb0:	71 f4       	brne	.+28     	; 0x2cce <decrementCurrent+0x98>
    2cb2:	80 91 b3 00 	lds	r24, 0x00B3
    2cb6:	88 23       	and	r24, r24
    2cb8:	21 f4       	brne	.+8      	; 0x2cc2 <decrementCurrent+0x8c>
    2cba:	86 e0       	ldi	r24, 0x06	; 6
    2cbc:	80 93 b3 00 	sts	0x00B3, r24
    2cc0:	29 c0       	rjmp	.+82     	; 0x2d14 <decrementCurrent+0xde>
    2cc2:	80 91 b3 00 	lds	r24, 0x00B3
    2cc6:	81 50       	subi	r24, 0x01	; 1
    2cc8:	80 93 b3 00 	sts	0x00B3, r24
    2ccc:	23 c0       	rjmp	.+70     	; 0x2d14 <decrementCurrent+0xde>
    else if(currentMode==secondLeftMode)         secondLeft==0?secondLeft=6: secondLeft--;
    2cce:	80 91 b6 00 	lds	r24, 0x00B6
    2cd2:	84 30       	cpi	r24, 0x04	; 4
    2cd4:	71 f4       	brne	.+28     	; 0x2cf2 <decrementCurrent+0xbc>
    2cd6:	80 91 b4 00 	lds	r24, 0x00B4
    2cda:	88 23       	and	r24, r24
    2cdc:	21 f4       	brne	.+8      	; 0x2ce6 <decrementCurrent+0xb0>
    2cde:	86 e0       	ldi	r24, 0x06	; 6
    2ce0:	80 93 b4 00 	sts	0x00B4, r24
    2ce4:	17 c0       	rjmp	.+46     	; 0x2d14 <decrementCurrent+0xde>
    2ce6:	80 91 b4 00 	lds	r24, 0x00B4
    2cea:	81 50       	subi	r24, 0x01	; 1
    2cec:	80 93 b4 00 	sts	0x00B4, r24
    2cf0:	11 c0       	rjmp	.+34     	; 0x2d14 <decrementCurrent+0xde>
    else if(currentMode==secondRightMode)        secondRight==0?secondRight=6: secondRight--;
    2cf2:	80 91 b6 00 	lds	r24, 0x00B6
    2cf6:	85 30       	cpi	r24, 0x05	; 5
    2cf8:	69 f4       	brne	.+26     	; 0x2d14 <decrementCurrent+0xde>
    2cfa:	80 91 b5 00 	lds	r24, 0x00B5
    2cfe:	88 23       	and	r24, r24
    2d00:	21 f4       	brne	.+8      	; 0x2d0a <decrementCurrent+0xd4>
    2d02:	86 e0       	ldi	r24, 0x06	; 6
    2d04:	80 93 b5 00 	sts	0x00B5, r24
    2d08:	05 c0       	rjmp	.+10     	; 0x2d14 <decrementCurrent+0xde>
    2d0a:	80 91 b5 00 	lds	r24, 0x00B5
    2d0e:	81 50       	subi	r24, 0x01	; 1
    2d10:	80 93 b5 00 	sts	0x00B5, r24

    initSystem();
    2d14:	0e 94 14 15 	call	0x2a28	; 0x2a28 <initSystem>
}
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <goToNext>:
void  goToNext(void)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
   if(currentMode<=secondRightMode) currentMode++;
    2d26:	80 91 b6 00 	lds	r24, 0x00B6
    2d2a:	86 30       	cpi	r24, 0x06	; 6
    2d2c:	28 f4       	brcc	.+10     	; 0x2d38 <goToNext+0x1a>
    2d2e:	80 91 b6 00 	lds	r24, 0x00B6
    2d32:	8f 5f       	subi	r24, 0xFF	; 255
    2d34:	80 93 b6 00 	sts	0x00B6, r24
    initSystem();
    2d38:	0e 94 14 15 	call	0x2a28	; 0x2a28 <initSystem>
}
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <goToPrevious>:
void goToPrevious(void)
{
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    if(currentMode>=0) currentMode--;
    2d4a:	80 91 b6 00 	lds	r24, 0x00B6
    2d4e:	81 50       	subi	r24, 0x01	; 1
    2d50:	80 93 b6 00 	sts	0x00B6, r24
    initSystem();
    2d54:	0e 94 14 15 	call	0x2a28	; 0x2a28 <initSystem>
}
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <startCount>:
void startCount(void)
{
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	c1 57       	subi	r28, 0x71	; 113
    2d6c:	d0 40       	sbci	r29, 0x00	; 0
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	e1 c3       	rjmp	.+1986   	; 0x353c <startCount+0x7de>

    while (secondRight||secondLeft||minuteLeft||minuteRight||hourLeft||hourRight)
    {


        if(secondRight>0) 
    2d7a:	80 91 b5 00 	lds	r24, 0x00B5
    2d7e:	88 23       	and	r24, r24
    2d80:	09 f4       	brne	.+2      	; 0x2d84 <startCount+0x26>
    2d82:	bc c0       	rjmp	.+376    	; 0x2efc <startCount+0x19e>
        {
            secondRight--;
    2d84:	80 91 b5 00 	lds	r24, 0x00B5
    2d88:	81 50       	subi	r24, 0x01	; 1
    2d8a:	80 93 b5 00 	sts	0x00B5, r24
            updateSystemCount();
    2d8e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <updateSystemCount>
    2d92:	fe 01       	movw	r30, r28
    2d94:	e3 59       	subi	r30, 0x93	; 147
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	aa e7       	ldi	r26, 0x7A	; 122
    2d9e:	b4 e4       	ldi	r27, 0x44	; 68
    2da0:	80 83       	st	Z, r24
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	a2 83       	std	Z+2, r26	; 0x02
    2da6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da8:	8e 01       	movw	r16, r28
    2daa:	07 59       	subi	r16, 0x97	; 151
    2dac:	1f 4f       	sbci	r17, 0xFF	; 255
    2dae:	fe 01       	movw	r30, r28
    2db0:	e3 59       	subi	r30, 0x93	; 147
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	4a ef       	ldi	r20, 0xFA	; 250
    2dc2:	54 e4       	ldi	r21, 0x44	; 68
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	f8 01       	movw	r30, r16
    2dce:	80 83       	st	Z, r24
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	a2 83       	std	Z+2, r26	; 0x02
    2dd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e7 59       	subi	r30, 0x97	; 151
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	60 81       	ld	r22, Z
    2dde:	71 81       	ldd	r23, Z+1	; 0x01
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	93 81       	ldd	r25, Z+3	; 0x03
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e8       	ldi	r20, 0x80	; 128
    2dea:	5f e3       	ldi	r21, 0x3F	; 63
    2dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2df0:	88 23       	and	r24, r24
    2df2:	44 f4       	brge	.+16     	; 0x2e04 <startCount+0xa6>
		__ticks = 1;
    2df4:	fe 01       	movw	r30, r28
    2df6:	e9 59       	subi	r30, 0x99	; 153
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	80 83       	st	Z, r24
    2e02:	64 c0       	rjmp	.+200    	; 0x2ecc <startCount+0x16e>
	else if (__tmp > 65535)
    2e04:	fe 01       	movw	r30, r28
    2e06:	e7 59       	subi	r30, 0x97	; 151
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	0c f0       	brlt	.+2      	; 0x2e24 <startCount+0xc6>
    2e22:	43 c0       	rjmp	.+134    	; 0x2eaa <startCount+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	fe 01       	movw	r30, r28
    2e26:	e3 59       	subi	r30, 0x93	; 147
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	60 81       	ld	r22, Z
    2e2c:	71 81       	ldd	r23, Z+1	; 0x01
    2e2e:	82 81       	ldd	r24, Z+2	; 0x02
    2e30:	93 81       	ldd	r25, Z+3	; 0x03
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e2       	ldi	r20, 0x20	; 32
    2e38:	51 e4       	ldi	r21, 0x41	; 65
    2e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	8e 01       	movw	r16, r28
    2e44:	09 59       	subi	r16, 0x99	; 153
    2e46:	1f 4f       	sbci	r17, 0xFF	; 255
    2e48:	bc 01       	movw	r22, r24
    2e4a:	cd 01       	movw	r24, r26
    2e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	f8 01       	movw	r30, r16
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
    2e5a:	1f c0       	rjmp	.+62     	; 0x2e9a <startCount+0x13c>
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	eb 59       	subi	r30, 0x9B	; 155
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	88 ec       	ldi	r24, 0xC8	; 200
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	eb 59       	subi	r30, 0x9B	; 155
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	91 81       	ldd	r25, Z+1	; 0x01
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <startCount+0x116>
    2e78:	fe 01       	movw	r30, r28
    2e7a:	eb 59       	subi	r30, 0x9B	; 155
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	91 83       	std	Z+1, r25	; 0x01
    2e80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e82:	de 01       	movw	r26, r28
    2e84:	a9 59       	subi	r26, 0x99	; 153
    2e86:	bf 4f       	sbci	r27, 0xFF	; 255
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e9 59       	subi	r30, 0x99	; 153
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	11 96       	adiw	r26, 0x01	; 1
    2e96:	9c 93       	st	X, r25
    2e98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e9 59       	subi	r30, 0x99	; 153
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	80 81       	ld	r24, Z
    2ea2:	91 81       	ldd	r25, Z+1	; 0x01
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	d1 f6       	brne	.-76     	; 0x2e5c <startCount+0xfe>
    2ea8:	49 c3       	rjmp	.+1682   	; 0x353c <startCount+0x7de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	8e 01       	movw	r16, r28
    2eac:	09 59       	subi	r16, 0x99	; 153
    2eae:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e7 59       	subi	r30, 0x97	; 151
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	60 81       	ld	r22, Z
    2eb8:	71 81       	ldd	r23, Z+1	; 0x01
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	de 01       	movw	r26, r28
    2ece:	ad 59       	subi	r26, 0x9D	; 157
    2ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e9 59       	subi	r30, 0x99	; 153
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	11 96       	adiw	r26, 0x01	; 1
    2ede:	9c 93       	st	X, r25
    2ee0:	8e 93       	st	-X, r24
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	ed 59       	subi	r30, 0x9D	; 157
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <startCount+0x18e>
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	ed 59       	subi	r30, 0x9D	; 157
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	80 83       	st	Z, r24
    2efa:	20 c3       	rjmp	.+1600   	; 0x353c <startCount+0x7de>
            _delay_ms(1000);
        }
        else if(secondLeft>0)
    2efc:	80 91 b4 00 	lds	r24, 0x00B4
    2f00:	88 23       	and	r24, r24
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <startCount+0x1a8>
    2f04:	bf c0       	rjmp	.+382    	; 0x3084 <startCount+0x326>
        {
            secondLeft--;
    2f06:	80 91 b4 00 	lds	r24, 0x00B4
    2f0a:	81 50       	subi	r24, 0x01	; 1
    2f0c:	80 93 b4 00 	sts	0x00B4, r24
            secondRight=9;
    2f10:	89 e0       	ldi	r24, 0x09	; 9
    2f12:	80 93 b5 00 	sts	0x00B5, r24
            updateSystemCount();
    2f16:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <updateSystemCount>
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e1 5a       	subi	r30, 0xA1	; 161
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	aa e7       	ldi	r26, 0x7A	; 122
    2f26:	b4 e4       	ldi	r27, 0x44	; 68
    2f28:	80 83       	st	Z, r24
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	a2 83       	std	Z+2, r26	; 0x02
    2f2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f30:	8e 01       	movw	r16, r28
    2f32:	05 5a       	subi	r16, 0xA5	; 165
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	fe 01       	movw	r30, r28
    2f38:	e1 5a       	subi	r30, 0xA1	; 161
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	60 81       	ld	r22, Z
    2f3e:	71 81       	ldd	r23, Z+1	; 0x01
    2f40:	82 81       	ldd	r24, Z+2	; 0x02
    2f42:	93 81       	ldd	r25, Z+3	; 0x03
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	4a ef       	ldi	r20, 0xFA	; 250
    2f4a:	54 e4       	ldi	r21, 0x44	; 68
    2f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	f8 01       	movw	r30, r16
    2f56:	80 83       	st	Z, r24
    2f58:	91 83       	std	Z+1, r25	; 0x01
    2f5a:	a2 83       	std	Z+2, r26	; 0x02
    2f5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e5 5a       	subi	r30, 0xA5	; 165
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	60 81       	ld	r22, Z
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e8       	ldi	r20, 0x80	; 128
    2f72:	5f e3       	ldi	r21, 0x3F	; 63
    2f74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f78:	88 23       	and	r24, r24
    2f7a:	44 f4       	brge	.+16     	; 0x2f8c <startCount+0x22e>
		__ticks = 1;
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	e7 5a       	subi	r30, 0xA7	; 167
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	91 83       	std	Z+1, r25	; 0x01
    2f88:	80 83       	st	Z, r24
    2f8a:	64 c0       	rjmp	.+200    	; 0x3054 <startCount+0x2f6>
	else if (__tmp > 65535)
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e5 5a       	subi	r30, 0xA5	; 165
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	60 81       	ld	r22, Z
    2f94:	71 81       	ldd	r23, Z+1	; 0x01
    2f96:	82 81       	ldd	r24, Z+2	; 0x02
    2f98:	93 81       	ldd	r25, Z+3	; 0x03
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	3f ef       	ldi	r19, 0xFF	; 255
    2f9e:	4f e7       	ldi	r20, 0x7F	; 127
    2fa0:	57 e4       	ldi	r21, 0x47	; 71
    2fa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fa6:	18 16       	cp	r1, r24
    2fa8:	0c f0       	brlt	.+2      	; 0x2fac <startCount+0x24e>
    2faa:	43 c0       	rjmp	.+134    	; 0x3032 <startCount+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fac:	fe 01       	movw	r30, r28
    2fae:	e1 5a       	subi	r30, 0xA1	; 161
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	60 81       	ld	r22, Z
    2fb4:	71 81       	ldd	r23, Z+1	; 0x01
    2fb6:	82 81       	ldd	r24, Z+2	; 0x02
    2fb8:	93 81       	ldd	r25, Z+3	; 0x03
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	8e 01       	movw	r16, r28
    2fcc:	07 5a       	subi	r16, 0xA7	; 167
    2fce:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	f8 01       	movw	r30, r16
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	80 83       	st	Z, r24
    2fe2:	1f c0       	rjmp	.+62     	; 0x3022 <startCount+0x2c4>
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e9 5a       	subi	r30, 0xA9	; 169
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	88 ec       	ldi	r24, 0xC8	; 200
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	80 83       	st	Z, r24
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	e9 5a       	subi	r30, 0xA9	; 169
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	80 81       	ld	r24, Z
    2ffa:	91 81       	ldd	r25, Z+1	; 0x01
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	f1 f7       	brne	.-4      	; 0x2ffc <startCount+0x29e>
    3000:	fe 01       	movw	r30, r28
    3002:	e9 5a       	subi	r30, 0xA9	; 169
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	91 83       	std	Z+1, r25	; 0x01
    3008:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300a:	de 01       	movw	r26, r28
    300c:	a7 5a       	subi	r26, 0xA7	; 167
    300e:	bf 4f       	sbci	r27, 0xFF	; 255
    3010:	fe 01       	movw	r30, r28
    3012:	e7 5a       	subi	r30, 0xA7	; 167
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	11 96       	adiw	r26, 0x01	; 1
    301e:	9c 93       	st	X, r25
    3020:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3022:	fe 01       	movw	r30, r28
    3024:	e7 5a       	subi	r30, 0xA7	; 167
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 81       	ld	r24, Z
    302a:	91 81       	ldd	r25, Z+1	; 0x01
    302c:	00 97       	sbiw	r24, 0x00	; 0
    302e:	d1 f6       	brne	.-76     	; 0x2fe4 <startCount+0x286>
    3030:	85 c2       	rjmp	.+1290   	; 0x353c <startCount+0x7de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3032:	8e 01       	movw	r16, r28
    3034:	07 5a       	subi	r16, 0xA7	; 167
    3036:	1f 4f       	sbci	r17, 0xFF	; 255
    3038:	fe 01       	movw	r30, r28
    303a:	e5 5a       	subi	r30, 0xA5	; 165
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	f8 01       	movw	r30, r16
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	80 83       	st	Z, r24
    3054:	de 01       	movw	r26, r28
    3056:	ab 5a       	subi	r26, 0xAB	; 171
    3058:	bf 4f       	sbci	r27, 0xFF	; 255
    305a:	fe 01       	movw	r30, r28
    305c:	e7 5a       	subi	r30, 0xA7	; 167
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	80 81       	ld	r24, Z
    3062:	91 81       	ldd	r25, Z+1	; 0x01
    3064:	11 96       	adiw	r26, 0x01	; 1
    3066:	9c 93       	st	X, r25
    3068:	8e 93       	st	-X, r24
    306a:	fe 01       	movw	r30, r28
    306c:	eb 5a       	subi	r30, 0xAB	; 171
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <startCount+0x316>
    3078:	fe 01       	movw	r30, r28
    307a:	eb 5a       	subi	r30, 0xAB	; 171
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
    3082:	5c c2       	rjmp	.+1208   	; 0x353c <startCount+0x7de>
            _delay_ms(1000);
        }
        else if(minuteRight>0)
    3084:	80 91 b3 00 	lds	r24, 0x00B3
    3088:	88 23       	and	r24, r24
    308a:	09 f4       	brne	.+2      	; 0x308e <startCount+0x330>
    308c:	bf c0       	rjmp	.+382    	; 0x320c <startCount+0x4ae>
        {
            minuteRight--;
    308e:	80 91 b3 00 	lds	r24, 0x00B3
    3092:	81 50       	subi	r24, 0x01	; 1
    3094:	80 93 b3 00 	sts	0x00B3, r24
            secondLeft=6;
    3098:	86 e0       	ldi	r24, 0x06	; 6
    309a:	80 93 b4 00 	sts	0x00B4, r24
            updateSystemCount();
    309e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <updateSystemCount>
    30a2:	fe 01       	movw	r30, r28
    30a4:	ef 5a       	subi	r30, 0xAF	; 175
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	aa e7       	ldi	r26, 0x7A	; 122
    30ae:	b4 e4       	ldi	r27, 0x44	; 68
    30b0:	80 83       	st	Z, r24
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	a2 83       	std	Z+2, r26	; 0x02
    30b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b8:	8e 01       	movw	r16, r28
    30ba:	03 5b       	subi	r16, 0xB3	; 179
    30bc:	1f 4f       	sbci	r17, 0xFF	; 255
    30be:	fe 01       	movw	r30, r28
    30c0:	ef 5a       	subi	r30, 0xAF	; 175
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	4a ef       	ldi	r20, 0xFA	; 250
    30d2:	54 e4       	ldi	r21, 0x44	; 68
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	f8 01       	movw	r30, r16
    30de:	80 83       	st	Z, r24
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	a2 83       	std	Z+2, r26	; 0x02
    30e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30e6:	fe 01       	movw	r30, r28
    30e8:	e3 5b       	subi	r30, 0xB3	; 179
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e8       	ldi	r20, 0x80	; 128
    30fa:	5f e3       	ldi	r21, 0x3F	; 63
    30fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3100:	88 23       	and	r24, r24
    3102:	44 f4       	brge	.+16     	; 0x3114 <startCount+0x3b6>
		__ticks = 1;
    3104:	fe 01       	movw	r30, r28
    3106:	e5 5b       	subi	r30, 0xB5	; 181
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	80 83       	st	Z, r24
    3112:	64 c0       	rjmp	.+200    	; 0x31dc <startCount+0x47e>
	else if (__tmp > 65535)
    3114:	fe 01       	movw	r30, r28
    3116:	e3 5b       	subi	r30, 0xB3	; 179
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	60 81       	ld	r22, Z
    311c:	71 81       	ldd	r23, Z+1	; 0x01
    311e:	82 81       	ldd	r24, Z+2	; 0x02
    3120:	93 81       	ldd	r25, Z+3	; 0x03
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	3f ef       	ldi	r19, 0xFF	; 255
    3126:	4f e7       	ldi	r20, 0x7F	; 127
    3128:	57 e4       	ldi	r21, 0x47	; 71
    312a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    312e:	18 16       	cp	r1, r24
    3130:	0c f0       	brlt	.+2      	; 0x3134 <startCount+0x3d6>
    3132:	43 c0       	rjmp	.+134    	; 0x31ba <startCount+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3134:	fe 01       	movw	r30, r28
    3136:	ef 5a       	subi	r30, 0xAF	; 175
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	60 81       	ld	r22, Z
    313c:	71 81       	ldd	r23, Z+1	; 0x01
    313e:	82 81       	ldd	r24, Z+2	; 0x02
    3140:	93 81       	ldd	r25, Z+3	; 0x03
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e2       	ldi	r20, 0x20	; 32
    3148:	51 e4       	ldi	r21, 0x41	; 65
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	8e 01       	movw	r16, r28
    3154:	05 5b       	subi	r16, 0xB5	; 181
    3156:	1f 4f       	sbci	r17, 0xFF	; 255
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	f8 01       	movw	r30, r16
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	80 83       	st	Z, r24
    316a:	1f c0       	rjmp	.+62     	; 0x31aa <startCount+0x44c>
    316c:	fe 01       	movw	r30, r28
    316e:	e7 5b       	subi	r30, 0xB7	; 183
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	88 ec       	ldi	r24, 0xC8	; 200
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	91 83       	std	Z+1, r25	; 0x01
    3178:	80 83       	st	Z, r24
    317a:	fe 01       	movw	r30, r28
    317c:	e7 5b       	subi	r30, 0xB7	; 183
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <startCount+0x426>
    3188:	fe 01       	movw	r30, r28
    318a:	e7 5b       	subi	r30, 0xB7	; 183
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	91 83       	std	Z+1, r25	; 0x01
    3190:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3192:	de 01       	movw	r26, r28
    3194:	a5 5b       	subi	r26, 0xB5	; 181
    3196:	bf 4f       	sbci	r27, 0xFF	; 255
    3198:	fe 01       	movw	r30, r28
    319a:	e5 5b       	subi	r30, 0xB5	; 181
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 81       	ld	r24, Z
    31a0:	91 81       	ldd	r25, Z+1	; 0x01
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	11 96       	adiw	r26, 0x01	; 1
    31a6:	9c 93       	st	X, r25
    31a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31aa:	fe 01       	movw	r30, r28
    31ac:	e5 5b       	subi	r30, 0xB5	; 181
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	80 81       	ld	r24, Z
    31b2:	91 81       	ldd	r25, Z+1	; 0x01
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	d1 f6       	brne	.-76     	; 0x316c <startCount+0x40e>
    31b8:	c1 c1       	rjmp	.+898    	; 0x353c <startCount+0x7de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	8e 01       	movw	r16, r28
    31bc:	05 5b       	subi	r16, 0xB5	; 181
    31be:	1f 4f       	sbci	r17, 0xFF	; 255
    31c0:	fe 01       	movw	r30, r28
    31c2:	e3 5b       	subi	r30, 0xB3	; 179
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	60 81       	ld	r22, Z
    31c8:	71 81       	ldd	r23, Z+1	; 0x01
    31ca:	82 81       	ldd	r24, Z+2	; 0x02
    31cc:	93 81       	ldd	r25, Z+3	; 0x03
    31ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	f8 01       	movw	r30, r16
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	80 83       	st	Z, r24
    31dc:	de 01       	movw	r26, r28
    31de:	a9 5b       	subi	r26, 0xB9	; 185
    31e0:	bf 4f       	sbci	r27, 0xFF	; 255
    31e2:	fe 01       	movw	r30, r28
    31e4:	e5 5b       	subi	r30, 0xB5	; 181
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	80 81       	ld	r24, Z
    31ea:	91 81       	ldd	r25, Z+1	; 0x01
    31ec:	11 96       	adiw	r26, 0x01	; 1
    31ee:	9c 93       	st	X, r25
    31f0:	8e 93       	st	-X, r24
    31f2:	fe 01       	movw	r30, r28
    31f4:	e9 5b       	subi	r30, 0xB9	; 185
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	80 81       	ld	r24, Z
    31fa:	91 81       	ldd	r25, Z+1	; 0x01
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	f1 f7       	brne	.-4      	; 0x31fc <startCount+0x49e>
    3200:	fe 01       	movw	r30, r28
    3202:	e9 5b       	subi	r30, 0xB9	; 185
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	80 83       	st	Z, r24
    320a:	98 c1       	rjmp	.+816    	; 0x353c <startCount+0x7de>
            _delay_ms(1000);
        }
        else if(minuteLeft>0)
    320c:	80 91 b2 00 	lds	r24, 0x00B2
    3210:	88 23       	and	r24, r24
    3212:	09 f4       	brne	.+2      	; 0x3216 <startCount+0x4b8>
    3214:	90 c0       	rjmp	.+288    	; 0x3336 <startCount+0x5d8>
        {
            minuteLeft--;
    3216:	80 91 b2 00 	lds	r24, 0x00B2
    321a:	81 50       	subi	r24, 0x01	; 1
    321c:	80 93 b2 00 	sts	0x00B2, r24
            minuteRight=9;
    3220:	89 e0       	ldi	r24, 0x09	; 9
    3222:	80 93 b3 00 	sts	0x00B3, r24
            updateSystemCount();
    3226:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <updateSystemCount>
    322a:	fe 01       	movw	r30, r28
    322c:	ed 5b       	subi	r30, 0xBD	; 189
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	aa e7       	ldi	r26, 0x7A	; 122
    3236:	b4 e4       	ldi	r27, 0x44	; 68
    3238:	80 83       	st	Z, r24
    323a:	91 83       	std	Z+1, r25	; 0x01
    323c:	a2 83       	std	Z+2, r26	; 0x02
    323e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3240:	8e 01       	movw	r16, r28
    3242:	01 5c       	subi	r16, 0xC1	; 193
    3244:	1f 4f       	sbci	r17, 0xFF	; 255
    3246:	fe 01       	movw	r30, r28
    3248:	ed 5b       	subi	r30, 0xBD	; 189
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	60 81       	ld	r22, Z
    324e:	71 81       	ldd	r23, Z+1	; 0x01
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	93 81       	ldd	r25, Z+3	; 0x03
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	4a ef       	ldi	r20, 0xFA	; 250
    325a:	54 e4       	ldi	r21, 0x44	; 68
    325c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	f8 01       	movw	r30, r16
    3266:	80 83       	st	Z, r24
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	a2 83       	std	Z+2, r26	; 0x02
    326c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    326e:	fe 01       	movw	r30, r28
    3270:	ff 96       	adiw	r30, 0x3f	; 63
    3272:	60 81       	ld	r22, Z
    3274:	71 81       	ldd	r23, Z+1	; 0x01
    3276:	82 81       	ldd	r24, Z+2	; 0x02
    3278:	93 81       	ldd	r25, Z+3	; 0x03
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	5f e3       	ldi	r21, 0x3F	; 63
    3282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3286:	88 23       	and	r24, r24
    3288:	2c f4       	brge	.+10     	; 0x3294 <startCount+0x536>
		__ticks = 1;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9e af       	std	Y+62, r25	; 0x3e
    3290:	8d af       	std	Y+61, r24	; 0x3d
    3292:	46 c0       	rjmp	.+140    	; 0x3320 <startCount+0x5c2>
	else if (__tmp > 65535)
    3294:	fe 01       	movw	r30, r28
    3296:	ff 96       	adiw	r30, 0x3f	; 63
    3298:	60 81       	ld	r22, Z
    329a:	71 81       	ldd	r23, Z+1	; 0x01
    329c:	82 81       	ldd	r24, Z+2	; 0x02
    329e:	93 81       	ldd	r25, Z+3	; 0x03
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	3f ef       	ldi	r19, 0xFF	; 255
    32a4:	4f e7       	ldi	r20, 0x7F	; 127
    32a6:	57 e4       	ldi	r21, 0x47	; 71
    32a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ac:	18 16       	cp	r1, r24
    32ae:	64 f5       	brge	.+88     	; 0x3308 <startCount+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b0:	fe 01       	movw	r30, r28
    32b2:	ed 5b       	subi	r30, 0xBD	; 189
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	60 81       	ld	r22, Z
    32b8:	71 81       	ldd	r23, Z+1	; 0x01
    32ba:	82 81       	ldd	r24, Z+2	; 0x02
    32bc:	93 81       	ldd	r25, Z+3	; 0x03
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e2       	ldi	r20, 0x20	; 32
    32c4:	51 e4       	ldi	r21, 0x41	; 65
    32c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	bc 01       	movw	r22, r24
    32d0:	cd 01       	movw	r24, r26
    32d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	9e af       	std	Y+62, r25	; 0x3e
    32dc:	8d af       	std	Y+61, r24	; 0x3d
    32de:	0f c0       	rjmp	.+30     	; 0x32fe <startCount+0x5a0>
    32e0:	88 ec       	ldi	r24, 0xC8	; 200
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	9c af       	std	Y+60, r25	; 0x3c
    32e6:	8b af       	std	Y+59, r24	; 0x3b
    32e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    32ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <startCount+0x58e>
    32f0:	9c af       	std	Y+60, r25	; 0x3c
    32f2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    32f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	9e af       	std	Y+62, r25	; 0x3e
    32fc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3300:	9e ad       	ldd	r25, Y+62	; 0x3e
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	69 f7       	brne	.-38     	; 0x32e0 <startCount+0x582>
    3306:	1a c1       	rjmp	.+564    	; 0x353c <startCount+0x7de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3308:	fe 01       	movw	r30, r28
    330a:	ff 96       	adiw	r30, 0x3f	; 63
    330c:	60 81       	ld	r22, Z
    330e:	71 81       	ldd	r23, Z+1	; 0x01
    3310:	82 81       	ldd	r24, Z+2	; 0x02
    3312:	93 81       	ldd	r25, Z+3	; 0x03
    3314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	9e af       	std	Y+62, r25	; 0x3e
    331e:	8d af       	std	Y+61, r24	; 0x3d
    3320:	8d ad       	ldd	r24, Y+61	; 0x3d
    3322:	9e ad       	ldd	r25, Y+62	; 0x3e
    3324:	9a af       	std	Y+58, r25	; 0x3a
    3326:	89 af       	std	Y+57, r24	; 0x39
    3328:	89 ad       	ldd	r24, Y+57	; 0x39
    332a:	9a ad       	ldd	r25, Y+58	; 0x3a
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <startCount+0x5ce>
    3330:	9a af       	std	Y+58, r25	; 0x3a
    3332:	89 af       	std	Y+57, r24	; 0x39
    3334:	03 c1       	rjmp	.+518    	; 0x353c <startCount+0x7de>
            _delay_ms(1000);
        }
        else if(hourRight>0)
    3336:	80 91 b1 00 	lds	r24, 0x00B1
    333a:	88 23       	and	r24, r24
    333c:	09 f4       	brne	.+2      	; 0x3340 <startCount+0x5e2>
    333e:	7d c0       	rjmp	.+250    	; 0x343a <startCount+0x6dc>
        {
            hourRight--;
    3340:	80 91 b1 00 	lds	r24, 0x00B1
    3344:	81 50       	subi	r24, 0x01	; 1
    3346:	80 93 b1 00 	sts	0x00B1, r24
            minuteLeft=6;
    334a:	86 e0       	ldi	r24, 0x06	; 6
    334c:	80 93 b2 00 	sts	0x00B2, r24
            updateSystemCount();
    3350:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <updateSystemCount>
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	aa e7       	ldi	r26, 0x7A	; 122
    335a:	b4 e4       	ldi	r27, 0x44	; 68
    335c:	8d ab       	std	Y+53, r24	; 0x35
    335e:	9e ab       	std	Y+54, r25	; 0x36
    3360:	af ab       	std	Y+55, r26	; 0x37
    3362:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3364:	6d a9       	ldd	r22, Y+53	; 0x35
    3366:	7e a9       	ldd	r23, Y+54	; 0x36
    3368:	8f a9       	ldd	r24, Y+55	; 0x37
    336a:	98 ad       	ldd	r25, Y+56	; 0x38
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	4a ef       	ldi	r20, 0xFA	; 250
    3372:	54 e4       	ldi	r21, 0x44	; 68
    3374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	89 ab       	std	Y+49, r24	; 0x31
    337e:	9a ab       	std	Y+50, r25	; 0x32
    3380:	ab ab       	std	Y+51, r26	; 0x33
    3382:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3384:	69 a9       	ldd	r22, Y+49	; 0x31
    3386:	7a a9       	ldd	r23, Y+50	; 0x32
    3388:	8b a9       	ldd	r24, Y+51	; 0x33
    338a:	9c a9       	ldd	r25, Y+52	; 0x34
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	40 e8       	ldi	r20, 0x80	; 128
    3392:	5f e3       	ldi	r21, 0x3F	; 63
    3394:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3398:	88 23       	and	r24, r24
    339a:	2c f4       	brge	.+10     	; 0x33a6 <startCount+0x648>
		__ticks = 1;
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	98 ab       	std	Y+48, r25	; 0x30
    33a2:	8f a7       	std	Y+47, r24	; 0x2f
    33a4:	3f c0       	rjmp	.+126    	; 0x3424 <startCount+0x6c6>
	else if (__tmp > 65535)
    33a6:	69 a9       	ldd	r22, Y+49	; 0x31
    33a8:	7a a9       	ldd	r23, Y+50	; 0x32
    33aa:	8b a9       	ldd	r24, Y+51	; 0x33
    33ac:	9c a9       	ldd	r25, Y+52	; 0x34
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	3f ef       	ldi	r19, 0xFF	; 255
    33b2:	4f e7       	ldi	r20, 0x7F	; 127
    33b4:	57 e4       	ldi	r21, 0x47	; 71
    33b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ba:	18 16       	cp	r1, r24
    33bc:	4c f5       	brge	.+82     	; 0x3410 <startCount+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33be:	6d a9       	ldd	r22, Y+53	; 0x35
    33c0:	7e a9       	ldd	r23, Y+54	; 0x36
    33c2:	8f a9       	ldd	r24, Y+55	; 0x37
    33c4:	98 ad       	ldd	r25, Y+56	; 0x38
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e2       	ldi	r20, 0x20	; 32
    33cc:	51 e4       	ldi	r21, 0x41	; 65
    33ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	bc 01       	movw	r22, r24
    33d8:	cd 01       	movw	r24, r26
    33da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	98 ab       	std	Y+48, r25	; 0x30
    33e4:	8f a7       	std	Y+47, r24	; 0x2f
    33e6:	0f c0       	rjmp	.+30     	; 0x3406 <startCount+0x6a8>
    33e8:	88 ec       	ldi	r24, 0xC8	; 200
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	9e a7       	std	Y+46, r25	; 0x2e
    33ee:	8d a7       	std	Y+45, r24	; 0x2d
    33f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    33f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <startCount+0x696>
    33f8:	9e a7       	std	Y+46, r25	; 0x2e
    33fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    33fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	98 ab       	std	Y+48, r25	; 0x30
    3404:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3406:	8f a5       	ldd	r24, Y+47	; 0x2f
    3408:	98 a9       	ldd	r25, Y+48	; 0x30
    340a:	00 97       	sbiw	r24, 0x00	; 0
    340c:	69 f7       	brne	.-38     	; 0x33e8 <startCount+0x68a>
    340e:	96 c0       	rjmp	.+300    	; 0x353c <startCount+0x7de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3410:	69 a9       	ldd	r22, Y+49	; 0x31
    3412:	7a a9       	ldd	r23, Y+50	; 0x32
    3414:	8b a9       	ldd	r24, Y+51	; 0x33
    3416:	9c a9       	ldd	r25, Y+52	; 0x34
    3418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	98 ab       	std	Y+48, r25	; 0x30
    3422:	8f a7       	std	Y+47, r24	; 0x2f
    3424:	8f a5       	ldd	r24, Y+47	; 0x2f
    3426:	98 a9       	ldd	r25, Y+48	; 0x30
    3428:	9c a7       	std	Y+44, r25	; 0x2c
    342a:	8b a7       	std	Y+43, r24	; 0x2b
    342c:	8b a5       	ldd	r24, Y+43	; 0x2b
    342e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	f1 f7       	brne	.-4      	; 0x3430 <startCount+0x6d2>
    3434:	9c a7       	std	Y+44, r25	; 0x2c
    3436:	8b a7       	std	Y+43, r24	; 0x2b
    3438:	81 c0       	rjmp	.+258    	; 0x353c <startCount+0x7de>
            _delay_ms(1000);
        }
        else if(hourLeft>0)
    343a:	80 91 b0 00 	lds	r24, 0x00B0
    343e:	88 23       	and	r24, r24
    3440:	09 f4       	brne	.+2      	; 0x3444 <startCount+0x6e6>
    3442:	7c c0       	rjmp	.+248    	; 0x353c <startCount+0x7de>
        {
            hourLeft--;
    3444:	80 91 b0 00 	lds	r24, 0x00B0
    3448:	81 50       	subi	r24, 0x01	; 1
    344a:	80 93 b0 00 	sts	0x00B0, r24
            hourRight=9;
    344e:	89 e0       	ldi	r24, 0x09	; 9
    3450:	80 93 b1 00 	sts	0x00B1, r24
            updateSystemCount();
    3454:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <updateSystemCount>
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	aa e7       	ldi	r26, 0x7A	; 122
    345e:	b4 e4       	ldi	r27, 0x44	; 68
    3460:	8f a3       	std	Y+39, r24	; 0x27
    3462:	98 a7       	std	Y+40, r25	; 0x28
    3464:	a9 a7       	std	Y+41, r26	; 0x29
    3466:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3468:	6f a1       	ldd	r22, Y+39	; 0x27
    346a:	78 a5       	ldd	r23, Y+40	; 0x28
    346c:	89 a5       	ldd	r24, Y+41	; 0x29
    346e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	4a ef       	ldi	r20, 0xFA	; 250
    3476:	54 e4       	ldi	r21, 0x44	; 68
    3478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	8b a3       	std	Y+35, r24	; 0x23
    3482:	9c a3       	std	Y+36, r25	; 0x24
    3484:	ad a3       	std	Y+37, r26	; 0x25
    3486:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3488:	6b a1       	ldd	r22, Y+35	; 0x23
    348a:	7c a1       	ldd	r23, Y+36	; 0x24
    348c:	8d a1       	ldd	r24, Y+37	; 0x25
    348e:	9e a1       	ldd	r25, Y+38	; 0x26
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	40 e8       	ldi	r20, 0x80	; 128
    3496:	5f e3       	ldi	r21, 0x3F	; 63
    3498:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    349c:	88 23       	and	r24, r24
    349e:	2c f4       	brge	.+10     	; 0x34aa <startCount+0x74c>
		__ticks = 1;
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	9a a3       	std	Y+34, r25	; 0x22
    34a6:	89 a3       	std	Y+33, r24	; 0x21
    34a8:	3f c0       	rjmp	.+126    	; 0x3528 <startCount+0x7ca>
	else if (__tmp > 65535)
    34aa:	6b a1       	ldd	r22, Y+35	; 0x23
    34ac:	7c a1       	ldd	r23, Y+36	; 0x24
    34ae:	8d a1       	ldd	r24, Y+37	; 0x25
    34b0:	9e a1       	ldd	r25, Y+38	; 0x26
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	3f ef       	ldi	r19, 0xFF	; 255
    34b6:	4f e7       	ldi	r20, 0x7F	; 127
    34b8:	57 e4       	ldi	r21, 0x47	; 71
    34ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34be:	18 16       	cp	r1, r24
    34c0:	4c f5       	brge	.+82     	; 0x3514 <startCount+0x7b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c2:	6f a1       	ldd	r22, Y+39	; 0x27
    34c4:	78 a5       	ldd	r23, Y+40	; 0x28
    34c6:	89 a5       	ldd	r24, Y+41	; 0x29
    34c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	40 e2       	ldi	r20, 0x20	; 32
    34d0:	51 e4       	ldi	r21, 0x41	; 65
    34d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	bc 01       	movw	r22, r24
    34dc:	cd 01       	movw	r24, r26
    34de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	9a a3       	std	Y+34, r25	; 0x22
    34e8:	89 a3       	std	Y+33, r24	; 0x21
    34ea:	0f c0       	rjmp	.+30     	; 0x350a <startCount+0x7ac>
    34ec:	88 ec       	ldi	r24, 0xC8	; 200
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	98 a3       	std	Y+32, r25	; 0x20
    34f2:	8f 8f       	std	Y+31, r24	; 0x1f
    34f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34f6:	98 a1       	ldd	r25, Y+32	; 0x20
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	f1 f7       	brne	.-4      	; 0x34f8 <startCount+0x79a>
    34fc:	98 a3       	std	Y+32, r25	; 0x20
    34fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3500:	89 a1       	ldd	r24, Y+33	; 0x21
    3502:	9a a1       	ldd	r25, Y+34	; 0x22
    3504:	01 97       	sbiw	r24, 0x01	; 1
    3506:	9a a3       	std	Y+34, r25	; 0x22
    3508:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350a:	89 a1       	ldd	r24, Y+33	; 0x21
    350c:	9a a1       	ldd	r25, Y+34	; 0x22
    350e:	00 97       	sbiw	r24, 0x00	; 0
    3510:	69 f7       	brne	.-38     	; 0x34ec <startCount+0x78e>
    3512:	14 c0       	rjmp	.+40     	; 0x353c <startCount+0x7de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3514:	6b a1       	ldd	r22, Y+35	; 0x23
    3516:	7c a1       	ldd	r23, Y+36	; 0x24
    3518:	8d a1       	ldd	r24, Y+37	; 0x25
    351a:	9e a1       	ldd	r25, Y+38	; 0x26
    351c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	9a a3       	std	Y+34, r25	; 0x22
    3526:	89 a3       	std	Y+33, r24	; 0x21
    3528:	89 a1       	ldd	r24, Y+33	; 0x21
    352a:	9a a1       	ldd	r25, Y+34	; 0x22
    352c:	9e 8f       	std	Y+30, r25	; 0x1e
    352e:	8d 8f       	std	Y+29, r24	; 0x1d
    3530:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3532:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <startCount+0x7d6>
    3538:	9e 8f       	std	Y+30, r25	; 0x1e
    353a:	8d 8f       	std	Y+29, r24	; 0x1d
    initSystem();
}
void startCount(void)
{

    while (secondRight||secondLeft||minuteLeft||minuteRight||hourLeft||hourRight)
    353c:	80 91 b5 00 	lds	r24, 0x00B5
    3540:	88 23       	and	r24, r24
    3542:	09 f0       	breq	.+2      	; 0x3546 <startCount+0x7e8>
    3544:	1a cc       	rjmp	.-1996   	; 0x2d7a <startCount+0x1c>
    3546:	80 91 b4 00 	lds	r24, 0x00B4
    354a:	88 23       	and	r24, r24
    354c:	09 f0       	breq	.+2      	; 0x3550 <startCount+0x7f2>
    354e:	15 cc       	rjmp	.-2006   	; 0x2d7a <startCount+0x1c>
    3550:	80 91 b2 00 	lds	r24, 0x00B2
    3554:	88 23       	and	r24, r24
    3556:	09 f0       	breq	.+2      	; 0x355a <startCount+0x7fc>
    3558:	10 cc       	rjmp	.-2016   	; 0x2d7a <startCount+0x1c>
    355a:	80 91 b3 00 	lds	r24, 0x00B3
    355e:	88 23       	and	r24, r24
    3560:	09 f0       	breq	.+2      	; 0x3564 <startCount+0x806>
    3562:	0b cc       	rjmp	.-2026   	; 0x2d7a <startCount+0x1c>
    3564:	80 91 b0 00 	lds	r24, 0x00B0
    3568:	88 23       	and	r24, r24
    356a:	09 f0       	breq	.+2      	; 0x356e <startCount+0x810>
    356c:	06 cc       	rjmp	.-2036   	; 0x2d7a <startCount+0x1c>
    356e:	80 91 b1 00 	lds	r24, 0x00B1
    3572:	88 23       	and	r24, r24
    3574:	09 f0       	breq	.+2      	; 0x3578 <startCount+0x81a>
    3576:	01 cc       	rjmp	.-2046   	; 0x2d7a <startCount+0x1c>


    }
    while(1)
    {
       u8 localPressedKey=HKPD_u8GetPressedKey();
    3578:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <HKPD_u8GetPressedKey>
    357c:	fe 01       	movw	r30, r28
    357e:	ef 58       	subi	r30, 0x8F	; 143
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 83       	st	Z, r24
        if(localPressedKey=='c')
    3584:	fe 01       	movw	r30, r28
    3586:	ef 58       	subi	r30, 0x8F	; 143
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	80 81       	ld	r24, Z
    358c:	83 36       	cpi	r24, 0x63	; 99
    358e:	89 f4       	brne	.+34     	; 0x35b2 <startCount+0x854>
        {
            MDIO_VoidSetPinValue(PORTD,PIN3,LOW);
    3590:	83 e0       	ldi	r24, 0x03	; 3
    3592:	63 e0       	ldi	r22, 0x03	; 3
    3594:	40 e0       	ldi	r20, 0x00	; 0
    3596:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
        LCD_VoidSendString("Count Finish");
    }



}
    359a:	cf 58       	subi	r28, 0x8F	; 143
    359c:	df 4f       	sbci	r29, 0xFF	; 255
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	de bf       	out	0x3e, r29	; 62
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	cf 91       	pop	r28
    35aa:	df 91       	pop	r29
    35ac:	1f 91       	pop	r17
    35ae:	0f 91       	pop	r16
    35b0:	08 95       	ret
        if(localPressedKey=='c')
        {
            MDIO_VoidSetPinValue(PORTD,PIN3,LOW);
            return;
        }
        MDIO_VoidSetPinValue(PORTD,PIN3,HIGH);
    35b2:	83 e0       	ldi	r24, 0x03	; 3
    35b4:	63 e0       	ldi	r22, 0x03	; 3
    35b6:	41 e0       	ldi	r20, 0x01	; 1
    35b8:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	aa ef       	ldi	r26, 0xFA	; 250
    35c2:	b3 e4       	ldi	r27, 0x43	; 67
    35c4:	89 8f       	std	Y+25, r24	; 0x19
    35c6:	9a 8f       	std	Y+26, r25	; 0x1a
    35c8:	ab 8f       	std	Y+27, r26	; 0x1b
    35ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35cc:	69 8d       	ldd	r22, Y+25	; 0x19
    35ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	4a ef       	ldi	r20, 0xFA	; 250
    35da:	54 e4       	ldi	r21, 0x44	; 68
    35dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	8d 8b       	std	Y+21, r24	; 0x15
    35e6:	9e 8b       	std	Y+22, r25	; 0x16
    35e8:	af 8b       	std	Y+23, r26	; 0x17
    35ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35ec:	6d 89       	ldd	r22, Y+21	; 0x15
    35ee:	7e 89       	ldd	r23, Y+22	; 0x16
    35f0:	8f 89       	ldd	r24, Y+23	; 0x17
    35f2:	98 8d       	ldd	r25, Y+24	; 0x18
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 e8       	ldi	r20, 0x80	; 128
    35fa:	5f e3       	ldi	r21, 0x3F	; 63
    35fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3600:	88 23       	and	r24, r24
    3602:	2c f4       	brge	.+10     	; 0x360e <startCount+0x8b0>
		__ticks = 1;
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	9c 8b       	std	Y+20, r25	; 0x14
    360a:	8b 8b       	std	Y+19, r24	; 0x13
    360c:	3f c0       	rjmp	.+126    	; 0x368c <startCount+0x92e>
	else if (__tmp > 65535)
    360e:	6d 89       	ldd	r22, Y+21	; 0x15
    3610:	7e 89       	ldd	r23, Y+22	; 0x16
    3612:	8f 89       	ldd	r24, Y+23	; 0x17
    3614:	98 8d       	ldd	r25, Y+24	; 0x18
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	3f ef       	ldi	r19, 0xFF	; 255
    361a:	4f e7       	ldi	r20, 0x7F	; 127
    361c:	57 e4       	ldi	r21, 0x47	; 71
    361e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3622:	18 16       	cp	r1, r24
    3624:	4c f5       	brge	.+82     	; 0x3678 <startCount+0x91a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3626:	69 8d       	ldd	r22, Y+25	; 0x19
    3628:	7a 8d       	ldd	r23, Y+26	; 0x1a
    362a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    362c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e2       	ldi	r20, 0x20	; 32
    3634:	51 e4       	ldi	r21, 0x41	; 65
    3636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	bc 01       	movw	r22, r24
    3640:	cd 01       	movw	r24, r26
    3642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	9c 8b       	std	Y+20, r25	; 0x14
    364c:	8b 8b       	std	Y+19, r24	; 0x13
    364e:	0f c0       	rjmp	.+30     	; 0x366e <startCount+0x910>
    3650:	88 ec       	ldi	r24, 0xC8	; 200
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9a 8b       	std	Y+18, r25	; 0x12
    3656:	89 8b       	std	Y+17, r24	; 0x11
    3658:	89 89       	ldd	r24, Y+17	; 0x11
    365a:	9a 89       	ldd	r25, Y+18	; 0x12
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <startCount+0x8fe>
    3660:	9a 8b       	std	Y+18, r25	; 0x12
    3662:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3664:	8b 89       	ldd	r24, Y+19	; 0x13
    3666:	9c 89       	ldd	r25, Y+20	; 0x14
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	9c 8b       	std	Y+20, r25	; 0x14
    366c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    366e:	8b 89       	ldd	r24, Y+19	; 0x13
    3670:	9c 89       	ldd	r25, Y+20	; 0x14
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	69 f7       	brne	.-38     	; 0x3650 <startCount+0x8f2>
    3676:	14 c0       	rjmp	.+40     	; 0x36a0 <startCount+0x942>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3678:	6d 89       	ldd	r22, Y+21	; 0x15
    367a:	7e 89       	ldd	r23, Y+22	; 0x16
    367c:	8f 89       	ldd	r24, Y+23	; 0x17
    367e:	98 8d       	ldd	r25, Y+24	; 0x18
    3680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	9c 8b       	std	Y+20, r25	; 0x14
    368a:	8b 8b       	std	Y+19, r24	; 0x13
    368c:	8b 89       	ldd	r24, Y+19	; 0x13
    368e:	9c 89       	ldd	r25, Y+20	; 0x14
    3690:	98 8b       	std	Y+16, r25	; 0x10
    3692:	8f 87       	std	Y+15, r24	; 0x0f
    3694:	8f 85       	ldd	r24, Y+15	; 0x0f
    3696:	98 89       	ldd	r25, Y+16	; 0x10
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <startCount+0x93a>
    369c:	98 8b       	std	Y+16, r25	; 0x10
    369e:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(500);
        MDIO_VoidSetPinValue(PORTD,PIN3,LOW);
    36a0:	83 e0       	ldi	r24, 0x03	; 3
    36a2:	63 e0       	ldi	r22, 0x03	; 3
    36a4:	40 e0       	ldi	r20, 0x00	; 0
    36a6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <MDIO_VoidSetPinValue>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	aa e7       	ldi	r26, 0x7A	; 122
    36b0:	b3 e4       	ldi	r27, 0x43	; 67
    36b2:	8b 87       	std	Y+11, r24	; 0x0b
    36b4:	9c 87       	std	Y+12, r25	; 0x0c
    36b6:	ad 87       	std	Y+13, r26	; 0x0d
    36b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    36bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36be:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	4a ef       	ldi	r20, 0xFA	; 250
    36c8:	54 e4       	ldi	r21, 0x44	; 68
    36ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	8f 83       	std	Y+7, r24	; 0x07
    36d4:	98 87       	std	Y+8, r25	; 0x08
    36d6:	a9 87       	std	Y+9, r26	; 0x09
    36d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36da:	6f 81       	ldd	r22, Y+7	; 0x07
    36dc:	78 85       	ldd	r23, Y+8	; 0x08
    36de:	89 85       	ldd	r24, Y+9	; 0x09
    36e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	40 e8       	ldi	r20, 0x80	; 128
    36e8:	5f e3       	ldi	r21, 0x3F	; 63
    36ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36ee:	88 23       	and	r24, r24
    36f0:	2c f4       	brge	.+10     	; 0x36fc <startCount+0x99e>
		__ticks = 1;
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	9e 83       	std	Y+6, r25	; 0x06
    36f8:	8d 83       	std	Y+5, r24	; 0x05
    36fa:	3f c0       	rjmp	.+126    	; 0x377a <startCount+0xa1c>
	else if (__tmp > 65535)
    36fc:	6f 81       	ldd	r22, Y+7	; 0x07
    36fe:	78 85       	ldd	r23, Y+8	; 0x08
    3700:	89 85       	ldd	r24, Y+9	; 0x09
    3702:	9a 85       	ldd	r25, Y+10	; 0x0a
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	3f ef       	ldi	r19, 0xFF	; 255
    3708:	4f e7       	ldi	r20, 0x7F	; 127
    370a:	57 e4       	ldi	r21, 0x47	; 71
    370c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3710:	18 16       	cp	r1, r24
    3712:	4c f5       	brge	.+82     	; 0x3766 <startCount+0xa08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3714:	6b 85       	ldd	r22, Y+11	; 0x0b
    3716:	7c 85       	ldd	r23, Y+12	; 0x0c
    3718:	8d 85       	ldd	r24, Y+13	; 0x0d
    371a:	9e 85       	ldd	r25, Y+14	; 0x0e
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	40 e2       	ldi	r20, 0x20	; 32
    3722:	51 e4       	ldi	r21, 0x41	; 65
    3724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	bc 01       	movw	r22, r24
    372e:	cd 01       	movw	r24, r26
    3730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	9e 83       	std	Y+6, r25	; 0x06
    373a:	8d 83       	std	Y+5, r24	; 0x05
    373c:	0f c0       	rjmp	.+30     	; 0x375c <startCount+0x9fe>
    373e:	88 ec       	ldi	r24, 0xC8	; 200
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	9c 83       	std	Y+4, r25	; 0x04
    3744:	8b 83       	std	Y+3, r24	; 0x03
    3746:	8b 81       	ldd	r24, Y+3	; 0x03
    3748:	9c 81       	ldd	r25, Y+4	; 0x04
    374a:	01 97       	sbiw	r24, 0x01	; 1
    374c:	f1 f7       	brne	.-4      	; 0x374a <startCount+0x9ec>
    374e:	9c 83       	std	Y+4, r25	; 0x04
    3750:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3752:	8d 81       	ldd	r24, Y+5	; 0x05
    3754:	9e 81       	ldd	r25, Y+6	; 0x06
    3756:	01 97       	sbiw	r24, 0x01	; 1
    3758:	9e 83       	std	Y+6, r25	; 0x06
    375a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    375c:	8d 81       	ldd	r24, Y+5	; 0x05
    375e:	9e 81       	ldd	r25, Y+6	; 0x06
    3760:	00 97       	sbiw	r24, 0x00	; 0
    3762:	69 f7       	brne	.-38     	; 0x373e <startCount+0x9e0>
    3764:	14 c0       	rjmp	.+40     	; 0x378e <startCount+0xa30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3766:	6f 81       	ldd	r22, Y+7	; 0x07
    3768:	78 85       	ldd	r23, Y+8	; 0x08
    376a:	89 85       	ldd	r24, Y+9	; 0x09
    376c:	9a 85       	ldd	r25, Y+10	; 0x0a
    376e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	9e 83       	std	Y+6, r25	; 0x06
    3778:	8d 83       	std	Y+5, r24	; 0x05
    377a:	8d 81       	ldd	r24, Y+5	; 0x05
    377c:	9e 81       	ldd	r25, Y+6	; 0x06
    377e:	9a 83       	std	Y+2, r25	; 0x02
    3780:	89 83       	std	Y+1, r24	; 0x01
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	9a 81       	ldd	r25, Y+2	; 0x02
    3786:	01 97       	sbiw	r24, 0x01	; 1
    3788:	f1 f7       	brne	.-4      	; 0x3786 <startCount+0xa28>
    378a:	9a 83       	std	Y+2, r25	; 0x02
    378c:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(250);
        LCD_VoidClearScreen();
    378e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <LCD_VoidClearScreen>
        LCD_VoidSendString("Count Finish");
    3792:	8c e6       	ldi	r24, 0x6C	; 108
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <LCD_VoidSendString>
    379a:	ee ce       	rjmp	.-548    	; 0x3578 <startCount+0x81a>

0000379c <stack_create>:
    int top;
    int size;
    item *data_array;
};

Stack stack_create(int size) {
    379c:	df 93       	push	r29
    379e:	cf 93       	push	r28
    37a0:	00 d0       	rcall	.+0      	; 0x37a2 <stack_create+0x6>
    37a2:	00 d0       	rcall	.+0      	; 0x37a4 <stack_create+0x8>
    37a4:	00 d0       	rcall	.+0      	; 0x37a6 <stack_create+0xa>
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
    37aa:	9c 83       	std	Y+4, r25	; 0x04
    37ac:	8b 83       	std	Y+3, r24	; 0x03
    Stack s = malloc(sizeof(struct stack));
    37ae:	86 e0       	ldi	r24, 0x06	; 6
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <malloc>
    37b6:	9a 83       	std	Y+2, r25	; 0x02
    37b8:	89 83       	std	Y+1, r24	; 0x01
    if(s == NULL) {
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	9a 81       	ldd	r25, Y+2	; 0x02
    37be:	00 97       	sbiw	r24, 0x00	; 0
    37c0:	19 f4       	brne	.+6      	; 0x37c8 <stack_create+0x2c>
        return NULL;
    37c2:	1e 82       	std	Y+6, r1	; 0x06
    37c4:	1d 82       	std	Y+5, r1	; 0x05
    37c6:	21 c0       	rjmp	.+66     	; 0x380a <stack_create+0x6e>
    }

    // create data array
    s->data_array = malloc(sizeof(int) * size);
    37c8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ca:	9c 81       	ldd	r25, Y+4	; 0x04
    37cc:	88 0f       	add	r24, r24
    37ce:	99 1f       	adc	r25, r25
    37d0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <malloc>
    37d4:	e9 81       	ldd	r30, Y+1	; 0x01
    37d6:	fa 81       	ldd	r31, Y+2	; 0x02
    37d8:	95 83       	std	Z+5, r25	; 0x05
    37da:	84 83       	std	Z+4, r24	; 0x04
    if(s->data_array == NULL) {
    37dc:	e9 81       	ldd	r30, Y+1	; 0x01
    37de:	fa 81       	ldd	r31, Y+2	; 0x02
    37e0:	84 81       	ldd	r24, Z+4	; 0x04
    37e2:	95 81       	ldd	r25, Z+5	; 0x05
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	19 f4       	brne	.+6      	; 0x37ee <stack_create+0x52>
        return NULL;
    37e8:	1e 82       	std	Y+6, r1	; 0x06
    37ea:	1d 82       	std	Y+5, r1	; 0x05
    37ec:	0e c0       	rjmp	.+28     	; 0x380a <stack_create+0x6e>
    }

    s->top = 0;
    37ee:	e9 81       	ldd	r30, Y+1	; 0x01
    37f0:	fa 81       	ldd	r31, Y+2	; 0x02
    37f2:	11 82       	std	Z+1, r1	; 0x01
    37f4:	10 82       	st	Z, r1
    s->size = size;
    37f6:	e9 81       	ldd	r30, Y+1	; 0x01
    37f8:	fa 81       	ldd	r31, Y+2	; 0x02
    37fa:	8b 81       	ldd	r24, Y+3	; 0x03
    37fc:	9c 81       	ldd	r25, Y+4	; 0x04
    37fe:	93 83       	std	Z+3, r25	; 0x03
    3800:	82 83       	std	Z+2, r24	; 0x02
    return s;
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	9a 81       	ldd	r25, Y+2	; 0x02
    3806:	9e 83       	std	Y+6, r25	; 0x06
    3808:	8d 83       	std	Y+5, r24	; 0x05
    380a:	8d 81       	ldd	r24, Y+5	; 0x05
    380c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    380e:	26 96       	adiw	r28, 0x06	; 6
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <stack_println>:

void stack_println(Stack s) {
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	00 d0       	rcall	.+0      	; 0x3826 <stack_println+0x6>
    3826:	00 d0       	rcall	.+0      	; 0x3828 <stack_println+0x8>
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62
    382c:	9c 83       	std	Y+4, r25	; 0x04
    382e:	8b 83       	std	Y+3, r24	; 0x03
    for(int i = 0; i < s->top; i++) {
    3830:	1a 82       	std	Y+2, r1	; 0x02
    3832:	19 82       	std	Y+1, r1	; 0x01
    3834:	22 c0       	rjmp	.+68     	; 0x387a <stack_println+0x5a>
        printf("%c \n", s->data_array[i]);
    3836:	eb 81       	ldd	r30, Y+3	; 0x03
    3838:	fc 81       	ldd	r31, Y+4	; 0x04
    383a:	24 81       	ldd	r18, Z+4	; 0x04
    383c:	35 81       	ldd	r19, Z+5	; 0x05
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	9a 81       	ldd	r25, Y+2	; 0x02
    3842:	f9 01       	movw	r30, r18
    3844:	e8 0f       	add	r30, r24
    3846:	f9 1f       	adc	r31, r25
    3848:	80 81       	ld	r24, Z
    384a:	28 2f       	mov	r18, r24
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	00 d0       	rcall	.+0      	; 0x3850 <stack_println+0x30>
    3850:	00 d0       	rcall	.+0      	; 0x3852 <stack_println+0x32>
    3852:	ed b7       	in	r30, 0x3d	; 61
    3854:	fe b7       	in	r31, 0x3e	; 62
    3856:	31 96       	adiw	r30, 0x01	; 1
    3858:	89 e7       	ldi	r24, 0x79	; 121
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	91 83       	std	Z+1, r25	; 0x01
    385e:	80 83       	st	Z, r24
    3860:	33 83       	std	Z+3, r19	; 0x03
    3862:	22 83       	std	Z+2, r18	; 0x02
    3864:	0e 94 76 1e 	call	0x3cec	; 0x3cec <printf>
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    s->size = size;
    return s;
}

void stack_println(Stack s) {
    for(int i = 0; i < s->top; i++) {
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	9a 81       	ldd	r25, Y+2	; 0x02
    3874:	01 96       	adiw	r24, 0x01	; 1
    3876:	9a 83       	std	Y+2, r25	; 0x02
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	eb 81       	ldd	r30, Y+3	; 0x03
    387c:	fc 81       	ldd	r31, Y+4	; 0x04
    387e:	20 81       	ld	r18, Z
    3880:	31 81       	ldd	r19, Z+1	; 0x01
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	9a 81       	ldd	r25, Y+2	; 0x02
    3886:	82 17       	cp	r24, r18
    3888:	93 07       	cpc	r25, r19
    388a:	ac f2       	brlt	.-86     	; 0x3836 <stack_println+0x16>
        printf("%c \n", s->data_array[i]);
    }

    printf("\n");
    388c:	8a e0       	ldi	r24, 0x0A	; 10
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <putchar>
}
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	08 95       	ret

000038a2 <stack_is_full>:

bool stack_is_full(Stack s) {
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	00 d0       	rcall	.+0      	; 0x38a8 <stack_is_full+0x6>
    38a8:	0f 92       	push	r0
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	9a 83       	std	Y+2, r25	; 0x02
    38b0:	89 83       	std	Y+1, r24	; 0x01
    return s->top == s->size;
    38b2:	e9 81       	ldd	r30, Y+1	; 0x01
    38b4:	fa 81       	ldd	r31, Y+2	; 0x02
    38b6:	20 81       	ld	r18, Z
    38b8:	31 81       	ldd	r19, Z+1	; 0x01
    38ba:	e9 81       	ldd	r30, Y+1	; 0x01
    38bc:	fa 81       	ldd	r31, Y+2	; 0x02
    38be:	82 81       	ldd	r24, Z+2	; 0x02
    38c0:	93 81       	ldd	r25, Z+3	; 0x03
    38c2:	1b 82       	std	Y+3, r1	; 0x03
    38c4:	28 17       	cp	r18, r24
    38c6:	39 07       	cpc	r19, r25
    38c8:	11 f4       	brne	.+4      	; 0x38ce <stack_is_full+0x2c>
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	8b 83       	std	Y+3, r24	; 0x03
    38ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    38d0:	0f 90       	pop	r0
    38d2:	0f 90       	pop	r0
    38d4:	0f 90       	pop	r0
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	08 95       	ret

000038dc <stack_is_empty>:

bool stack_is_empty(Stack s) {
    38dc:	df 93       	push	r29
    38de:	cf 93       	push	r28
    38e0:	00 d0       	rcall	.+0      	; 0x38e2 <stack_is_empty+0x6>
    38e2:	0f 92       	push	r0
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
    38e8:	9a 83       	std	Y+2, r25	; 0x02
    38ea:	89 83       	std	Y+1, r24	; 0x01
    return s->top == 0;
    38ec:	e9 81       	ldd	r30, Y+1	; 0x01
    38ee:	fa 81       	ldd	r31, Y+2	; 0x02
    38f0:	80 81       	ld	r24, Z
    38f2:	91 81       	ldd	r25, Z+1	; 0x01
    38f4:	1b 82       	std	Y+3, r1	; 0x03
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	11 f4       	brne	.+4      	; 0x38fe <stack_is_empty+0x22>
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	8b 83       	std	Y+3, r24	; 0x03
    38fe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	cf 91       	pop	r28
    3908:	df 91       	pop	r29
    390a:	08 95       	ret

0000390c <stack_push>:

bool stack_push(Stack s, item data) {
    390c:	df 93       	push	r29
    390e:	cf 93       	push	r28
    3910:	00 d0       	rcall	.+0      	; 0x3912 <stack_push+0x6>
    3912:	00 d0       	rcall	.+0      	; 0x3914 <stack_push+0x8>
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	9a 83       	std	Y+2, r25	; 0x02
    391a:	89 83       	std	Y+1, r24	; 0x01
    391c:	6b 83       	std	Y+3, r22	; 0x03
    if(stack_is_full(s)) {
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	9a 81       	ldd	r25, Y+2	; 0x02
    3922:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <stack_is_full>
    3926:	88 23       	and	r24, r24
    3928:	11 f0       	breq	.+4      	; 0x392e <stack_push+0x22>
        return false;
    392a:	1c 82       	std	Y+4, r1	; 0x04
    392c:	16 c0       	rjmp	.+44     	; 0x395a <stack_push+0x4e>
    }

    s->data_array[s->top++] = data;
    392e:	e9 81       	ldd	r30, Y+1	; 0x01
    3930:	fa 81       	ldd	r31, Y+2	; 0x02
    3932:	44 81       	ldd	r20, Z+4	; 0x04
    3934:	55 81       	ldd	r21, Z+5	; 0x05
    3936:	e9 81       	ldd	r30, Y+1	; 0x01
    3938:	fa 81       	ldd	r31, Y+2	; 0x02
    393a:	20 81       	ld	r18, Z
    393c:	31 81       	ldd	r19, Z+1	; 0x01
    393e:	c9 01       	movw	r24, r18
    3940:	fa 01       	movw	r30, r20
    3942:	e8 0f       	add	r30, r24
    3944:	f9 1f       	adc	r31, r25
    3946:	8b 81       	ldd	r24, Y+3	; 0x03
    3948:	80 83       	st	Z, r24
    394a:	c9 01       	movw	r24, r18
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	e9 81       	ldd	r30, Y+1	; 0x01
    3950:	fa 81       	ldd	r31, Y+2	; 0x02
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	80 83       	st	Z, r24
    return true;
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	8c 83       	std	Y+4, r24	; 0x04
    395a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    395c:	0f 90       	pop	r0
    395e:	0f 90       	pop	r0
    3960:	0f 90       	pop	r0
    3962:	0f 90       	pop	r0
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <stack_pop>:

item stack_pop(Stack s) {
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	00 d0       	rcall	.+0      	; 0x3970 <stack_pop+0x6>
    3970:	0f 92       	push	r0
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
    3976:	9a 83       	std	Y+2, r25	; 0x02
    3978:	89 83       	std	Y+1, r24	; 0x01
    if(stack_is_empty(s)) {
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	9a 81       	ldd	r25, Y+2	; 0x02
    397e:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <stack_is_empty>
    3982:	88 23       	and	r24, r24
    3984:	11 f0       	breq	.+4      	; 0x398a <stack_pop+0x20>
        return 0;
    3986:	1b 82       	std	Y+3, r1	; 0x03
    3988:	16 c0       	rjmp	.+44     	; 0x39b6 <stack_pop+0x4c>
    }

    return s->data_array[--s->top];
    398a:	e9 81       	ldd	r30, Y+1	; 0x01
    398c:	fa 81       	ldd	r31, Y+2	; 0x02
    398e:	24 81       	ldd	r18, Z+4	; 0x04
    3990:	35 81       	ldd	r19, Z+5	; 0x05
    3992:	e9 81       	ldd	r30, Y+1	; 0x01
    3994:	fa 81       	ldd	r31, Y+2	; 0x02
    3996:	80 81       	ld	r24, Z
    3998:	91 81       	ldd	r25, Z+1	; 0x01
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	e9 81       	ldd	r30, Y+1	; 0x01
    399e:	fa 81       	ldd	r31, Y+2	; 0x02
    39a0:	91 83       	std	Z+1, r25	; 0x01
    39a2:	80 83       	st	Z, r24
    39a4:	e9 81       	ldd	r30, Y+1	; 0x01
    39a6:	fa 81       	ldd	r31, Y+2	; 0x02
    39a8:	80 81       	ld	r24, Z
    39aa:	91 81       	ldd	r25, Z+1	; 0x01
    39ac:	f9 01       	movw	r30, r18
    39ae:	e8 0f       	add	r30, r24
    39b0:	f9 1f       	adc	r31, r25
    39b2:	80 81       	ld	r24, Z
    39b4:	8b 83       	std	Y+3, r24	; 0x03
    39b6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	cf 91       	pop	r28
    39c0:	df 91       	pop	r29
    39c2:	08 95       	ret

000039c4 <stack_top>:
item stack_top(Stack s) {
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	00 d0       	rcall	.+0      	; 0x39ca <stack_top+0x6>
    39ca:	0f 92       	push	r0
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	9a 83       	std	Y+2, r25	; 0x02
    39d2:	89 83       	std	Y+1, r24	; 0x01
    if(stack_is_empty(s)) {
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	9a 81       	ldd	r25, Y+2	; 0x02
    39d8:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <stack_is_empty>
    39dc:	88 23       	and	r24, r24
    39de:	11 f0       	breq	.+4      	; 0x39e4 <stack_top+0x20>
        return 0;
    39e0:	1b 82       	std	Y+3, r1	; 0x03
    39e2:	0d c0       	rjmp	.+26     	; 0x39fe <stack_top+0x3a>
    }

    return s->data_array[s->top];
    39e4:	e9 81       	ldd	r30, Y+1	; 0x01
    39e6:	fa 81       	ldd	r31, Y+2	; 0x02
    39e8:	24 81       	ldd	r18, Z+4	; 0x04
    39ea:	35 81       	ldd	r19, Z+5	; 0x05
    39ec:	e9 81       	ldd	r30, Y+1	; 0x01
    39ee:	fa 81       	ldd	r31, Y+2	; 0x02
    39f0:	80 81       	ld	r24, Z
    39f2:	91 81       	ldd	r25, Z+1	; 0x01
    39f4:	f9 01       	movw	r30, r18
    39f6:	e8 0f       	add	r30, r24
    39f8:	f9 1f       	adc	r31, r25
    39fa:	80 81       	ld	r24, Z
    39fc:	8b 83       	std	Y+3, r24	; 0x03
    39fe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3a00:	0f 90       	pop	r0
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <stack_make_empty>:
void stack_make_empty(Stack s) {
    3a0c:	df 93       	push	r29
    3a0e:	cf 93       	push	r28
    3a10:	00 d0       	rcall	.+0      	; 0x3a12 <stack_make_empty+0x6>
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	9a 83       	std	Y+2, r25	; 0x02
    3a18:	89 83       	std	Y+1, r24	; 0x01
    s->top = 0;
    3a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a1e:	11 82       	std	Z+1, r1	; 0x01
    3a20:	10 82       	st	Z, r1
    return;
}
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	cf 91       	pop	r28
    3a28:	df 91       	pop	r29
    3a2a:	08 95       	ret

00003a2c <stack_len>:

int stack_len(Stack s) {
    3a2c:	df 93       	push	r29
    3a2e:	cf 93       	push	r28
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <stack_len+0x6>
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	9a 83       	std	Y+2, r25	; 0x02
    3a38:	89 83       	std	Y+1, r24	; 0x01
    return s->top;
    3a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a3e:	80 81       	ld	r24, Z
    3a40:	91 81       	ldd	r25, Z+1	; 0x01
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	08 95       	ret

00003a4c <__udivmodhi4>:
    3a4c:	aa 1b       	sub	r26, r26
    3a4e:	bb 1b       	sub	r27, r27
    3a50:	51 e1       	ldi	r21, 0x11	; 17
    3a52:	07 c0       	rjmp	.+14     	; 0x3a62 <__udivmodhi4_ep>

00003a54 <__udivmodhi4_loop>:
    3a54:	aa 1f       	adc	r26, r26
    3a56:	bb 1f       	adc	r27, r27
    3a58:	a6 17       	cp	r26, r22
    3a5a:	b7 07       	cpc	r27, r23
    3a5c:	10 f0       	brcs	.+4      	; 0x3a62 <__udivmodhi4_ep>
    3a5e:	a6 1b       	sub	r26, r22
    3a60:	b7 0b       	sbc	r27, r23

00003a62 <__udivmodhi4_ep>:
    3a62:	88 1f       	adc	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	5a 95       	dec	r21
    3a68:	a9 f7       	brne	.-22     	; 0x3a54 <__udivmodhi4_loop>
    3a6a:	80 95       	com	r24
    3a6c:	90 95       	com	r25
    3a6e:	bc 01       	movw	r22, r24
    3a70:	cd 01       	movw	r24, r26
    3a72:	08 95       	ret

00003a74 <__prologue_saves__>:
    3a74:	2f 92       	push	r2
    3a76:	3f 92       	push	r3
    3a78:	4f 92       	push	r4
    3a7a:	5f 92       	push	r5
    3a7c:	6f 92       	push	r6
    3a7e:	7f 92       	push	r7
    3a80:	8f 92       	push	r8
    3a82:	9f 92       	push	r9
    3a84:	af 92       	push	r10
    3a86:	bf 92       	push	r11
    3a88:	cf 92       	push	r12
    3a8a:	df 92       	push	r13
    3a8c:	ef 92       	push	r14
    3a8e:	ff 92       	push	r15
    3a90:	0f 93       	push	r16
    3a92:	1f 93       	push	r17
    3a94:	cf 93       	push	r28
    3a96:	df 93       	push	r29
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62
    3a9c:	ca 1b       	sub	r28, r26
    3a9e:	db 0b       	sbc	r29, r27
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	f8 94       	cli
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	09 94       	ijmp

00003aac <__epilogue_restores__>:
    3aac:	2a 88       	ldd	r2, Y+18	; 0x12
    3aae:	39 88       	ldd	r3, Y+17	; 0x11
    3ab0:	48 88       	ldd	r4, Y+16	; 0x10
    3ab2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ab4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ab6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ab8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3aba:	9b 84       	ldd	r9, Y+11	; 0x0b
    3abc:	aa 84       	ldd	r10, Y+10	; 0x0a
    3abe:	b9 84       	ldd	r11, Y+9	; 0x09
    3ac0:	c8 84       	ldd	r12, Y+8	; 0x08
    3ac2:	df 80       	ldd	r13, Y+7	; 0x07
    3ac4:	ee 80       	ldd	r14, Y+6	; 0x06
    3ac6:	fd 80       	ldd	r15, Y+5	; 0x05
    3ac8:	0c 81       	ldd	r16, Y+4	; 0x04
    3aca:	1b 81       	ldd	r17, Y+3	; 0x03
    3acc:	aa 81       	ldd	r26, Y+2	; 0x02
    3ace:	b9 81       	ldd	r27, Y+1	; 0x01
    3ad0:	ce 0f       	add	r28, r30
    3ad2:	d1 1d       	adc	r29, r1
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	ed 01       	movw	r28, r26
    3ae0:	08 95       	ret

00003ae2 <malloc>:
    3ae2:	cf 93       	push	r28
    3ae4:	df 93       	push	r29
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	82 30       	cpi	r24, 0x02	; 2
    3aea:	91 05       	cpc	r25, r1
    3aec:	10 f4       	brcc	.+4      	; 0x3af2 <malloc+0x10>
    3aee:	62 e0       	ldi	r22, 0x02	; 2
    3af0:	70 e0       	ldi	r23, 0x00	; 0
    3af2:	a0 91 b9 00 	lds	r26, 0x00B9
    3af6:	b0 91 ba 00 	lds	r27, 0x00BA
    3afa:	ed 01       	movw	r28, r26
    3afc:	e0 e0       	ldi	r30, 0x00	; 0
    3afe:	f0 e0       	ldi	r31, 0x00	; 0
    3b00:	40 e0       	ldi	r20, 0x00	; 0
    3b02:	50 e0       	ldi	r21, 0x00	; 0
    3b04:	21 c0       	rjmp	.+66     	; 0x3b48 <malloc+0x66>
    3b06:	88 81       	ld	r24, Y
    3b08:	99 81       	ldd	r25, Y+1	; 0x01
    3b0a:	86 17       	cp	r24, r22
    3b0c:	97 07       	cpc	r25, r23
    3b0e:	69 f4       	brne	.+26     	; 0x3b2a <malloc+0x48>
    3b10:	8a 81       	ldd	r24, Y+2	; 0x02
    3b12:	9b 81       	ldd	r25, Y+3	; 0x03
    3b14:	30 97       	sbiw	r30, 0x00	; 0
    3b16:	19 f0       	breq	.+6      	; 0x3b1e <malloc+0x3c>
    3b18:	93 83       	std	Z+3, r25	; 0x03
    3b1a:	82 83       	std	Z+2, r24	; 0x02
    3b1c:	04 c0       	rjmp	.+8      	; 0x3b26 <malloc+0x44>
    3b1e:	90 93 ba 00 	sts	0x00BA, r25
    3b22:	80 93 b9 00 	sts	0x00B9, r24
    3b26:	fe 01       	movw	r30, r28
    3b28:	34 c0       	rjmp	.+104    	; 0x3b92 <malloc+0xb0>
    3b2a:	68 17       	cp	r22, r24
    3b2c:	79 07       	cpc	r23, r25
    3b2e:	38 f4       	brcc	.+14     	; 0x3b3e <malloc+0x5c>
    3b30:	41 15       	cp	r20, r1
    3b32:	51 05       	cpc	r21, r1
    3b34:	19 f0       	breq	.+6      	; 0x3b3c <malloc+0x5a>
    3b36:	84 17       	cp	r24, r20
    3b38:	95 07       	cpc	r25, r21
    3b3a:	08 f4       	brcc	.+2      	; 0x3b3e <malloc+0x5c>
    3b3c:	ac 01       	movw	r20, r24
    3b3e:	fe 01       	movw	r30, r28
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	9b 81       	ldd	r25, Y+3	; 0x03
    3b44:	9c 01       	movw	r18, r24
    3b46:	e9 01       	movw	r28, r18
    3b48:	20 97       	sbiw	r28, 0x00	; 0
    3b4a:	e9 f6       	brne	.-70     	; 0x3b06 <malloc+0x24>
    3b4c:	41 15       	cp	r20, r1
    3b4e:	51 05       	cpc	r21, r1
    3b50:	a9 f1       	breq	.+106    	; 0x3bbc <malloc+0xda>
    3b52:	ca 01       	movw	r24, r20
    3b54:	86 1b       	sub	r24, r22
    3b56:	97 0b       	sbc	r25, r23
    3b58:	04 97       	sbiw	r24, 0x04	; 4
    3b5a:	08 f4       	brcc	.+2      	; 0x3b5e <malloc+0x7c>
    3b5c:	ba 01       	movw	r22, r20
    3b5e:	e0 e0       	ldi	r30, 0x00	; 0
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	2a c0       	rjmp	.+84     	; 0x3bb8 <malloc+0xd6>
    3b64:	8d 91       	ld	r24, X+
    3b66:	9c 91       	ld	r25, X
    3b68:	11 97       	sbiw	r26, 0x01	; 1
    3b6a:	84 17       	cp	r24, r20
    3b6c:	95 07       	cpc	r25, r21
    3b6e:	f9 f4       	brne	.+62     	; 0x3bae <malloc+0xcc>
    3b70:	64 17       	cp	r22, r20
    3b72:	75 07       	cpc	r23, r21
    3b74:	81 f4       	brne	.+32     	; 0x3b96 <malloc+0xb4>
    3b76:	12 96       	adiw	r26, 0x02	; 2
    3b78:	8d 91       	ld	r24, X+
    3b7a:	9c 91       	ld	r25, X
    3b7c:	13 97       	sbiw	r26, 0x03	; 3
    3b7e:	30 97       	sbiw	r30, 0x00	; 0
    3b80:	19 f0       	breq	.+6      	; 0x3b88 <malloc+0xa6>
    3b82:	93 83       	std	Z+3, r25	; 0x03
    3b84:	82 83       	std	Z+2, r24	; 0x02
    3b86:	04 c0       	rjmp	.+8      	; 0x3b90 <malloc+0xae>
    3b88:	90 93 ba 00 	sts	0x00BA, r25
    3b8c:	80 93 b9 00 	sts	0x00B9, r24
    3b90:	fd 01       	movw	r30, r26
    3b92:	32 96       	adiw	r30, 0x02	; 2
    3b94:	4f c0       	rjmp	.+158    	; 0x3c34 <malloc+0x152>
    3b96:	ca 01       	movw	r24, r20
    3b98:	86 1b       	sub	r24, r22
    3b9a:	97 0b       	sbc	r25, r23
    3b9c:	fd 01       	movw	r30, r26
    3b9e:	e8 0f       	add	r30, r24
    3ba0:	f9 1f       	adc	r31, r25
    3ba2:	61 93       	st	Z+, r22
    3ba4:	71 93       	st	Z+, r23
    3ba6:	02 97       	sbiw	r24, 0x02	; 2
    3ba8:	8d 93       	st	X+, r24
    3baa:	9c 93       	st	X, r25
    3bac:	43 c0       	rjmp	.+134    	; 0x3c34 <malloc+0x152>
    3bae:	fd 01       	movw	r30, r26
    3bb0:	82 81       	ldd	r24, Z+2	; 0x02
    3bb2:	93 81       	ldd	r25, Z+3	; 0x03
    3bb4:	9c 01       	movw	r18, r24
    3bb6:	d9 01       	movw	r26, r18
    3bb8:	10 97       	sbiw	r26, 0x00	; 0
    3bba:	a1 f6       	brne	.-88     	; 0x3b64 <malloc+0x82>
    3bbc:	80 91 b7 00 	lds	r24, 0x00B7
    3bc0:	90 91 b8 00 	lds	r25, 0x00B8
    3bc4:	89 2b       	or	r24, r25
    3bc6:	41 f4       	brne	.+16     	; 0x3bd8 <malloc+0xf6>
    3bc8:	80 91 88 00 	lds	r24, 0x0088
    3bcc:	90 91 89 00 	lds	r25, 0x0089
    3bd0:	90 93 b8 00 	sts	0x00B8, r25
    3bd4:	80 93 b7 00 	sts	0x00B7, r24
    3bd8:	40 91 8a 00 	lds	r20, 0x008A
    3bdc:	50 91 8b 00 	lds	r21, 0x008B
    3be0:	41 15       	cp	r20, r1
    3be2:	51 05       	cpc	r21, r1
    3be4:	41 f4       	brne	.+16     	; 0x3bf6 <malloc+0x114>
    3be6:	4d b7       	in	r20, 0x3d	; 61
    3be8:	5e b7       	in	r21, 0x3e	; 62
    3bea:	80 91 86 00 	lds	r24, 0x0086
    3bee:	90 91 87 00 	lds	r25, 0x0087
    3bf2:	48 1b       	sub	r20, r24
    3bf4:	59 0b       	sbc	r21, r25
    3bf6:	20 91 b7 00 	lds	r18, 0x00B7
    3bfa:	30 91 b8 00 	lds	r19, 0x00B8
    3bfe:	24 17       	cp	r18, r20
    3c00:	35 07       	cpc	r19, r21
    3c02:	b0 f4       	brcc	.+44     	; 0x3c30 <malloc+0x14e>
    3c04:	ca 01       	movw	r24, r20
    3c06:	82 1b       	sub	r24, r18
    3c08:	93 0b       	sbc	r25, r19
    3c0a:	86 17       	cp	r24, r22
    3c0c:	97 07       	cpc	r25, r23
    3c0e:	80 f0       	brcs	.+32     	; 0x3c30 <malloc+0x14e>
    3c10:	ab 01       	movw	r20, r22
    3c12:	4e 5f       	subi	r20, 0xFE	; 254
    3c14:	5f 4f       	sbci	r21, 0xFF	; 255
    3c16:	84 17       	cp	r24, r20
    3c18:	95 07       	cpc	r25, r21
    3c1a:	50 f0       	brcs	.+20     	; 0x3c30 <malloc+0x14e>
    3c1c:	42 0f       	add	r20, r18
    3c1e:	53 1f       	adc	r21, r19
    3c20:	50 93 b8 00 	sts	0x00B8, r21
    3c24:	40 93 b7 00 	sts	0x00B7, r20
    3c28:	f9 01       	movw	r30, r18
    3c2a:	61 93       	st	Z+, r22
    3c2c:	71 93       	st	Z+, r23
    3c2e:	02 c0       	rjmp	.+4      	; 0x3c34 <malloc+0x152>
    3c30:	e0 e0       	ldi	r30, 0x00	; 0
    3c32:	f0 e0       	ldi	r31, 0x00	; 0
    3c34:	cf 01       	movw	r24, r30
    3c36:	df 91       	pop	r29
    3c38:	cf 91       	pop	r28
    3c3a:	08 95       	ret

00003c3c <free>:
    3c3c:	cf 93       	push	r28
    3c3e:	df 93       	push	r29
    3c40:	00 97       	sbiw	r24, 0x00	; 0
    3c42:	09 f4       	brne	.+2      	; 0x3c46 <free+0xa>
    3c44:	50 c0       	rjmp	.+160    	; 0x3ce6 <free+0xaa>
    3c46:	ec 01       	movw	r28, r24
    3c48:	22 97       	sbiw	r28, 0x02	; 2
    3c4a:	1b 82       	std	Y+3, r1	; 0x03
    3c4c:	1a 82       	std	Y+2, r1	; 0x02
    3c4e:	a0 91 b9 00 	lds	r26, 0x00B9
    3c52:	b0 91 ba 00 	lds	r27, 0x00BA
    3c56:	10 97       	sbiw	r26, 0x00	; 0
    3c58:	09 f1       	breq	.+66     	; 0x3c9c <free+0x60>
    3c5a:	40 e0       	ldi	r20, 0x00	; 0
    3c5c:	50 e0       	ldi	r21, 0x00	; 0
    3c5e:	ac 17       	cp	r26, r28
    3c60:	bd 07       	cpc	r27, r29
    3c62:	08 f1       	brcs	.+66     	; 0x3ca6 <free+0x6a>
    3c64:	bb 83       	std	Y+3, r27	; 0x03
    3c66:	aa 83       	std	Y+2, r26	; 0x02
    3c68:	fe 01       	movw	r30, r28
    3c6a:	21 91       	ld	r18, Z+
    3c6c:	31 91       	ld	r19, Z+
    3c6e:	e2 0f       	add	r30, r18
    3c70:	f3 1f       	adc	r31, r19
    3c72:	ae 17       	cp	r26, r30
    3c74:	bf 07       	cpc	r27, r31
    3c76:	79 f4       	brne	.+30     	; 0x3c96 <free+0x5a>
    3c78:	8d 91       	ld	r24, X+
    3c7a:	9c 91       	ld	r25, X
    3c7c:	11 97       	sbiw	r26, 0x01	; 1
    3c7e:	28 0f       	add	r18, r24
    3c80:	39 1f       	adc	r19, r25
    3c82:	2e 5f       	subi	r18, 0xFE	; 254
    3c84:	3f 4f       	sbci	r19, 0xFF	; 255
    3c86:	39 83       	std	Y+1, r19	; 0x01
    3c88:	28 83       	st	Y, r18
    3c8a:	12 96       	adiw	r26, 0x02	; 2
    3c8c:	8d 91       	ld	r24, X+
    3c8e:	9c 91       	ld	r25, X
    3c90:	13 97       	sbiw	r26, 0x03	; 3
    3c92:	9b 83       	std	Y+3, r25	; 0x03
    3c94:	8a 83       	std	Y+2, r24	; 0x02
    3c96:	41 15       	cp	r20, r1
    3c98:	51 05       	cpc	r21, r1
    3c9a:	71 f4       	brne	.+28     	; 0x3cb8 <free+0x7c>
    3c9c:	d0 93 ba 00 	sts	0x00BA, r29
    3ca0:	c0 93 b9 00 	sts	0x00B9, r28
    3ca4:	20 c0       	rjmp	.+64     	; 0x3ce6 <free+0xaa>
    3ca6:	12 96       	adiw	r26, 0x02	; 2
    3ca8:	8d 91       	ld	r24, X+
    3caa:	9c 91       	ld	r25, X
    3cac:	13 97       	sbiw	r26, 0x03	; 3
    3cae:	ad 01       	movw	r20, r26
    3cb0:	00 97       	sbiw	r24, 0x00	; 0
    3cb2:	11 f0       	breq	.+4      	; 0x3cb8 <free+0x7c>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	d3 cf       	rjmp	.-90     	; 0x3c5e <free+0x22>
    3cb8:	fa 01       	movw	r30, r20
    3cba:	d3 83       	std	Z+3, r29	; 0x03
    3cbc:	c2 83       	std	Z+2, r28	; 0x02
    3cbe:	21 91       	ld	r18, Z+
    3cc0:	31 91       	ld	r19, Z+
    3cc2:	e2 0f       	add	r30, r18
    3cc4:	f3 1f       	adc	r31, r19
    3cc6:	ce 17       	cp	r28, r30
    3cc8:	df 07       	cpc	r29, r31
    3cca:	69 f4       	brne	.+26     	; 0x3ce6 <free+0xaa>
    3ccc:	88 81       	ld	r24, Y
    3cce:	99 81       	ldd	r25, Y+1	; 0x01
    3cd0:	28 0f       	add	r18, r24
    3cd2:	39 1f       	adc	r19, r25
    3cd4:	2e 5f       	subi	r18, 0xFE	; 254
    3cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd8:	fa 01       	movw	r30, r20
    3cda:	31 83       	std	Z+1, r19	; 0x01
    3cdc:	20 83       	st	Z, r18
    3cde:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce2:	93 83       	std	Z+3, r25	; 0x03
    3ce4:	82 83       	std	Z+2, r24	; 0x02
    3ce6:	df 91       	pop	r29
    3ce8:	cf 91       	pop	r28
    3cea:	08 95       	ret

00003cec <printf>:
    3cec:	a0 e0       	ldi	r26, 0x00	; 0
    3cee:	b0 e0       	ldi	r27, 0x00	; 0
    3cf0:	ec e7       	ldi	r30, 0x7C	; 124
    3cf2:	fe e1       	ldi	r31, 0x1E	; 30
    3cf4:	0c 94 4a 1d 	jmp	0x3a94	; 0x3a94 <__prologue_saves__+0x20>
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	35 96       	adiw	r30, 0x05	; 5
    3cfc:	61 91       	ld	r22, Z+
    3cfe:	71 91       	ld	r23, Z+
    3d00:	80 91 bd 00 	lds	r24, 0x00BD
    3d04:	90 91 be 00 	lds	r25, 0x00BE
    3d08:	af 01       	movw	r20, r30
    3d0a:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <vfprintf>
    3d0e:	20 96       	adiw	r28, 0x00	; 0
    3d10:	e2 e0       	ldi	r30, 0x02	; 2
    3d12:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__epilogue_restores__+0x20>

00003d16 <putchar>:
    3d16:	60 91 bd 00 	lds	r22, 0x00BD
    3d1a:	70 91 be 00 	lds	r23, 0x00BE
    3d1e:	0e 94 85 20 	call	0x410a	; 0x410a <fputc>
    3d22:	08 95       	ret

00003d24 <vfprintf>:
    3d24:	ab e0       	ldi	r26, 0x0B	; 11
    3d26:	b0 e0       	ldi	r27, 0x00	; 0
    3d28:	e8 e9       	ldi	r30, 0x98	; 152
    3d2a:	fe e1       	ldi	r31, 0x1E	; 30
    3d2c:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <__prologue_saves__>
    3d30:	3c 01       	movw	r6, r24
    3d32:	2b 01       	movw	r4, r22
    3d34:	5a 01       	movw	r10, r20
    3d36:	fc 01       	movw	r30, r24
    3d38:	17 82       	std	Z+7, r1	; 0x07
    3d3a:	16 82       	std	Z+6, r1	; 0x06
    3d3c:	83 81       	ldd	r24, Z+3	; 0x03
    3d3e:	81 fd       	sbrc	r24, 1
    3d40:	03 c0       	rjmp	.+6      	; 0x3d48 <vfprintf+0x24>
    3d42:	6f ef       	ldi	r22, 0xFF	; 255
    3d44:	7f ef       	ldi	r23, 0xFF	; 255
    3d46:	c6 c1       	rjmp	.+908    	; 0x40d4 <vfprintf+0x3b0>
    3d48:	9a e0       	ldi	r25, 0x0A	; 10
    3d4a:	89 2e       	mov	r8, r25
    3d4c:	1e 01       	movw	r2, r28
    3d4e:	08 94       	sec
    3d50:	21 1c       	adc	r2, r1
    3d52:	31 1c       	adc	r3, r1
    3d54:	f3 01       	movw	r30, r6
    3d56:	23 81       	ldd	r18, Z+3	; 0x03
    3d58:	f2 01       	movw	r30, r4
    3d5a:	23 fd       	sbrc	r18, 3
    3d5c:	85 91       	lpm	r24, Z+
    3d5e:	23 ff       	sbrs	r18, 3
    3d60:	81 91       	ld	r24, Z+
    3d62:	2f 01       	movw	r4, r30
    3d64:	88 23       	and	r24, r24
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <vfprintf+0x46>
    3d68:	b2 c1       	rjmp	.+868    	; 0x40ce <vfprintf+0x3aa>
    3d6a:	85 32       	cpi	r24, 0x25	; 37
    3d6c:	39 f4       	brne	.+14     	; 0x3d7c <vfprintf+0x58>
    3d6e:	23 fd       	sbrc	r18, 3
    3d70:	85 91       	lpm	r24, Z+
    3d72:	23 ff       	sbrs	r18, 3
    3d74:	81 91       	ld	r24, Z+
    3d76:	2f 01       	movw	r4, r30
    3d78:	85 32       	cpi	r24, 0x25	; 37
    3d7a:	29 f4       	brne	.+10     	; 0x3d86 <vfprintf+0x62>
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	b3 01       	movw	r22, r6
    3d80:	0e 94 85 20 	call	0x410a	; 0x410a <fputc>
    3d84:	e7 cf       	rjmp	.-50     	; 0x3d54 <vfprintf+0x30>
    3d86:	98 2f       	mov	r25, r24
    3d88:	ff 24       	eor	r15, r15
    3d8a:	ee 24       	eor	r14, r14
    3d8c:	99 24       	eor	r9, r9
    3d8e:	ff e1       	ldi	r31, 0x1F	; 31
    3d90:	ff 15       	cp	r31, r15
    3d92:	d0 f0       	brcs	.+52     	; 0x3dc8 <vfprintf+0xa4>
    3d94:	9b 32       	cpi	r25, 0x2B	; 43
    3d96:	69 f0       	breq	.+26     	; 0x3db2 <vfprintf+0x8e>
    3d98:	9c 32       	cpi	r25, 0x2C	; 44
    3d9a:	28 f4       	brcc	.+10     	; 0x3da6 <vfprintf+0x82>
    3d9c:	90 32       	cpi	r25, 0x20	; 32
    3d9e:	59 f0       	breq	.+22     	; 0x3db6 <vfprintf+0x92>
    3da0:	93 32       	cpi	r25, 0x23	; 35
    3da2:	91 f4       	brne	.+36     	; 0x3dc8 <vfprintf+0xa4>
    3da4:	0e c0       	rjmp	.+28     	; 0x3dc2 <vfprintf+0x9e>
    3da6:	9d 32       	cpi	r25, 0x2D	; 45
    3da8:	49 f0       	breq	.+18     	; 0x3dbc <vfprintf+0x98>
    3daa:	90 33       	cpi	r25, 0x30	; 48
    3dac:	69 f4       	brne	.+26     	; 0x3dc8 <vfprintf+0xa4>
    3dae:	41 e0       	ldi	r20, 0x01	; 1
    3db0:	24 c0       	rjmp	.+72     	; 0x3dfa <vfprintf+0xd6>
    3db2:	52 e0       	ldi	r21, 0x02	; 2
    3db4:	f5 2a       	or	r15, r21
    3db6:	84 e0       	ldi	r24, 0x04	; 4
    3db8:	f8 2a       	or	r15, r24
    3dba:	28 c0       	rjmp	.+80     	; 0x3e0c <vfprintf+0xe8>
    3dbc:	98 e0       	ldi	r25, 0x08	; 8
    3dbe:	f9 2a       	or	r15, r25
    3dc0:	25 c0       	rjmp	.+74     	; 0x3e0c <vfprintf+0xe8>
    3dc2:	e0 e1       	ldi	r30, 0x10	; 16
    3dc4:	fe 2a       	or	r15, r30
    3dc6:	22 c0       	rjmp	.+68     	; 0x3e0c <vfprintf+0xe8>
    3dc8:	f7 fc       	sbrc	r15, 7
    3dca:	29 c0       	rjmp	.+82     	; 0x3e1e <vfprintf+0xfa>
    3dcc:	89 2f       	mov	r24, r25
    3dce:	80 53       	subi	r24, 0x30	; 48
    3dd0:	8a 30       	cpi	r24, 0x0A	; 10
    3dd2:	70 f4       	brcc	.+28     	; 0x3df0 <vfprintf+0xcc>
    3dd4:	f6 fe       	sbrs	r15, 6
    3dd6:	05 c0       	rjmp	.+10     	; 0x3de2 <vfprintf+0xbe>
    3dd8:	98 9c       	mul	r9, r8
    3dda:	90 2c       	mov	r9, r0
    3ddc:	11 24       	eor	r1, r1
    3dde:	98 0e       	add	r9, r24
    3de0:	15 c0       	rjmp	.+42     	; 0x3e0c <vfprintf+0xe8>
    3de2:	e8 9c       	mul	r14, r8
    3de4:	e0 2c       	mov	r14, r0
    3de6:	11 24       	eor	r1, r1
    3de8:	e8 0e       	add	r14, r24
    3dea:	f0 e2       	ldi	r31, 0x20	; 32
    3dec:	ff 2a       	or	r15, r31
    3dee:	0e c0       	rjmp	.+28     	; 0x3e0c <vfprintf+0xe8>
    3df0:	9e 32       	cpi	r25, 0x2E	; 46
    3df2:	29 f4       	brne	.+10     	; 0x3dfe <vfprintf+0xda>
    3df4:	f6 fc       	sbrc	r15, 6
    3df6:	6b c1       	rjmp	.+726    	; 0x40ce <vfprintf+0x3aa>
    3df8:	40 e4       	ldi	r20, 0x40	; 64
    3dfa:	f4 2a       	or	r15, r20
    3dfc:	07 c0       	rjmp	.+14     	; 0x3e0c <vfprintf+0xe8>
    3dfe:	9c 36       	cpi	r25, 0x6C	; 108
    3e00:	19 f4       	brne	.+6      	; 0x3e08 <vfprintf+0xe4>
    3e02:	50 e8       	ldi	r21, 0x80	; 128
    3e04:	f5 2a       	or	r15, r21
    3e06:	02 c0       	rjmp	.+4      	; 0x3e0c <vfprintf+0xe8>
    3e08:	98 36       	cpi	r25, 0x68	; 104
    3e0a:	49 f4       	brne	.+18     	; 0x3e1e <vfprintf+0xfa>
    3e0c:	f2 01       	movw	r30, r4
    3e0e:	23 fd       	sbrc	r18, 3
    3e10:	95 91       	lpm	r25, Z+
    3e12:	23 ff       	sbrs	r18, 3
    3e14:	91 91       	ld	r25, Z+
    3e16:	2f 01       	movw	r4, r30
    3e18:	99 23       	and	r25, r25
    3e1a:	09 f0       	breq	.+2      	; 0x3e1e <vfprintf+0xfa>
    3e1c:	b8 cf       	rjmp	.-144    	; 0x3d8e <vfprintf+0x6a>
    3e1e:	89 2f       	mov	r24, r25
    3e20:	85 54       	subi	r24, 0x45	; 69
    3e22:	83 30       	cpi	r24, 0x03	; 3
    3e24:	18 f0       	brcs	.+6      	; 0x3e2c <vfprintf+0x108>
    3e26:	80 52       	subi	r24, 0x20	; 32
    3e28:	83 30       	cpi	r24, 0x03	; 3
    3e2a:	38 f4       	brcc	.+14     	; 0x3e3a <vfprintf+0x116>
    3e2c:	44 e0       	ldi	r20, 0x04	; 4
    3e2e:	50 e0       	ldi	r21, 0x00	; 0
    3e30:	a4 0e       	add	r10, r20
    3e32:	b5 1e       	adc	r11, r21
    3e34:	5f e3       	ldi	r21, 0x3F	; 63
    3e36:	59 83       	std	Y+1, r21	; 0x01
    3e38:	0f c0       	rjmp	.+30     	; 0x3e58 <vfprintf+0x134>
    3e3a:	93 36       	cpi	r25, 0x63	; 99
    3e3c:	31 f0       	breq	.+12     	; 0x3e4a <vfprintf+0x126>
    3e3e:	93 37       	cpi	r25, 0x73	; 115
    3e40:	79 f0       	breq	.+30     	; 0x3e60 <vfprintf+0x13c>
    3e42:	93 35       	cpi	r25, 0x53	; 83
    3e44:	09 f0       	breq	.+2      	; 0x3e48 <vfprintf+0x124>
    3e46:	56 c0       	rjmp	.+172    	; 0x3ef4 <vfprintf+0x1d0>
    3e48:	20 c0       	rjmp	.+64     	; 0x3e8a <vfprintf+0x166>
    3e4a:	f5 01       	movw	r30, r10
    3e4c:	80 81       	ld	r24, Z
    3e4e:	89 83       	std	Y+1, r24	; 0x01
    3e50:	42 e0       	ldi	r20, 0x02	; 2
    3e52:	50 e0       	ldi	r21, 0x00	; 0
    3e54:	a4 0e       	add	r10, r20
    3e56:	b5 1e       	adc	r11, r21
    3e58:	61 01       	movw	r12, r2
    3e5a:	01 e0       	ldi	r16, 0x01	; 1
    3e5c:	10 e0       	ldi	r17, 0x00	; 0
    3e5e:	12 c0       	rjmp	.+36     	; 0x3e84 <vfprintf+0x160>
    3e60:	f5 01       	movw	r30, r10
    3e62:	c0 80       	ld	r12, Z
    3e64:	d1 80       	ldd	r13, Z+1	; 0x01
    3e66:	f6 fc       	sbrc	r15, 6
    3e68:	03 c0       	rjmp	.+6      	; 0x3e70 <vfprintf+0x14c>
    3e6a:	6f ef       	ldi	r22, 0xFF	; 255
    3e6c:	7f ef       	ldi	r23, 0xFF	; 255
    3e6e:	02 c0       	rjmp	.+4      	; 0x3e74 <vfprintf+0x150>
    3e70:	69 2d       	mov	r22, r9
    3e72:	70 e0       	ldi	r23, 0x00	; 0
    3e74:	42 e0       	ldi	r20, 0x02	; 2
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	a4 0e       	add	r10, r20
    3e7a:	b5 1e       	adc	r11, r21
    3e7c:	c6 01       	movw	r24, r12
    3e7e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <strnlen>
    3e82:	8c 01       	movw	r16, r24
    3e84:	5f e7       	ldi	r21, 0x7F	; 127
    3e86:	f5 22       	and	r15, r21
    3e88:	14 c0       	rjmp	.+40     	; 0x3eb2 <vfprintf+0x18e>
    3e8a:	f5 01       	movw	r30, r10
    3e8c:	c0 80       	ld	r12, Z
    3e8e:	d1 80       	ldd	r13, Z+1	; 0x01
    3e90:	f6 fc       	sbrc	r15, 6
    3e92:	03 c0       	rjmp	.+6      	; 0x3e9a <vfprintf+0x176>
    3e94:	6f ef       	ldi	r22, 0xFF	; 255
    3e96:	7f ef       	ldi	r23, 0xFF	; 255
    3e98:	02 c0       	rjmp	.+4      	; 0x3e9e <vfprintf+0x17a>
    3e9a:	69 2d       	mov	r22, r9
    3e9c:	70 e0       	ldi	r23, 0x00	; 0
    3e9e:	42 e0       	ldi	r20, 0x02	; 2
    3ea0:	50 e0       	ldi	r21, 0x00	; 0
    3ea2:	a4 0e       	add	r10, r20
    3ea4:	b5 1e       	adc	r11, r21
    3ea6:	c6 01       	movw	r24, r12
    3ea8:	0e 94 6f 20 	call	0x40de	; 0x40de <strnlen_P>
    3eac:	8c 01       	movw	r16, r24
    3eae:	50 e8       	ldi	r21, 0x80	; 128
    3eb0:	f5 2a       	or	r15, r21
    3eb2:	f3 fe       	sbrs	r15, 3
    3eb4:	07 c0       	rjmp	.+14     	; 0x3ec4 <vfprintf+0x1a0>
    3eb6:	1a c0       	rjmp	.+52     	; 0x3eec <vfprintf+0x1c8>
    3eb8:	80 e2       	ldi	r24, 0x20	; 32
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	b3 01       	movw	r22, r6
    3ebe:	0e 94 85 20 	call	0x410a	; 0x410a <fputc>
    3ec2:	ea 94       	dec	r14
    3ec4:	8e 2d       	mov	r24, r14
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	08 17       	cp	r16, r24
    3eca:	19 07       	cpc	r17, r25
    3ecc:	a8 f3       	brcs	.-22     	; 0x3eb8 <vfprintf+0x194>
    3ece:	0e c0       	rjmp	.+28     	; 0x3eec <vfprintf+0x1c8>
    3ed0:	f6 01       	movw	r30, r12
    3ed2:	f7 fc       	sbrc	r15, 7
    3ed4:	85 91       	lpm	r24, Z+
    3ed6:	f7 fe       	sbrs	r15, 7
    3ed8:	81 91       	ld	r24, Z+
    3eda:	6f 01       	movw	r12, r30
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	b3 01       	movw	r22, r6
    3ee0:	0e 94 85 20 	call	0x410a	; 0x410a <fputc>
    3ee4:	e1 10       	cpse	r14, r1
    3ee6:	ea 94       	dec	r14
    3ee8:	01 50       	subi	r16, 0x01	; 1
    3eea:	10 40       	sbci	r17, 0x00	; 0
    3eec:	01 15       	cp	r16, r1
    3eee:	11 05       	cpc	r17, r1
    3ef0:	79 f7       	brne	.-34     	; 0x3ed0 <vfprintf+0x1ac>
    3ef2:	ea c0       	rjmp	.+468    	; 0x40c8 <vfprintf+0x3a4>
    3ef4:	94 36       	cpi	r25, 0x64	; 100
    3ef6:	11 f0       	breq	.+4      	; 0x3efc <vfprintf+0x1d8>
    3ef8:	99 36       	cpi	r25, 0x69	; 105
    3efa:	69 f5       	brne	.+90     	; 0x3f56 <vfprintf+0x232>
    3efc:	f7 fe       	sbrs	r15, 7
    3efe:	08 c0       	rjmp	.+16     	; 0x3f10 <vfprintf+0x1ec>
    3f00:	f5 01       	movw	r30, r10
    3f02:	20 81       	ld	r18, Z
    3f04:	31 81       	ldd	r19, Z+1	; 0x01
    3f06:	42 81       	ldd	r20, Z+2	; 0x02
    3f08:	53 81       	ldd	r21, Z+3	; 0x03
    3f0a:	84 e0       	ldi	r24, 0x04	; 4
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	0a c0       	rjmp	.+20     	; 0x3f24 <vfprintf+0x200>
    3f10:	f5 01       	movw	r30, r10
    3f12:	80 81       	ld	r24, Z
    3f14:	91 81       	ldd	r25, Z+1	; 0x01
    3f16:	9c 01       	movw	r18, r24
    3f18:	44 27       	eor	r20, r20
    3f1a:	37 fd       	sbrc	r19, 7
    3f1c:	40 95       	com	r20
    3f1e:	54 2f       	mov	r21, r20
    3f20:	82 e0       	ldi	r24, 0x02	; 2
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	a8 0e       	add	r10, r24
    3f26:	b9 1e       	adc	r11, r25
    3f28:	9f e6       	ldi	r25, 0x6F	; 111
    3f2a:	f9 22       	and	r15, r25
    3f2c:	57 ff       	sbrs	r21, 7
    3f2e:	09 c0       	rjmp	.+18     	; 0x3f42 <vfprintf+0x21e>
    3f30:	50 95       	com	r21
    3f32:	40 95       	com	r20
    3f34:	30 95       	com	r19
    3f36:	21 95       	neg	r18
    3f38:	3f 4f       	sbci	r19, 0xFF	; 255
    3f3a:	4f 4f       	sbci	r20, 0xFF	; 255
    3f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3e:	e0 e8       	ldi	r30, 0x80	; 128
    3f40:	fe 2a       	or	r15, r30
    3f42:	ca 01       	movw	r24, r20
    3f44:	b9 01       	movw	r22, r18
    3f46:	a1 01       	movw	r20, r2
    3f48:	2a e0       	ldi	r18, 0x0A	; 10
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	0e 94 b1 20 	call	0x4162	; 0x4162 <__ultoa_invert>
    3f50:	d8 2e       	mov	r13, r24
    3f52:	d2 18       	sub	r13, r2
    3f54:	40 c0       	rjmp	.+128    	; 0x3fd6 <vfprintf+0x2b2>
    3f56:	95 37       	cpi	r25, 0x75	; 117
    3f58:	29 f4       	brne	.+10     	; 0x3f64 <vfprintf+0x240>
    3f5a:	1f 2d       	mov	r17, r15
    3f5c:	1f 7e       	andi	r17, 0xEF	; 239
    3f5e:	2a e0       	ldi	r18, 0x0A	; 10
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	1d c0       	rjmp	.+58     	; 0x3f9e <vfprintf+0x27a>
    3f64:	1f 2d       	mov	r17, r15
    3f66:	19 7f       	andi	r17, 0xF9	; 249
    3f68:	9f 36       	cpi	r25, 0x6F	; 111
    3f6a:	61 f0       	breq	.+24     	; 0x3f84 <vfprintf+0x260>
    3f6c:	90 37       	cpi	r25, 0x70	; 112
    3f6e:	20 f4       	brcc	.+8      	; 0x3f78 <vfprintf+0x254>
    3f70:	98 35       	cpi	r25, 0x58	; 88
    3f72:	09 f0       	breq	.+2      	; 0x3f76 <vfprintf+0x252>
    3f74:	ac c0       	rjmp	.+344    	; 0x40ce <vfprintf+0x3aa>
    3f76:	0f c0       	rjmp	.+30     	; 0x3f96 <vfprintf+0x272>
    3f78:	90 37       	cpi	r25, 0x70	; 112
    3f7a:	39 f0       	breq	.+14     	; 0x3f8a <vfprintf+0x266>
    3f7c:	98 37       	cpi	r25, 0x78	; 120
    3f7e:	09 f0       	breq	.+2      	; 0x3f82 <vfprintf+0x25e>
    3f80:	a6 c0       	rjmp	.+332    	; 0x40ce <vfprintf+0x3aa>
    3f82:	04 c0       	rjmp	.+8      	; 0x3f8c <vfprintf+0x268>
    3f84:	28 e0       	ldi	r18, 0x08	; 8
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	0a c0       	rjmp	.+20     	; 0x3f9e <vfprintf+0x27a>
    3f8a:	10 61       	ori	r17, 0x10	; 16
    3f8c:	14 fd       	sbrc	r17, 4
    3f8e:	14 60       	ori	r17, 0x04	; 4
    3f90:	20 e1       	ldi	r18, 0x10	; 16
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	04 c0       	rjmp	.+8      	; 0x3f9e <vfprintf+0x27a>
    3f96:	14 fd       	sbrc	r17, 4
    3f98:	16 60       	ori	r17, 0x06	; 6
    3f9a:	20 e1       	ldi	r18, 0x10	; 16
    3f9c:	32 e0       	ldi	r19, 0x02	; 2
    3f9e:	17 ff       	sbrs	r17, 7
    3fa0:	08 c0       	rjmp	.+16     	; 0x3fb2 <vfprintf+0x28e>
    3fa2:	f5 01       	movw	r30, r10
    3fa4:	60 81       	ld	r22, Z
    3fa6:	71 81       	ldd	r23, Z+1	; 0x01
    3fa8:	82 81       	ldd	r24, Z+2	; 0x02
    3faa:	93 81       	ldd	r25, Z+3	; 0x03
    3fac:	44 e0       	ldi	r20, 0x04	; 4
    3fae:	50 e0       	ldi	r21, 0x00	; 0
    3fb0:	08 c0       	rjmp	.+16     	; 0x3fc2 <vfprintf+0x29e>
    3fb2:	f5 01       	movw	r30, r10
    3fb4:	80 81       	ld	r24, Z
    3fb6:	91 81       	ldd	r25, Z+1	; 0x01
    3fb8:	bc 01       	movw	r22, r24
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	42 e0       	ldi	r20, 0x02	; 2
    3fc0:	50 e0       	ldi	r21, 0x00	; 0
    3fc2:	a4 0e       	add	r10, r20
    3fc4:	b5 1e       	adc	r11, r21
    3fc6:	a1 01       	movw	r20, r2
    3fc8:	0e 94 b1 20 	call	0x4162	; 0x4162 <__ultoa_invert>
    3fcc:	d8 2e       	mov	r13, r24
    3fce:	d2 18       	sub	r13, r2
    3fd0:	8f e7       	ldi	r24, 0x7F	; 127
    3fd2:	f8 2e       	mov	r15, r24
    3fd4:	f1 22       	and	r15, r17
    3fd6:	f6 fe       	sbrs	r15, 6
    3fd8:	0b c0       	rjmp	.+22     	; 0x3ff0 <vfprintf+0x2cc>
    3fda:	5e ef       	ldi	r21, 0xFE	; 254
    3fdc:	f5 22       	and	r15, r21
    3fde:	d9 14       	cp	r13, r9
    3fe0:	38 f4       	brcc	.+14     	; 0x3ff0 <vfprintf+0x2cc>
    3fe2:	f4 fe       	sbrs	r15, 4
    3fe4:	07 c0       	rjmp	.+14     	; 0x3ff4 <vfprintf+0x2d0>
    3fe6:	f2 fc       	sbrc	r15, 2
    3fe8:	05 c0       	rjmp	.+10     	; 0x3ff4 <vfprintf+0x2d0>
    3fea:	8f ee       	ldi	r24, 0xEF	; 239
    3fec:	f8 22       	and	r15, r24
    3fee:	02 c0       	rjmp	.+4      	; 0x3ff4 <vfprintf+0x2d0>
    3ff0:	1d 2d       	mov	r17, r13
    3ff2:	01 c0       	rjmp	.+2      	; 0x3ff6 <vfprintf+0x2d2>
    3ff4:	19 2d       	mov	r17, r9
    3ff6:	f4 fe       	sbrs	r15, 4
    3ff8:	0d c0       	rjmp	.+26     	; 0x4014 <vfprintf+0x2f0>
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	ed 0d       	add	r30, r13
    3ffe:	f1 1d       	adc	r31, r1
    4000:	80 81       	ld	r24, Z
    4002:	80 33       	cpi	r24, 0x30	; 48
    4004:	19 f4       	brne	.+6      	; 0x400c <vfprintf+0x2e8>
    4006:	99 ee       	ldi	r25, 0xE9	; 233
    4008:	f9 22       	and	r15, r25
    400a:	08 c0       	rjmp	.+16     	; 0x401c <vfprintf+0x2f8>
    400c:	1f 5f       	subi	r17, 0xFF	; 255
    400e:	f2 fe       	sbrs	r15, 2
    4010:	05 c0       	rjmp	.+10     	; 0x401c <vfprintf+0x2f8>
    4012:	03 c0       	rjmp	.+6      	; 0x401a <vfprintf+0x2f6>
    4014:	8f 2d       	mov	r24, r15
    4016:	86 78       	andi	r24, 0x86	; 134
    4018:	09 f0       	breq	.+2      	; 0x401c <vfprintf+0x2f8>
    401a:	1f 5f       	subi	r17, 0xFF	; 255
    401c:	0f 2d       	mov	r16, r15
    401e:	f3 fc       	sbrc	r15, 3
    4020:	14 c0       	rjmp	.+40     	; 0x404a <vfprintf+0x326>
    4022:	f0 fe       	sbrs	r15, 0
    4024:	0f c0       	rjmp	.+30     	; 0x4044 <vfprintf+0x320>
    4026:	1e 15       	cp	r17, r14
    4028:	10 f0       	brcs	.+4      	; 0x402e <vfprintf+0x30a>
    402a:	9d 2c       	mov	r9, r13
    402c:	0b c0       	rjmp	.+22     	; 0x4044 <vfprintf+0x320>
    402e:	9d 2c       	mov	r9, r13
    4030:	9e 0c       	add	r9, r14
    4032:	91 1a       	sub	r9, r17
    4034:	1e 2d       	mov	r17, r14
    4036:	06 c0       	rjmp	.+12     	; 0x4044 <vfprintf+0x320>
    4038:	80 e2       	ldi	r24, 0x20	; 32
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	b3 01       	movw	r22, r6
    403e:	0e 94 85 20 	call	0x410a	; 0x410a <fputc>
    4042:	1f 5f       	subi	r17, 0xFF	; 255
    4044:	1e 15       	cp	r17, r14
    4046:	c0 f3       	brcs	.-16     	; 0x4038 <vfprintf+0x314>
    4048:	04 c0       	rjmp	.+8      	; 0x4052 <vfprintf+0x32e>
    404a:	1e 15       	cp	r17, r14
    404c:	10 f4       	brcc	.+4      	; 0x4052 <vfprintf+0x32e>
    404e:	e1 1a       	sub	r14, r17
    4050:	01 c0       	rjmp	.+2      	; 0x4054 <vfprintf+0x330>
    4052:	ee 24       	eor	r14, r14
    4054:	04 ff       	sbrs	r16, 4
    4056:	0f c0       	rjmp	.+30     	; 0x4076 <vfprintf+0x352>
    4058:	80 e3       	ldi	r24, 0x30	; 48
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	b3 01       	movw	r22, r6
    405e:	0e 94 85 20 	call	0x410a	; 0x410a <fputc>
    4062:	02 ff       	sbrs	r16, 2
    4064:	1d c0       	rjmp	.+58     	; 0x40a0 <vfprintf+0x37c>
    4066:	01 fd       	sbrc	r16, 1
    4068:	03 c0       	rjmp	.+6      	; 0x4070 <vfprintf+0x34c>
    406a:	88 e7       	ldi	r24, 0x78	; 120
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e c0       	rjmp	.+28     	; 0x408c <vfprintf+0x368>
    4070:	88 e5       	ldi	r24, 0x58	; 88
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	0b c0       	rjmp	.+22     	; 0x408c <vfprintf+0x368>
    4076:	80 2f       	mov	r24, r16
    4078:	86 78       	andi	r24, 0x86	; 134
    407a:	91 f0       	breq	.+36     	; 0x40a0 <vfprintf+0x37c>
    407c:	01 ff       	sbrs	r16, 1
    407e:	02 c0       	rjmp	.+4      	; 0x4084 <vfprintf+0x360>
    4080:	8b e2       	ldi	r24, 0x2B	; 43
    4082:	01 c0       	rjmp	.+2      	; 0x4086 <vfprintf+0x362>
    4084:	80 e2       	ldi	r24, 0x20	; 32
    4086:	f7 fc       	sbrc	r15, 7
    4088:	8d e2       	ldi	r24, 0x2D	; 45
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	b3 01       	movw	r22, r6
    408e:	0e 94 85 20 	call	0x410a	; 0x410a <fputc>
    4092:	06 c0       	rjmp	.+12     	; 0x40a0 <vfprintf+0x37c>
    4094:	80 e3       	ldi	r24, 0x30	; 48
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	b3 01       	movw	r22, r6
    409a:	0e 94 85 20 	call	0x410a	; 0x410a <fputc>
    409e:	9a 94       	dec	r9
    40a0:	d9 14       	cp	r13, r9
    40a2:	c0 f3       	brcs	.-16     	; 0x4094 <vfprintf+0x370>
    40a4:	da 94       	dec	r13
    40a6:	f1 01       	movw	r30, r2
    40a8:	ed 0d       	add	r30, r13
    40aa:	f1 1d       	adc	r31, r1
    40ac:	80 81       	ld	r24, Z
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	b3 01       	movw	r22, r6
    40b2:	0e 94 85 20 	call	0x410a	; 0x410a <fputc>
    40b6:	dd 20       	and	r13, r13
    40b8:	a9 f7       	brne	.-22     	; 0x40a4 <vfprintf+0x380>
    40ba:	06 c0       	rjmp	.+12     	; 0x40c8 <vfprintf+0x3a4>
    40bc:	80 e2       	ldi	r24, 0x20	; 32
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	b3 01       	movw	r22, r6
    40c2:	0e 94 85 20 	call	0x410a	; 0x410a <fputc>
    40c6:	ea 94       	dec	r14
    40c8:	ee 20       	and	r14, r14
    40ca:	c1 f7       	brne	.-16     	; 0x40bc <vfprintf+0x398>
    40cc:	43 ce       	rjmp	.-890    	; 0x3d54 <vfprintf+0x30>
    40ce:	f3 01       	movw	r30, r6
    40d0:	66 81       	ldd	r22, Z+6	; 0x06
    40d2:	77 81       	ldd	r23, Z+7	; 0x07
    40d4:	cb 01       	movw	r24, r22
    40d6:	2b 96       	adiw	r28, 0x0b	; 11
    40d8:	e2 e1       	ldi	r30, 0x12	; 18
    40da:	0c 94 56 1d 	jmp	0x3aac	; 0x3aac <__epilogue_restores__>

000040de <strnlen_P>:
    40de:	fc 01       	movw	r30, r24
    40e0:	05 90       	lpm	r0, Z+
    40e2:	61 50       	subi	r22, 0x01	; 1
    40e4:	70 40       	sbci	r23, 0x00	; 0
    40e6:	01 10       	cpse	r0, r1
    40e8:	d8 f7       	brcc	.-10     	; 0x40e0 <strnlen_P+0x2>
    40ea:	80 95       	com	r24
    40ec:	90 95       	com	r25
    40ee:	8e 0f       	add	r24, r30
    40f0:	9f 1f       	adc	r25, r31
    40f2:	08 95       	ret

000040f4 <strnlen>:
    40f4:	fc 01       	movw	r30, r24
    40f6:	61 50       	subi	r22, 0x01	; 1
    40f8:	70 40       	sbci	r23, 0x00	; 0
    40fa:	01 90       	ld	r0, Z+
    40fc:	01 10       	cpse	r0, r1
    40fe:	d8 f7       	brcc	.-10     	; 0x40f6 <strnlen+0x2>
    4100:	80 95       	com	r24
    4102:	90 95       	com	r25
    4104:	8e 0f       	add	r24, r30
    4106:	9f 1f       	adc	r25, r31
    4108:	08 95       	ret

0000410a <fputc>:
    410a:	0f 93       	push	r16
    410c:	1f 93       	push	r17
    410e:	cf 93       	push	r28
    4110:	df 93       	push	r29
    4112:	8c 01       	movw	r16, r24
    4114:	eb 01       	movw	r28, r22
    4116:	8b 81       	ldd	r24, Y+3	; 0x03
    4118:	81 ff       	sbrs	r24, 1
    411a:	1b c0       	rjmp	.+54     	; 0x4152 <fputc+0x48>
    411c:	82 ff       	sbrs	r24, 2
    411e:	0d c0       	rjmp	.+26     	; 0x413a <fputc+0x30>
    4120:	2e 81       	ldd	r18, Y+6	; 0x06
    4122:	3f 81       	ldd	r19, Y+7	; 0x07
    4124:	8c 81       	ldd	r24, Y+4	; 0x04
    4126:	9d 81       	ldd	r25, Y+5	; 0x05
    4128:	28 17       	cp	r18, r24
    412a:	39 07       	cpc	r19, r25
    412c:	64 f4       	brge	.+24     	; 0x4146 <fputc+0x3c>
    412e:	e8 81       	ld	r30, Y
    4130:	f9 81       	ldd	r31, Y+1	; 0x01
    4132:	01 93       	st	Z+, r16
    4134:	f9 83       	std	Y+1, r31	; 0x01
    4136:	e8 83       	st	Y, r30
    4138:	06 c0       	rjmp	.+12     	; 0x4146 <fputc+0x3c>
    413a:	e8 85       	ldd	r30, Y+8	; 0x08
    413c:	f9 85       	ldd	r31, Y+9	; 0x09
    413e:	80 2f       	mov	r24, r16
    4140:	09 95       	icall
    4142:	89 2b       	or	r24, r25
    4144:	31 f4       	brne	.+12     	; 0x4152 <fputc+0x48>
    4146:	8e 81       	ldd	r24, Y+6	; 0x06
    4148:	9f 81       	ldd	r25, Y+7	; 0x07
    414a:	01 96       	adiw	r24, 0x01	; 1
    414c:	9f 83       	std	Y+7, r25	; 0x07
    414e:	8e 83       	std	Y+6, r24	; 0x06
    4150:	02 c0       	rjmp	.+4      	; 0x4156 <fputc+0x4c>
    4152:	0f ef       	ldi	r16, 0xFF	; 255
    4154:	1f ef       	ldi	r17, 0xFF	; 255
    4156:	c8 01       	movw	r24, r16
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	1f 91       	pop	r17
    415e:	0f 91       	pop	r16
    4160:	08 95       	ret

00004162 <__ultoa_invert>:
    4162:	fa 01       	movw	r30, r20
    4164:	aa 27       	eor	r26, r26
    4166:	28 30       	cpi	r18, 0x08	; 8
    4168:	51 f1       	breq	.+84     	; 0x41be <__ultoa_invert+0x5c>
    416a:	20 31       	cpi	r18, 0x10	; 16
    416c:	81 f1       	breq	.+96     	; 0x41ce <__ultoa_invert+0x6c>
    416e:	e8 94       	clt
    4170:	6f 93       	push	r22
    4172:	6e 7f       	andi	r22, 0xFE	; 254
    4174:	6e 5f       	subi	r22, 0xFE	; 254
    4176:	7f 4f       	sbci	r23, 0xFF	; 255
    4178:	8f 4f       	sbci	r24, 0xFF	; 255
    417a:	9f 4f       	sbci	r25, 0xFF	; 255
    417c:	af 4f       	sbci	r26, 0xFF	; 255
    417e:	b1 e0       	ldi	r27, 0x01	; 1
    4180:	3e d0       	rcall	.+124    	; 0x41fe <__ultoa_invert+0x9c>
    4182:	b4 e0       	ldi	r27, 0x04	; 4
    4184:	3c d0       	rcall	.+120    	; 0x41fe <__ultoa_invert+0x9c>
    4186:	67 0f       	add	r22, r23
    4188:	78 1f       	adc	r23, r24
    418a:	89 1f       	adc	r24, r25
    418c:	9a 1f       	adc	r25, r26
    418e:	a1 1d       	adc	r26, r1
    4190:	68 0f       	add	r22, r24
    4192:	79 1f       	adc	r23, r25
    4194:	8a 1f       	adc	r24, r26
    4196:	91 1d       	adc	r25, r1
    4198:	a1 1d       	adc	r26, r1
    419a:	6a 0f       	add	r22, r26
    419c:	71 1d       	adc	r23, r1
    419e:	81 1d       	adc	r24, r1
    41a0:	91 1d       	adc	r25, r1
    41a2:	a1 1d       	adc	r26, r1
    41a4:	20 d0       	rcall	.+64     	; 0x41e6 <__ultoa_invert+0x84>
    41a6:	09 f4       	brne	.+2      	; 0x41aa <__ultoa_invert+0x48>
    41a8:	68 94       	set
    41aa:	3f 91       	pop	r19
    41ac:	2a e0       	ldi	r18, 0x0A	; 10
    41ae:	26 9f       	mul	r18, r22
    41b0:	11 24       	eor	r1, r1
    41b2:	30 19       	sub	r19, r0
    41b4:	30 5d       	subi	r19, 0xD0	; 208
    41b6:	31 93       	st	Z+, r19
    41b8:	de f6       	brtc	.-74     	; 0x4170 <__ultoa_invert+0xe>
    41ba:	cf 01       	movw	r24, r30
    41bc:	08 95       	ret
    41be:	46 2f       	mov	r20, r22
    41c0:	47 70       	andi	r20, 0x07	; 7
    41c2:	40 5d       	subi	r20, 0xD0	; 208
    41c4:	41 93       	st	Z+, r20
    41c6:	b3 e0       	ldi	r27, 0x03	; 3
    41c8:	0f d0       	rcall	.+30     	; 0x41e8 <__ultoa_invert+0x86>
    41ca:	c9 f7       	brne	.-14     	; 0x41be <__ultoa_invert+0x5c>
    41cc:	f6 cf       	rjmp	.-20     	; 0x41ba <__ultoa_invert+0x58>
    41ce:	46 2f       	mov	r20, r22
    41d0:	4f 70       	andi	r20, 0x0F	; 15
    41d2:	40 5d       	subi	r20, 0xD0	; 208
    41d4:	4a 33       	cpi	r20, 0x3A	; 58
    41d6:	18 f0       	brcs	.+6      	; 0x41de <__ultoa_invert+0x7c>
    41d8:	49 5d       	subi	r20, 0xD9	; 217
    41da:	31 fd       	sbrc	r19, 1
    41dc:	40 52       	subi	r20, 0x20	; 32
    41de:	41 93       	st	Z+, r20
    41e0:	02 d0       	rcall	.+4      	; 0x41e6 <__ultoa_invert+0x84>
    41e2:	a9 f7       	brne	.-22     	; 0x41ce <__ultoa_invert+0x6c>
    41e4:	ea cf       	rjmp	.-44     	; 0x41ba <__ultoa_invert+0x58>
    41e6:	b4 e0       	ldi	r27, 0x04	; 4
    41e8:	a6 95       	lsr	r26
    41ea:	97 95       	ror	r25
    41ec:	87 95       	ror	r24
    41ee:	77 95       	ror	r23
    41f0:	67 95       	ror	r22
    41f2:	ba 95       	dec	r27
    41f4:	c9 f7       	brne	.-14     	; 0x41e8 <__ultoa_invert+0x86>
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	61 05       	cpc	r22, r1
    41fa:	71 05       	cpc	r23, r1
    41fc:	08 95       	ret
    41fe:	9b 01       	movw	r18, r22
    4200:	ac 01       	movw	r20, r24
    4202:	0a 2e       	mov	r0, r26
    4204:	06 94       	lsr	r0
    4206:	57 95       	ror	r21
    4208:	47 95       	ror	r20
    420a:	37 95       	ror	r19
    420c:	27 95       	ror	r18
    420e:	ba 95       	dec	r27
    4210:	c9 f7       	brne	.-14     	; 0x4204 <__ultoa_invert+0xa2>
    4212:	62 0f       	add	r22, r18
    4214:	73 1f       	adc	r23, r19
    4216:	84 1f       	adc	r24, r20
    4218:	95 1f       	adc	r25, r21
    421a:	a0 1d       	adc	r26, r0
    421c:	08 95       	ret

0000421e <_exit>:
    421e:	f8 94       	cli

00004220 <__stop_program>:
    4220:	ff cf       	rjmp	.-2      	; 0x4220 <__stop_program>
